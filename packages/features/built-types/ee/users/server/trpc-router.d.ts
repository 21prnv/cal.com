import type { inferRouterOutputs } from "@calcom/trpc";
export type UserAdminRouter = typeof userAdminRouter;
export type UserAdminRouterOutputs = inferRouterOutputs<UserAdminRouter>;
export declare const userAdminRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import("@calcom/trpc/server/createContext").InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
        stringify: (object: any) => string;
        parse: <T = unknown>(string: string) => T;
        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
        allowErrorProps: (...props: string[]) => void;
    };
}>, {
    get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            userId: number;
        };
        output: {
            user: {
                metadata: import(".prisma/client").Prisma.JsonValue;
                theme: string | null;
                id: number;
                name: string | null;
                email: string;
                organizationId: number | null;
                timeZone: string;
                username: string | null;
                locale: string | null;
                startTime: number;
                endTime: number;
                bio: string | null;
                hideBranding: boolean;
                brandColor: string | null;
                darkBrandColor: string | null;
                timeFormat: number | null;
                weekStart: string;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                emailVerified: Date | null;
                avatarUrl: string | null;
                bufferTime: number;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                disableImpersonation: boolean;
                locked: boolean;
                movedToProfileId: number | null;
                isPlatformManaged: boolean;
            };
        };
    }>;
    list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            metadata: import(".prisma/client").Prisma.JsonValue;
            theme: string | null;
            id: number;
            name: string | null;
            email: string;
            organizationId: number | null;
            timeZone: string;
            username: string | null;
            locale: string | null;
            startTime: number;
            endTime: number;
            bio: string | null;
            hideBranding: boolean;
            brandColor: string | null;
            darkBrandColor: string | null;
            timeFormat: number | null;
            weekStart: string;
            smsLockState: import(".prisma/client").$Enums.SMSLockState;
            smsLockReviewedByAdmin: boolean;
            emailVerified: Date | null;
            avatarUrl: string | null;
            bufferTime: number;
            appTheme: string | null;
            createdDate: Date;
            trialEndsAt: Date | null;
            defaultScheduleId: number | null;
            completedOnboarding: boolean;
            twoFactorSecret: string | null;
            twoFactorEnabled: boolean;
            backupCodes: string | null;
            identityProvider: import(".prisma/client").$Enums.IdentityProvider;
            identityProviderId: string | null;
            invitedTo: number | null;
            allowDynamicBooking: boolean | null;
            allowSEOIndexing: boolean | null;
            receiveMonthlyDigestEmail: boolean | null;
            verified: boolean | null;
            role: import(".prisma/client").$Enums.UserPermissionRole;
            disableImpersonation: boolean;
            locked: boolean;
            movedToProfileId: number | null;
            isPlatformManaged: boolean;
        }[];
    }>;
    add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            email: string;
            timeZone: string;
            weekStart: string;
            identityProvider: "CAL" | "GOOGLE" | "SAML";
            role: "USER" | "ADMIN";
            theme?: string | null | undefined;
            name?: string | null | undefined;
            username?: string | null | undefined;
            locale?: string | null | undefined;
            bio?: string | null | undefined;
            timeFormat?: number | null | undefined;
            avatarUrl?: string | null | undefined;
            defaultScheduleId?: number | null | undefined;
            allowDynamicBooking?: boolean | null | undefined;
        };
        output: {
            user: {
                metadata: import(".prisma/client").Prisma.JsonValue;
                theme: string | null;
                id: number;
                name: string | null;
                email: string;
                organizationId: number | null;
                timeZone: string;
                username: string | null;
                locale: string | null;
                startTime: number;
                endTime: number;
                bio: string | null;
                hideBranding: boolean;
                brandColor: string | null;
                darkBrandColor: string | null;
                timeFormat: number | null;
                weekStart: string;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                emailVerified: Date | null;
                avatarUrl: string | null;
                bufferTime: number;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                disableImpersonation: boolean;
                locked: boolean;
                movedToProfileId: number | null;
                isPlatformManaged: boolean;
            };
            message: string;
        };
    }>;
    update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            theme?: string | null | undefined;
            name?: string | null | undefined;
            email?: string | undefined;
            timeZone?: string | undefined;
            username?: string | null | undefined;
            locale?: string | null | undefined;
            bio?: string | null | undefined;
            timeFormat?: number | null | undefined;
            weekStart?: string | undefined;
            avatarUrl?: string | null | undefined;
            defaultScheduleId?: number | null | undefined;
            identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
            allowDynamicBooking?: boolean | null | undefined;
            role?: "USER" | "ADMIN" | undefined;
        };
        output: {
            user: {
                metadata: import(".prisma/client").Prisma.JsonValue;
                theme: string | null;
                id: number;
                name: string | null;
                email: string;
                organizationId: number | null;
                timeZone: string;
                username: string | null;
                locale: string | null;
                startTime: number;
                endTime: number;
                bio: string | null;
                hideBranding: boolean;
                brandColor: string | null;
                darkBrandColor: string | null;
                timeFormat: number | null;
                weekStart: string;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                emailVerified: Date | null;
                avatarUrl: string | null;
                bufferTime: number;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                disableImpersonation: boolean;
                locked: boolean;
                movedToProfileId: number | null;
                isPlatformManaged: boolean;
            };
            message: string;
        };
    }>;
    delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            userId: number;
        };
        output: {
            message: string;
        };
    }>;
}>;
//# sourceMappingURL=trpc-router.d.ts.map