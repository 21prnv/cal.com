export declare function useMeQuery(): import("@trpc/react-query/shared").UseTRPCQueryResult<{
    passwordAdded?: boolean | undefined;
    secondaryEmails: {
        id: number;
        email: string;
        emailVerified: Date | null;
    }[];
    sumOfBookings: number | undefined;
    sumOfCalendars: number | undefined;
    sumOfTeams: number | undefined;
    sumOfEventTypes: number | undefined;
    isPremium: boolean | undefined;
    sumOfTeamEventTypes: number;
    organizationId: null;
    organization: {
        id: number;
        isPlatform: boolean;
        slug: string;
        isOrgAdmin: boolean;
    };
    username: string | null;
    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
    profiles: never[];
    id: number;
    name: string | null;
    email: string;
    emailMd5: string;
    emailVerified: Date | null;
    startTime: number;
    endTime: number;
    bufferTime: number;
    locale: string;
    timeFormat: number | null;
    timeZone: string;
    avatar: string;
    avatarUrl: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    defaultScheduleId: number | null;
    completedOnboarding: boolean;
    twoFactorEnabled: boolean;
    disableImpersonation: boolean;
    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
    identityProviderEmail: string;
    brandColor: string | null;
    darkBrandColor: string | null;
    bio: string | null;
    weekStart: string;
    theme: string | null;
    appTheme: string | null;
    hideBranding: boolean;
    metadata: import(".prisma/client").Prisma.JsonValue;
    defaultBookerLayouts: {
        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
    } | null;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
} | {
    passwordAdded?: boolean | undefined;
    secondaryEmails: {
        id: number;
        email: string;
        emailVerified: Date | null;
    }[];
    sumOfBookings: number | undefined;
    sumOfCalendars: number | undefined;
    sumOfTeams: number | undefined;
    sumOfEventTypes: number | undefined;
    isPremium: boolean | undefined;
    sumOfTeamEventTypes: number;
    organizationId: number | null;
    organization: {
        id: number | null;
        isOrgAdmin: boolean;
        metadata: {
            requestedSlug?: string | null | undefined;
            paymentId?: string | undefined;
            subscriptionId?: string | null | undefined;
            subscriptionItemId?: string | null | undefined;
            orgSeats?: number | null | undefined;
            orgPricePerSeat?: number | null | undefined;
            migratedToOrgFrom?: {
                teamSlug?: string | null | undefined;
                lastMigrationTime?: string | undefined;
                reverted?: boolean | undefined;
                lastRevertTime?: string | undefined;
            } | undefined;
            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
        } | null;
        requestedSlug: string | null;
        organizationSettings?: {
            lockEventTypeCreationForUsers: boolean;
        } | null | undefined;
        name?: string | undefined;
        slug?: string | null | undefined;
        logoUrl?: string | null | undefined;
        calVideoLogo?: string | null | undefined;
        isPrivate?: boolean | undefined;
        bannerUrl?: string | null | undefined;
        isPlatform?: boolean | undefined;
        members?: {
            id: number;
            userId: number;
            teamId: number;
            role: import(".prisma/client").$Enums.MembershipRole;
            disableImpersonation: boolean;
            accepted: boolean;
        }[] | undefined;
    };
    username: string | null;
    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
        name: string | null;
        avatarUrl: string | null;
        startTime: number;
        endTime: number;
        bufferTime: number;
        user: {
            name: string | null;
            id: number;
            startTime: number;
            endTime: number;
            email: string;
            locale: string | null;
            username: string | null;
            avatarUrl: string | null;
            bufferTime: number;
            defaultScheduleId: number | null;
            isPlatformManaged: boolean;
        };
        organization: {
            organizationSettings: {
                lockEventTypeCreationForUsers: boolean;
            } | null;
            name: string;
            id: number;
            metadata: import(".prisma/client").Prisma.JsonValue;
            slug: string | null;
            logoUrl: string | null;
            calVideoLogo: string | null;
            isPrivate: boolean;
            bannerUrl: string | null;
            isPlatform: boolean;
            members: {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            }[];
        } & Omit<Pick<{
            id: number;
            name: string;
            slug: string | null;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            bio: string | null;
            hideBranding: boolean;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            createdAt: Date;
            metadata: import(".prisma/client").Prisma.JsonValue;
            theme: string | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            bannerUrl: string | null;
            parentId: number | null;
            timeFormat: number | null;
            timeZone: string;
            weekStart: string;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
            createdByOAuthClientId: string | null;
            smsLockState: import(".prisma/client").$Enums.SMSLockState;
            smsLockReviewedByAdmin: boolean;
        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
            requestedSlug: string | null;
            metadata: {
                requestedSlug: string | null;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?: {
                    teamSlug?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    lastRevertTime?: string | undefined;
                } | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
            };
        };
        movedFromUser: {
            id: number;
        } | null;
        id: number;
        uid: string;
        userId: number;
        createdAt: Date & string;
        updatedAt: Date & string;
        organizationId: number;
        username: string;
        upId: string;
    };
    profiles: import("@calcom/types/UserProfile").UserProfile[];
    id: number;
    name: string | null;
    email: string;
    emailMd5: string;
    emailVerified: Date | null;
    startTime: number;
    endTime: number;
    bufferTime: number;
    locale: string;
    timeFormat: number | null;
    timeZone: string;
    avatar: string;
    avatarUrl: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    defaultScheduleId: number | null;
    completedOnboarding: boolean;
    twoFactorEnabled: boolean;
    disableImpersonation: boolean;
    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
    identityProviderEmail: string;
    brandColor: string | null;
    darkBrandColor: string | null;
    bio: string | null;
    weekStart: string;
    theme: string | null;
    appTheme: string | null;
    hideBranding: boolean;
    metadata: import(".prisma/client").Prisma.JsonValue;
    defaultBookerLayouts: {
        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
    } | null;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
}, import("@trpc/client").TRPCClientErrorLike<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import("../../server/createContext").InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
        stringify: (object: any) => string;
        parse: <T = unknown>(string: string) => T;
        serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
        deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
        registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
        registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
        registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
        allowErrorProps: (...props: string[]) => void;
    };
}>>>;
export default useMeQuery;
