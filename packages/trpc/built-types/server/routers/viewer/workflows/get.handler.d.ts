import type { TrpcSessionUser } from "@calcom/trpc/server/trpc";
import type { TGetInputSchema } from "./get.schema";
type GetOptions = {
    ctx: {
        user: NonNullable<TrpcSessionUser>;
    };
    input: TGetInputSchema;
};
export declare const getHandler: ({ ctx, input }: GetOptions) => Promise<{
    team: {
        name: string;
        id: number;
        slug: string | null;
        isOrganization: boolean;
        members: {
            id: number;
            userId: number;
            teamId: number;
            role: import(".prisma/client").$Enums.MembershipRole;
            disableImpersonation: boolean;
            accepted: boolean;
        }[];
    } | null;
    name: string;
    id: number;
    userId: number | null;
    teamId: number | null;
    steps: {
        id: number;
        template: import(".prisma/client").$Enums.WorkflowTemplates;
        stepNumber: number;
        action: import(".prisma/client").$Enums.WorkflowActions;
        workflowId: number;
        sendTo: string | null;
        reminderBody: string | null;
        emailSubject: string | null;
        numberRequired: boolean | null;
        sender: string | null;
        numberVerificationPending: boolean;
        includeCalendarEvent: boolean;
    }[];
    time: number | null;
    isActiveOnAll: boolean;
    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
    activeOn: {
        eventType: {
            length: number;
            id: number;
            userId: number | null;
            title: string;
            description: string | null;
            metadata: import(".prisma/client").Prisma.JsonValue;
            timeZone: string | null;
            slug: string;
            position: number;
            locations: import(".prisma/client").Prisma.JsonValue;
            offsetStart: number;
            hidden: boolean;
            profileId: number | null;
            teamId: number | null;
            eventName: string | null;
            parentId: number | null;
            bookingFields: import(".prisma/client").Prisma.JsonValue;
            periodType: import(".prisma/client").$Enums.PeriodType;
            periodStartDate: Date | null;
            periodEndDate: Date | null;
            periodDays: number | null;
            periodCountCalendarDays: boolean | null;
            lockTimeZoneToggleOnBookingPage: boolean;
            requiresConfirmation: boolean;
            requiresConfirmationWillBlockSlot: boolean;
            requiresBookerEmailVerification: boolean;
            recurringEvent: import(".prisma/client").Prisma.JsonValue;
            disableGuests: boolean;
            hideCalendarNotes: boolean;
            minimumBookingNotice: number;
            beforeEventBuffer: number;
            afterEventBuffer: number;
            seatsPerTimeSlot: number | null;
            onlyShowFirstAvailableSlot: boolean;
            seatsShowAttendees: boolean | null;
            seatsShowAvailabilityCount: boolean | null;
            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
            scheduleId: number | null;
            price: number;
            currency: string;
            slotInterval: number | null;
            successRedirectUrl: string | null;
            forwardParamsSuccessRedirect: boolean | null;
            bookingLimits: import(".prisma/client").Prisma.JsonValue;
            durationLimits: import(".prisma/client").Prisma.JsonValue;
            isInstantEvent: boolean;
            instantMeetingExpiryTimeOffsetInSeconds: number;
            instantMeetingScheduleId: number | null;
            assignAllTeamMembers: boolean;
            useEventTypeDestinationCalendarEmail: boolean;
            isRRWeightsEnabled: boolean;
            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
            rescheduleWithSameRoundRobinHost: boolean;
            secondaryEmailId: number | null;
        };
    }[];
    activeOnTeams: {
        team: {
            name: string;
            id: number;
            createdAt: Date;
            metadata: import(".prisma/client").Prisma.JsonValue;
            timeZone: string;
            slug: string | null;
            parentId: number | null;
            logoUrl: string | null;
            calVideoLogo: string | null;
            appLogo: string | null;
            appIconLogo: string | null;
            bio: string | null;
            hideBranding: boolean;
            isPrivate: boolean;
            hideBookATeamMember: boolean;
            theme: string | null;
            brandColor: string | null;
            darkBrandColor: string | null;
            bannerUrl: string | null;
            timeFormat: number | null;
            weekStart: string;
            isOrganization: boolean;
            pendingPayment: boolean;
            isPlatform: boolean;
            createdByOAuthClientId: string | null;
            smsLockState: import(".prisma/client").$Enums.SMSLockState;
            smsLockReviewedByAdmin: boolean;
        };
    }[];
} | null>;
export {};
