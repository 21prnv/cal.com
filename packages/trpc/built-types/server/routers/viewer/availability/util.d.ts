import type { User } from "@prisma/client";
import type { PrismaClient } from "@calcom/prisma";
export declare const getDefaultScheduleId: (userId: number, prisma: PrismaClient) => Promise<number>;
export declare const hasDefaultSchedule: (user: Partial<User>, prisma: PrismaClient) => Promise<boolean>;
export declare const setupDefaultSchedule: (userId: number, scheduleId: number, prisma: PrismaClient) => Promise<{
    name: string | null;
    id: number;
    startTime: number;
    endTime: number;
    metadata: import(".prisma/client").Prisma.JsonValue;
    email: string;
    timeZone: string;
    locale: string | null;
    bio: string | null;
    hideBranding: boolean;
    theme: string | null;
    brandColor: string | null;
    darkBrandColor: string | null;
    timeFormat: number | null;
    weekStart: string;
    smsLockState: import(".prisma/client").$Enums.SMSLockState;
    smsLockReviewedByAdmin: boolean;
    organizationId: number | null;
    username: string | null;
    emailVerified: Date | null;
    avatarUrl: string | null;
    bufferTime: number;
    appTheme: string | null;
    createdDate: Date;
    trialEndsAt: Date | null;
    defaultScheduleId: number | null;
    completedOnboarding: boolean;
    twoFactorSecret: string | null;
    twoFactorEnabled: boolean;
    backupCodes: string | null;
    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
    identityProviderId: string | null;
    invitedTo: number | null;
    allowDynamicBooking: boolean | null;
    allowSEOIndexing: boolean | null;
    receiveMonthlyDigestEmail: boolean | null;
    verified: boolean | null;
    role: import(".prisma/client").$Enums.UserPermissionRole;
    disableImpersonation: boolean;
    locked: boolean;
    movedToProfileId: number | null;
    isPlatformManaged: boolean;
}>;
