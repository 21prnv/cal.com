export declare const viewerRouter: import("@trpc/server/unstable-core-do-not-import").Router<{
    _config: import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>;
    router: true;
    procedures: {
        loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includePasswordAdded?: boolean | undefined;
                } | undefined;
                output: {
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                        id: number;
                        email: string;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                    organizationId: null;
                    organization: {
                        id: number;
                        isPlatform: boolean;
                        slug: string;
                        isOrgAdmin: boolean;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                    profiles: never[];
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                } | {
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                        id: number;
                        email: string;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                    organizationId: number | null;
                    organization: {
                        id: number | null;
                        isOrgAdmin: boolean;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        } | null;
                        requestedSlug: string | null;
                        organizationSettings?: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null | undefined;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        isPrivate?: boolean | undefined;
                        bannerUrl?: string | null | undefined;
                        isPlatform?: boolean | undefined;
                        members?: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[] | undefined;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        user: {
                            name: string | null;
                            id: number;
                            startTime: number;
                            endTime: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            defaultScheduleId: number | null;
                            isPlatformManaged: boolean;
                        };
                        organization: {
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                            name: string;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                        };
                        movedFromUser: {
                            id: number;
                        } | null;
                        id: number;
                        uid: string;
                        userId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        organizationId: number;
                        username: string;
                        upId: string;
                    };
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                };
            }>;
            platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    username: string | null;
                    email: string;
                    timeFormat: number | null;
                    timeZone: string;
                    defaultScheduleId: number | null;
                    weekStart: string;
                    organizationId: number | null;
                    organization: {
                        isPlatform: any;
                        id: number | null;
                    };
                };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    password: string;
                    totpCode?: string | undefined;
                };
                output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    onboarding?: boolean | undefined;
                } | undefined;
                output: {
                    connectedCalendars: ({
                        integration: import("@calcom/types/App").App & {
                            credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                            credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary?: undefined;
                        calendars?: undefined;
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import(".prisma/client").$Enums.AppCategories[];
                            extendsFeature?: "EventType" | "User" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import(".prisma/client").Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        };
                        calendars: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        }[];
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import(".prisma/client").$Enums.AppCategories[];
                            extendsFeature?: "EventType" | "User" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import(".prisma/client").Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        error: {
                            message: string;
                        };
                        primary?: undefined;
                        calendars?: undefined;
                    })[];
                    destinationCalendar: {
                        primary?: boolean | undefined;
                        name?: string | undefined;
                        readOnly?: boolean | undefined;
                        email?: string | undefined;
                        primaryEmail: string | null;
                        credentialId: number | null;
                        integrationTitle?: string | undefined;
                        userId: number | null;
                        integration: string;
                        externalId: string;
                        id: number;
                        eventTypeId: number | null;
                    };
                };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    integration: string;
                    externalId: string;
                    eventTypeId?: number | null | undefined;
                    bookingId?: number | null | undefined;
                };
                output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    variant?: string | undefined;
                    exclude?: string[] | undefined;
                    onlyInstalled?: boolean | undefined;
                    includeTeamInstalledApps?: boolean | undefined;
                    extendsFeature?: "EventType" | undefined;
                    teamId?: number | null | undefined;
                    sortByMostPopular?: boolean | undefined;
                    categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
                    appId?: string | undefined;
                };
                output: {
                    items: {
                        dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                        userCredentialIds: number[];
                        invalidCredentialIds: number[];
                        teams: ({
                            teamId: number;
                            name: string;
                            logoUrl: string | null;
                            credentialId: number;
                            isAdmin: boolean;
                        } | null)[];
                        isInstalled: boolean | undefined;
                        isSetupAlready: boolean | undefined;
                        credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        enabled: boolean;
                    }[];
                };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId: string;
                };
                output: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    isInstalled: number;
                };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appType: string;
                };
                output: {
                    credentials: {
                        type: string;
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        subscriptionId: string | null;
                        billingCycleStart: number | null;
                        key: import(".prisma/client").Prisma.JsonValue;
                        appId: string | null;
                        paymentStatus: string | null;
                        invalid: boolean | null;
                    }[];
                    userAdminTeams: number[];
                };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    isPremium: boolean;
                    username: string | null;
                };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    bio?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        id: number;
                        email: string;
                        isDeleted?: boolean | undefined;
                    }[] | undefined;
                };
                output: {
                    email: string | undefined;
                    avatarUrl: string | null;
                    hasEmailBeenChanged: boolean | "" | undefined;
                    sendEmailVerification: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    bio?: string | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        id: number;
                        email: string;
                        isDeleted: boolean;
                    }[] | undefined;
                };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    message: string;
                };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: string[];
                };
                output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: string;
                    comment: string;
                };
                output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                        credentialId?: number | undefined;
                    }[];
                }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    externalId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    roomName: string;
                };
                output: {
                    data: import("zod").objectOutputType<{
                        id: import("zod").ZodString;
                        room_name: import("zod").ZodString;
                        start_ts: import("zod").ZodNumber;
                        status: import("zod").ZodString;
                        max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                        duration: import("zod").ZodNumber;
                        share_token: import("zod").ZodString;
                    }, import("zod").ZodTypeAny, "passthrough">[];
                    total_count: number;
                } | {} | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamUpgradeBanner: ({
                        team: {
                            children: {
                                name: string;
                                id: number;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }[];
                        } & {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    } & {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    orgUpgradeBanner: ({
                        team: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    } & {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    verifyEmailBanner: boolean;
                    calendarCredentialBanner: boolean;
                    invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
                };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    recordingId: string;
                };
                output: {
                    download_link: string;
                } | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    email: string;
                    isVerified: boolean;
                };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includeOrg?: boolean | undefined;
                } | undefined;
                output: ({
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    readOnly: boolean;
                } | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                })[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: {
                    isBookingAlreadyAcceptedBySomeoneElse: boolean;
                    meetingUrl: string;
                };
            }>;
            outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    dateRange: {
                        startDate: Date;
                        endDate: Date;
                    };
                    offset: number;
                    toTeamUserId: number | null;
                    reasonId: number;
                    uuid?: string | null | undefined;
                    notes?: string | null | undefined;
                };
                output: {} | undefined;
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    end: Date;
                    notes: string | null;
                    start: Date;
                    reason: {
                        id: number;
                        userId: number | null;
                        reason: string;
                        emoji: string;
                    } | null;
                    uuid: string;
                    toUserId: number | null;
                    toUser: {
                        username: string | null;
                    } | null;
                }[];
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    outOfOfficeUid: string;
                };
                output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    data: {
                        id: number;
                        userId: number;
                        email: string;
                        emailVerified: Date | null;
                    };
                    message: string;
                };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    timeZone: string;
                    startDate: Date;
                    endDate: Date | null;
                }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    userId: number | null;
                    enabled: boolean;
                    reason: string;
                    emoji: string;
                }[];
            }>;
            addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    subscription: string;
                };
                output: {
                    message: string;
                };
            }>;
            removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    subscription: string;
                };
                output: {
                    message: string;
                };
            }>;
            markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingUid: string;
                    attendees?: {
                        email: string;
                        noShow: boolean;
                    }[] | undefined;
                    noShowHost?: boolean | undefined;
                };
                output: {
                    attendees: {
                        email: string;
                        noShow: boolean;
                    }[];
                    noShowHost: boolean;
                    message: string;
                };
            }>;
        }>;
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import("next-auth").Session | null;
            }>;
            i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    locale: string;
                    CalComVersion: string;
                };
                output: {
                    i18n: import("next-i18next").SSRConfig;
                    locale: string;
                };
            }>;
            countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    countryCode: string;
                };
            }>;
            submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: number;
                    bookingUid: string;
                    comment?: string | undefined;
                };
                output: void;
            }>;
            markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    noShowHost: boolean;
                    bookingUid: string;
                };
                output: {
                    attendees: {
                        email: string;
                        noShow: boolean;
                    }[];
                    noShowHost: boolean;
                    message: string;
                };
            }>;
            samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    tenant: string;
                    product: string;
                };
            }>;
            stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    stripeCustomerId?: string | undefined;
                    checkoutSessionId?: string | undefined;
                };
                output: {
                    valid: boolean;
                    hasPaymentFailed?: undefined;
                    isPremiumUsername?: undefined;
                    customer?: undefined;
                } | {
                    valid: boolean;
                    hasPaymentFailed: boolean;
                    isPremiumUsername: boolean;
                    customer: {
                        username: string;
                        email: string;
                        stripeCustomerId: string;
                    };
                };
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startTime: string;
                        endTime: string;
                        eventTypeId?: number | undefined;
                        eventTypeSlug?: string | undefined;
                        timeZone?: string | undefined;
                        usernameList?: string[] | undefined;
                        debug?: boolean | undefined;
                        duration?: string | undefined;
                        rescheduleUid?: string | null | undefined;
                        isTeamEvent?: boolean | undefined;
                        orgSlug?: string | undefined;
                        teamMemberEmail?: string | null | undefined;
                    };
                    output: import("./slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        slotUtcStartDate: string;
                        slotUtcEndDate: string;
                        bookingUid?: string | undefined;
                    };
                    output: {
                        uid: string;
                    };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        uid: string | null;
                    };
                    output: void;
                }>;
            }>;
            event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    org: string | null;
                    eventSlug: string;
                    isTeamEvent?: boolean | undefined;
                    fromRedirectOfNonOrgLink?: boolean | undefined;
                };
                output: {
                    bookingFields: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    users: ({
                        metadata: undefined;
                        bookerUrl: string;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    } | {
                        metadata: undefined;
                        bookerUrl: string;
                        profile: {
                            organization: Omit<{
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                            } & Omit<Pick<{
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                                };
                            }, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                                };
                            };
                            id: number;
                            organizationId: number;
                            userId: number;
                            uid: string;
                            username: string;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            upId: string;
                        };
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    })[];
                    locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    profile: {
                        image?: string | undefined;
                        name?: string | undefined;
                        username?: string | null | undefined;
                        weekStart: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: null;
                        bookerLayouts: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null;
                    };
                    entity: {
                        considerUnpublished: boolean;
                        fromRedirectOfNonOrgLink: boolean;
                        orgSlug: string | null;
                        name: string | null;
                        teamSlug: null;
                        logoUrl: null;
                    };
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                position?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                hidden?: true | undefined;
                                length?: true | undefined;
                                parent?: true | undefined;
                                description?: true | undefined;
                                children?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                userId?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                hashedLink?: true | undefined;
                                bookings?: true | undefined;
                                availability?: true | undefined;
                                webhooks?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                schedule?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    isDynamic: boolean;
                    periodCountCalendarDays: boolean;
                    periodStartDate: null;
                    periodEndDate: null;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    periodType: "UNLIMITED";
                    periodDays: null;
                    slotInterval: null;
                    offsetStart: number;
                    customInputs: {
                        label: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        placeholder: string;
                        required: boolean;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    disableGuests: boolean;
                    minimumBookingNotice: number;
                    schedule: null;
                    timeZone: null;
                    successRedirectUrl: string;
                    forwardParamsSuccessRedirect: boolean;
                    teamId: null;
                    scheduleId: null;
                    availability: never[];
                    price: number;
                    currency: string;
                    schedulingType: "COLLECTIVE";
                    seatsPerTimeSlot: null;
                    seatsShowAttendees: null;
                    seatsShowAvailabilityCount: null;
                    onlyShowFirstAvailableSlot: boolean;
                    id: number;
                    hideCalendarNotes: boolean;
                    recurringEvent: null;
                    destinationCalendar: null;
                    team: null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    bookingLimits: null;
                    durationLimits: null;
                    hidden: boolean;
                    userId: number;
                    parentId: null;
                    parent: null;
                    owner: null;
                    workflows: never[];
                    hosts: never[];
                    assignAllTeamMembers: boolean;
                    isRRWeightsEnabled: boolean;
                    rescheduleWithSameRoundRobinHost: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: null;
                    secondaryEmail: null;
                    length: number;
                    slug: string;
                    title: string;
                    eventName: string;
                    description: string;
                    descriptionAsSafeHTML: string;
                    position: number;
                } | {
                    bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    description: string;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                position?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                hidden?: true | undefined;
                                length?: true | undefined;
                                parent?: true | undefined;
                                description?: true | undefined;
                                children?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                userId?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                hashedLink?: true | undefined;
                                bookings?: true | undefined;
                                availability?: true | undefined;
                                webhooks?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                schedule?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    customInputs: {
                        label: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        placeholder: string;
                        required: boolean;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    bookingFields: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    profile: {
                        username: string | null | undefined;
                        name: string | null;
                        weekStart: string;
                        image: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: string | null;
                        bookerLayouts: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null;
                    };
                    users: {
                        username: string | null;
                        name: string | null;
                        weekStart: string;
                        organizationId: any;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        bookerUrl: string;
                    }[];
                    entity: {
                        logoUrl?: string | undefined;
                        name: any;
                        fromRedirectOfNonOrgLink: boolean;
                        considerUnpublished: boolean;
                        orgSlug: string | null;
                        teamSlug: string | null;
                    };
                    isDynamic: boolean;
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    aiPhoneCallConfig: {
                        id: number;
                        eventTypeId: number;
                        enabled: boolean;
                        templateType: string;
                        schedulerName: string | null;
                        generalPrompt: string | null;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string | null;
                        guestEmail: string | null;
                        guestCompany: string | null;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                    assignAllTeamMembers: boolean;
                    owner: ({
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        username: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        weekStart: string;
                        organization: {
                            id: number;
                            name: string;
                            slug: string | null;
                            calVideoLogo: string | null;
                            bannerUrl: string | null;
                        } | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }) | null;
                    hosts: {
                        user: {
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            id: number;
                            name: string | null;
                            username: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            weekStart: string;
                            organization: {
                                id: number;
                                name: string;
                                slug: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                    }[];
                    title: string;
                    hidden: boolean;
                    length: number;
                    id: number;
                    slug: string;
                    eventName: string | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    disableGuests: boolean;
                    seatsPerTimeSlot: number | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    rescheduleWithSameRoundRobinHost: boolean;
                    team: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        name: string;
                        parent: {
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            bannerUrl: string | null;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                    } | null;
                    schedule: {
                        id: number;
                        timeZone: string | null;
                    } | null;
                    workflows: ({
                        workflow: {
                            steps: {
                                template: import(".prisma/client").$Enums.WorkflowTemplates;
                                id: number;
                                action: import(".prisma/client").$Enums.WorkflowActions;
                                stepNumber: number;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                        } & {
                            position: number;
                            time: number | null;
                            id: number;
                            name: string;
                            userId: number | null;
                            teamId: number | null;
                            isActiveOnAll: boolean;
                            trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                            timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                        };
                    } & {
                        id: number;
                        eventTypeId: number;
                        workflowId: number;
                    })[];
                    instantMeetingSchedule: {
                        id: number;
                        timeZone: string | null;
                    } | null;
                } | null;
            }>;
            ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    connectionExists: null;
                } | {
                    connectionExists: boolean;
                };
            }>;
            checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    email: string;
                    userSessionEmail?: string | undefined;
                };
                output: boolean;
            }>;
        }>;
        auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    oldPassword: string;
                    newPassword: string;
                };
                output: void;
            }>;
            verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    passwordInput: string;
                };
                output: void;
            }>;
            verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                };
                output: true;
            }>;
            sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    username?: string | undefined;
                    language?: string | undefined;
                    isVerifyingEmail?: boolean | undefined;
                };
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                } | undefined;
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
        }>;
        deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    licenseKey?: string | undefined;
                };
                output: void;
            }>;
        }>;
        bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters: {
                        status: "cancelled" | "upcoming" | "recurring" | "past" | "unconfirmed";
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        eventTypeIds?: number[] | undefined;
                    };
                    limit?: number | null | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    bookings: {
                        eventType: {
                            recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                            eventTypeColor: {
                                lightEventTypeColor: string;
                                darkEventTypeColor: string;
                            } | null;
                            price: number;
                            currency: string;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    campsite?: {} | undefined;
                                    closecom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    googlevideo?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        roundRobinLeadSkip?: boolean | undefined;
                                        skipContactCreation?: boolean | undefined;
                                    } | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    twipla?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    umami?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                        SCRIPT_URL?: string | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    all?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        length?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        profile?: true | undefined;
                                        team?: true | undefined;
                                        schedule?: true | undefined;
                                        availability?: true | undefined;
                                        hashedLink?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        userId?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        customInputs?: true | undefined;
                                        metadata?: true | undefined;
                                        timeZone?: true | undefined;
                                        slug?: true | undefined;
                                        position?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        hidden?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresConfirmationWillBlockSlot?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        price?: true | undefined;
                                        currency?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                        instantMeetingScheduleId?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        isRRWeightsEnabled?: true | undefined;
                                        eventTypeColor?: true | undefined;
                                        rescheduleWithSameRoundRobinHost?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hosts?: true | undefined;
                                        users?: true | undefined;
                                        owner?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        parent?: true | undefined;
                                        children?: true | undefined;
                                        workflows?: true | undefined;
                                        instantMeetingSchedule?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                                } | null | undefined;
                            } | null;
                            team?: {
                                name: string;
                                id: number;
                                members: {
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    role: import(".prisma/client").$Enums.MembershipRole;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } | null | undefined;
                            id?: number | undefined;
                            slug?: string | undefined;
                            eventName?: string | null | undefined;
                            seatsShowAttendees?: boolean | null | undefined;
                            seatsShowAvailabilityCount?: boolean | null | undefined;
                            schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                        };
                        startTime: string;
                        endTime: string;
                        isUserTeamAdminOrOwner: boolean;
                        status: import(".prisma/client").$Enums.BookingStatus;
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        } | null;
                        payment: {
                            currency: string;
                            success: boolean;
                            amount: number;
                            paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                        }[];
                        references: {
                            type: string;
                            id: number;
                            uid: string;
                            bookingId: number | null;
                            deleted: boolean | null;
                            credentialId: number | null;
                            thirdPartyRecurringEventId: string | null;
                            meetingId: string | null;
                            meetingPassword: string | null;
                            meetingUrl: string | null;
                            externalCalendarId: string | null;
                        }[];
                        attendees: {
                            name: string;
                            id: number;
                            email: string;
                            timeZone: string;
                            locale: string | null;
                            noShow: boolean | null;
                            bookingId: number | null;
                        }[];
                        seatsReferences: {
                            attendee: {
                                email: string;
                            };
                            referenceUid: string;
                        }[];
                        id: number;
                        uid: string;
                        userPrimaryEmail: string | null;
                        title: string;
                        description: string | null;
                        customInputs: import(".prisma/client").Prisma.JsonValue;
                        location: string | null;
                        paid: boolean;
                        rescheduled: boolean | null;
                        recurringEventId: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        isRecorded: boolean;
                    }[];
                    recurringInfo: {
                        recurringEventId: string | null;
                        count: number;
                        firstDate: Date | null;
                        bookings: {
                            [key: string]: Date[];
                        };
                    }[];
                    nextCursor: number | null;
                };
            }>;
            requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: string;
                    rescheduleReason?: string | undefined;
                };
                output: void;
            }>;
            editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    newLocation: string;
                    details?: {
                        credentialId?: number | undefined;
                    } | undefined;
                };
                output: {
                    message: string;
                };
            }>;
            addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    guests: string[];
                };
                output: {
                    message: string;
                };
            }>;
            confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    confirmed: boolean;
                    recurringEventId?: string | undefined;
                    reason?: string | undefined;
                };
                output: {
                    message: string;
                    status: "ACCEPTED" | "REJECTED";
                } | null;
            }>;
            getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    seatReferenceUid: string;
                };
                output: number;
            }>;
            find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingUid?: string | undefined;
                };
                output: {
                    booking: {
                        status: import(".prisma/client").$Enums.BookingStatus;
                        id: number;
                        uid: string;
                        eventTypeId: number | null;
                        description: string | null;
                        startTime: Date;
                        endTime: Date;
                        paid: boolean;
                    } | null;
                };
            }>;
            getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    booking: {
                        status: import(".prisma/client").$Enums.BookingStatus;
                        id: number;
                        uid: string;
                        eventTypeId: number | null;
                        description: string | null;
                        startTime: Date;
                        endTime: Date;
                        location: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                    } | null;
                };
            }>;
        }>;
        eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                } | null | undefined;
                output: {
                    allUsersAcrossAllEventTypes: Map<number, {
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }>;
                    eventTypeGroups: {
                        eventTypes: {
                            userIds: number[];
                            safeDescription: string | undefined;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    campsite?: {} | undefined;
                                    closecom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    googlevideo?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        roundRobinLeadSkip?: boolean | undefined;
                                        skipContactCreation?: boolean | undefined;
                                    } | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    twipla?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    umami?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                        SCRIPT_URL?: string | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    all?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        length?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        profile?: true | undefined;
                                        team?: true | undefined;
                                        schedule?: true | undefined;
                                        availability?: true | undefined;
                                        hashedLink?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        userId?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        customInputs?: true | undefined;
                                        metadata?: true | undefined;
                                        timeZone?: true | undefined;
                                        slug?: true | undefined;
                                        position?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        hidden?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresConfirmationWillBlockSlot?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        price?: true | undefined;
                                        currency?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                        instantMeetingScheduleId?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        isRRWeightsEnabled?: true | undefined;
                                        eventTypeColor?: true | undefined;
                                        rescheduleWithSameRoundRobinHost?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hosts?: true | undefined;
                                        users?: true | undefined;
                                        owner?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        parent?: true | undefined;
                                        children?: true | undefined;
                                        workflows?: true | undefined;
                                        instantMeetingSchedule?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                                } | null | undefined;
                            } | null;
                            children: {
                                users: ({
                                    name: string | null;
                                    id: number;
                                    username: string | null;
                                    avatarUrl: string | null;
                                } & {
                                    nonProfileUsername: string | null;
                                    profile: import("@calcom/types/UserProfile").UserProfile;
                                })[];
                                length: number;
                                id: number;
                                userId: number | null;
                                title: string;
                                description: string | null;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string | null;
                                slug: string;
                                position: number;
                                locations: import(".prisma/client").Prisma.JsonValue;
                                offsetStart: number;
                                hidden: boolean;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import(".prisma/client").Prisma.JsonValue;
                                periodType: import(".prisma/client").$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresConfirmationWillBlockSlot: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                price: number;
                                currency: string;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                                durationLimits: import(".prisma/client").Prisma.JsonValue;
                                isInstantEvent: boolean;
                                instantMeetingExpiryTimeOffsetInSeconds: number;
                                instantMeetingScheduleId: number | null;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                isRRWeightsEnabled: boolean;
                                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                                rescheduleWithSameRoundRobinHost: boolean;
                                secondaryEmailId: number | null;
                            }[];
                            length: number;
                            hashedLink: {
                                id: number;
                                eventTypeId: number;
                                link: string;
                            } | null;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                            hosts: ({
                                user: {
                                    name: string | null;
                                    id: number;
                                    username: string | null;
                                    avatarUrl: string | null;
                                };
                            } & {
                                userId: number;
                                eventTypeId: number;
                                isFixed: boolean;
                                priority: number | null;
                                weight: number | null;
                                weightAdjustment: number | null;
                            })[];
                            aiPhoneCallConfig: {
                                id: number;
                                eventTypeId: number;
                                enabled: boolean;
                                templateType: string;
                                schedulerName: string | null;
                                generalPrompt: string | null;
                                yourPhoneNumber: string;
                                numberToCall: string;
                                guestName: string | null;
                                guestEmail: string | null;
                                guestCompany: string | null;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        }[];
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                        bookerUrl: string;
                        membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        };
                        metadata: {
                            membershipCount: number;
                            readOnly: boolean;
                        };
                    }[];
                    profiles: {
                        teamId: number | null | undefined;
                        membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        membershipCount: number;
                        readOnly: boolean;
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    }[];
                };
            }>;
            getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                } | null | undefined;
                output: {
                    eventTypeGroups: {
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                        bookerUrl: string;
                        membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        };
                        metadata: {
                            membershipCount: number;
                            readOnly: boolean;
                        };
                    }[];
                    profiles: {
                        teamId: number | null | undefined;
                        membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        membershipCount: number;
                        readOnly: boolean;
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    }[];
                };
            }>;
            getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    group: {
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                    };
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                    cursor?: number | null | undefined;
                    limit?: number | undefined;
                };
                output: {
                    eventTypes: {
                        safeDescription: string | undefined;
                        users: ({
                            name: string | null;
                            id: number;
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        children: {
                            users: ({
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            })[];
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        }[];
                        length: number;
                        hashedLink: {
                            id: number;
                            eventTypeId: number;
                            link: string;
                        } | null;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                        hosts: ({
                            user: {
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            };
                        } & {
                            userId: number;
                            eventTypeId: number;
                            isFixed: boolean;
                            priority: number | null;
                            weight: number | null;
                            weightAdjustment: number | null;
                        })[];
                        aiPhoneCallConfig: {
                            id: number;
                            eventTypeId: number;
                            enabled: boolean;
                            templateType: string;
                            schedulerName: string | null;
                            generalPrompt: string | null;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string | null;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    }[];
                    nextCursor: number | undefined;
                };
            }>;
            getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                    isOrg?: boolean | undefined;
                } | null | undefined;
                output: {
                    eventTypeOptions: {
                        value: string;
                        label: string;
                    }[];
                    teamOptions: {
                        value: string;
                        label: string;
                    }[];
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    length: number;
                    id: number;
                    title: string;
                    description: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string;
                    hidden: boolean;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                }[];
            }>;
            listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    team: {
                        name: string;
                        id: number;
                    } | null;
                    id: number;
                    title: string;
                    slug: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    length: number;
                    title: string;
                    slug: string;
                    description?: string | null | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    hidden?: boolean | undefined;
                    teamId?: number | null | undefined;
                    disableGuests?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    scheduleId?: number | undefined;
                    slotInterval?: number | null | undefined;
                };
                output: {
                    eventType: {
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    eventType: {
                        schedule: number | null;
                        instantMeetingSchedule: number | null;
                        scheduleName: string | null;
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        eventTypeColor: {
                            lightEventTypeColor: string;
                            darkEventTypeColor: string;
                        } | null;
                        locations: import("@calcom/app-store/locations").LocationObject[];
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        };
                        customInputs: {
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            label: string;
                            required: boolean;
                            placeholder: string;
                            options?: {
                                type: string;
                                label: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        users: {
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        }[];
                        bookerUrl: string;
                        children: {
                            owner: {
                                avatar: string;
                                email: string;
                                name: string;
                                username: string;
                                membership: import(".prisma/client").$Enums.MembershipRole;
                                id: number;
                                avatarUrl: string | null;
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                            created: boolean;
                            slug: string;
                            hidden: boolean;
                        }[];
                        length: number;
                        destinationCalendar: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            credentialId: number | null;
                            integration: string;
                            externalId: string;
                            primaryEmail: string | null;
                        } | null;
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            parentId: number | null;
                            parent: {
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                                slug: string | null;
                            } | null;
                            members: {
                                user: {
                                    name: string | null;
                                    id: number;
                                    email: string;
                                    locale: string | null;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                    username: string | null;
                                    avatarUrl: string | null;
                                    defaultScheduleId: number | null;
                                };
                                role: import(".prisma/client").$Enums.MembershipRole;
                                accepted: boolean;
                            }[];
                        } | null;
                        hashedLink: {
                            id: number;
                            eventTypeId: number;
                            link: string;
                        } | null;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        timeZone: string | null;
                        slug: string;
                        offsetStart: number;
                        hidden: boolean;
                        teamId: number | null;
                        eventName: string | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                        hosts: {
                            userId: number;
                            isFixed: boolean;
                            priority: number | null;
                            weight: number | null;
                            weightAdjustment: number | null;
                        }[];
                        owner: {
                            id: number;
                        } | null;
                        webhooks: {
                            id: string;
                            eventTypeId: number | null;
                            secret: string | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            active: boolean;
                            eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                        }[];
                        parent: {
                            id: number;
                            teamId: number | null;
                        } | null;
                        workflows: ({
                            workflow: {
                                team: {
                                    name: string;
                                    id: number;
                                    slug: string | null;
                                    members: {
                                        id: number;
                                        userId: number;
                                        teamId: number;
                                        role: import(".prisma/client").$Enums.MembershipRole;
                                        disableImpersonation: boolean;
                                        accepted: boolean;
                                    }[];
                                } | null;
                                name: string;
                                id: number;
                                userId: number | null;
                                teamId: number | null;
                                steps: {
                                    id: number;
                                    template: import(".prisma/client").$Enums.WorkflowTemplates;
                                    stepNumber: number;
                                    action: import(".prisma/client").$Enums.WorkflowActions;
                                    workflowId: number;
                                    sendTo: string | null;
                                    reminderBody: string | null;
                                    emailSubject: string | null;
                                    numberRequired: boolean | null;
                                    sender: string | null;
                                    numberVerificationPending: boolean;
                                    includeCalendarEvent: boolean;
                                }[];
                                time: number | null;
                                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                                activeOn: {
                                    eventType: {
                                        id: number;
                                        title: string;
                                        parentId: number | null;
                                        _count: {
                                            children: number;
                                        };
                                    };
                                }[];
                            };
                        } & {
                            id: number;
                            eventTypeId: number;
                            workflowId: number;
                        })[];
                        aiPhoneCallConfig: {
                            id: number;
                            eventTypeId: number;
                            enabled: boolean;
                            templateType: string;
                            schedulerName: string | null;
                            generalPrompt: string | null;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string | null;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    } & {
                        users: ({
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        } & {
                            avatar: string;
                        })[];
                        periodStartDate: string | null;
                        periodEndDate: string | null;
                        bookingFields: {
                            type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                            name: string;
                            label?: string | undefined;
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            maxLength?: number | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            placeholder?: string | undefined;
                            required?: boolean | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "phone" | "address";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            minLength?: number | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                        name: string;
                                        label?: string | undefined;
                                        maxLength?: number | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                        placeholder?: string | undefined;
                                        required?: boolean | undefined;
                                        minLength?: number | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                            disableOnPrefill?: boolean | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    };
                    locationOptions: {
                        label: string;
                        options: {
                            label: string;
                            value: string;
                            disabled?: boolean | undefined;
                            icon?: string | undefined;
                            slug?: string | undefined;
                            credentialId?: number | undefined;
                        }[];
                    }[];
                    destinationCalendar: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        credentialId: number | null;
                        integration: string;
                        externalId: string;
                        primaryEmail: string | null;
                    } | null;
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        parentId: number | null;
                        parent: {
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                            slug: string | null;
                        } | null;
                        members: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                                username: string | null;
                                avatarUrl: string | null;
                                defaultScheduleId: number | null;
                            };
                            role: import(".prisma/client").$Enums.MembershipRole;
                            accepted: boolean;
                        }[];
                    } | null;
                    teamMembers: {
                        profileId: number | null;
                        eventTypes: string[];
                        membership: import(".prisma/client").$Enums.MembershipRole;
                        name: string | null;
                        id: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        avatar: string;
                    }[];
                    currentUserMembership: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            eventTypes: {
                                slug: string;
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        };
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    } | null;
                    isUserOrganizationAdmin: boolean;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: (number[] & (string | number)[]) | undefined;
                    length?: number | undefined;
                    destinationCalendar?: {
                        integration: string;
                        externalId: string;
                    } | null | undefined;
                    schedule?: number | null | undefined;
                    hashedLink?: string | undefined;
                    userId?: number | null | undefined;
                    title?: string | undefined;
                    description?: string | null | undefined;
                    customInputs?: {
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        label: string;
                        required: boolean;
                        placeholder: string;
                        options?: {
                            type: string;
                            label: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[] | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    timeZone?: string | null | undefined;
                    slug?: string | undefined;
                    position?: number | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    offsetStart?: number | undefined;
                    hidden?: boolean | undefined;
                    profileId?: number | null | undefined;
                    teamId?: number | null | undefined;
                    eventName?: string | null | undefined;
                    parentId?: number | null | undefined;
                    bookingFields?: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] | undefined;
                    periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                    periodStartDate?: Date | null | undefined;
                    periodEndDate?: Date | null | undefined;
                    periodDays?: number | null | undefined;
                    periodCountCalendarDays?: boolean | null | undefined;
                    lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                    requiresConfirmation?: boolean | undefined;
                    requiresConfirmationWillBlockSlot?: boolean | undefined;
                    requiresBookerEmailVerification?: boolean | undefined;
                    recurringEvent?: {
                        count: number;
                        interval: number;
                        freq: import("@calcom/prisma/zod-utils").Frequency;
                        dtstart?: Date | undefined;
                        until?: Date | undefined;
                        tzid?: string | undefined;
                    } | null | undefined;
                    disableGuests?: boolean | undefined;
                    hideCalendarNotes?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    seatsPerTimeSlot?: number | null | undefined;
                    onlyShowFirstAvailableSlot?: boolean | undefined;
                    seatsShowAttendees?: boolean | null | undefined;
                    seatsShowAvailabilityCount?: boolean | null | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    scheduleId?: number | null | undefined;
                    price?: number | undefined;
                    currency?: string | undefined;
                    slotInterval?: number | null | undefined;
                    successRedirectUrl?: string | null | undefined;
                    forwardParamsSuccessRedirect?: boolean | null | undefined;
                    bookingLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    durationLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    isInstantEvent?: boolean | undefined;
                    instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
                    instantMeetingScheduleId?: number | null | undefined;
                    assignAllTeamMembers?: boolean | undefined;
                    useEventTypeDestinationCalendarEmail?: boolean | undefined;
                    isRRWeightsEnabled?: boolean | undefined;
                    eventTypeColor?: {
                        lightEventTypeColor: string;
                        darkEventTypeColor: string;
                    } | null | undefined;
                    rescheduleWithSameRoundRobinHost?: boolean | undefined;
                    secondaryEmailId?: number | null | undefined;
                    hosts?: {
                        userId: number;
                        profileId?: number | null | undefined;
                        isFixed?: boolean | undefined;
                        priority?: number | null | undefined;
                        weight?: number | null | undefined;
                    }[] | undefined;
                    children?: {
                        hidden: boolean;
                        owner: {
                            name: string;
                            id: number;
                            email: string;
                            eventTypeSlugs: string[];
                        };
                    }[] | undefined;
                    instantMeetingSchedule?: number | null | undefined;
                    aiPhoneCallConfig?: {
                        enabled: boolean;
                        templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                        generalPrompt: string;
                        beginMessage: string | null;
                        yourPhoneNumber?: string | undefined;
                        numberToCall?: string | undefined;
                        guestName?: string | null | undefined;
                        guestEmail?: string | null | undefined;
                        guestCompany?: string | null | undefined;
                    } | undefined;
                    calAiPhoneScript?: string | undefined;
                };
                output: {
                    eventType: {
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            parentId: number | null;
                            parent: {
                                slug: string | null;
                            } | null;
                            members: {
                                user: {
                                    name: string | null;
                                    id: number;
                                    email: string;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                role: import(".prisma/client").$Enums.MembershipRole;
                                accepted: boolean;
                            }[];
                        } | null;
                        title: string;
                        isRRWeightsEnabled: boolean;
                        children: {
                            userId: number | null;
                        }[];
                        workflows: {
                            workflowId: number;
                        }[];
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            generalPrompt: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    id: number;
                };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                    length: number;
                    title: string;
                    description: string;
                    slug: string;
                    teamId?: number | null | undefined;
                };
                output: {
                    eventType: {
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    eventTypes: {
                        logo: string | undefined;
                        id: number;
                        title: string;
                        locations: import(".prisma/client").Prisma.JsonValue;
                    }[];
                };
            }>;
            bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
        }>;
        availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    schedules: {
                        isDefault: boolean;
                        availability: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        name: string;
                        id: number;
                        timeZone: string | null;
                    }[];
                };
            }>;
            user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    dateFrom: string;
                    dateTo: string;
                    eventTypeId?: string | number | undefined;
                    withSource?: boolean | undefined;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    limit: number;
                    loggedInUsersTz: string;
                    cursor?: number | null | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    rows: ({
                        id: number;
                        organizationId: number | null;
                        name: string | null;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                        avatarUrl?: undefined;
                        profile?: undefined;
                    } | {
                        id: number;
                        username: string | null;
                        email: string;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        name: string | null;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    })[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        scheduleId?: number | undefined;
                        isManagedEventType?: boolean | undefined;
                    };
                    output: {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        schedule?: {
                            end: Date;
                            start: Date;
                        }[][] | undefined;
                        eventTypeId?: number | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: void;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                        timeZone?: string | undefined;
                        name?: string | undefined;
                        isDefault?: boolean | undefined;
                        schedule?: {
                            end: Date;
                            start: Date;
                        }[][] | undefined;
                        dateOverrides?: {
                            end: Date;
                            start: Date;
                        }[] | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                        };
                        isDefault: boolean;
                        availability?: undefined;
                        timeZone?: undefined;
                        prevDefaultId?: undefined;
                        currentDefaultId?: undefined;
                    } | {
                        schedule: {
                            eventType: {
                                id: number;
                                eventName: string | null;
                            }[];
                            availability: {
                                id: number;
                                userId: number | null;
                                eventTypeId: number | null;
                                startTime: Date;
                                endTime: Date;
                                scheduleId: number | null;
                                days: number[];
                                date: Date | null;
                            }[];
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                        availability: import("@calcom/types/schedule").Schedule;
                        timeZone: string;
                        isDefault: boolean;
                        prevDefaultId: number | null;
                        currentDefaultId: number | null;
                    };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                    };
                }>;
                getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId?: number | undefined;
                    };
                    output: {
                        hasDefaultSchedule: boolean;
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    } | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                        hasDefaultSchedule: boolean;
                    };
                }>;
                getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        eventSlug: string;
                    };
                    output: {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    } | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                    };
                }>;
                bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeIds: number[];
                    };
                    output: import("@prisma/client/runtime/library").GetBatchResult;
                }>;
            }>;
            calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    dateFrom: string | null;
                    dateTo: string | null;
                    loggedInUsersTz: string;
                    calendarsToLoad: {
                        credentialId: number;
                        externalId: string;
                    }[];
                };
                output: import("@calcom/types/Calendar").EventBusyDate[];
            }>;
        }>;
        teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    members: {
                        username: string | null;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        organization: any;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        subteams: (string | null)[] | null;
                        bookerUrl: string;
                        connectedApps: {
                            name: any;
                            logo: any;
                            app: {
                                slug: string;
                                categories: import(".prisma/client").$Enums.AppCategories[];
                            } | null;
                            externalId: string | null;
                        }[] | null;
                        name: string | null;
                        id: number;
                        email: string;
                        bio: string | null;
                        teams: {
                            team: {
                                id: number;
                                slug: string | null;
                            };
                        }[];
                        avatarUrl: string | null;
                        nonProfileUsername: string | null;
                    }[];
                    safeBio: string;
                    membership: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                    inviteToken: {
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    };
                    eventTypes: {
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        users: ({
                            name: string | null;
                            id: number;
                            email: string;
                            bio: string | null;
                            credentials: {
                                app: {
                                    slug: string;
                                    categories: import(".prisma/client").$Enums.AppCategories[];
                                } | null;
                                destinationCalendars: {
                                    externalId: string;
                                }[];
                            }[];
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        length: number;
                        id: number;
                        title: string;
                        description: string | null;
                        slug: string;
                        hidden: boolean;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        price: number;
                        currency: string;
                        hosts: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                bio: string | null;
                                credentials: {
                                    app: {
                                        slug: string;
                                        categories: import(".prisma/client").$Enums.AppCategories[];
                                    } | null;
                                    destinationCalendars: {
                                        externalId: string;
                                    }[];
                                }[];
                                teams: {
                                    team: {
                                        id: number;
                                        slug: string | null;
                                    };
                                }[];
                                username: string | null;
                                avatarUrl: string | null;
                            };
                        }[];
                    }[] | null;
                    logo?: string | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        isOrganization: boolean;
                    } | null;
                    children: {
                        name: string;
                        slug: string | null;
                    }[];
                    logoUrl: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    isOrganization: boolean;
                };
            }>;
            getMinimal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    membership: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                    inviteToken: {
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    };
                    logo?: string | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        isOrganization: boolean;
                    } | null;
                    children: {
                        name: string;
                        slug: string | null;
                    }[];
                    logoUrl: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    isOrganization: boolean;
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includeOrgs?: boolean | undefined;
                } | undefined;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    inviteToken: {
                        id: number;
                        createdAt: Date;
                        updatedAt: Date;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    } | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    inviteToken: {
                        id: number;
                        createdAt: Date;
                        updatedAt: Date;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    } | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    logo?: string | null | undefined;
                };
                output: {
                    url: string;
                    message: string;
                    team: null;
                } | {
                    url: string;
                    message: string;
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    bio?: string | undefined;
                    name?: string | undefined;
                    logo?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    isPrivate?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                };
                output: {
                    logoUrl: string | null;
                    name: string;
                    bio: string | null;
                    slug: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                } | undefined;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamIds: number[];
                    memberIds: number[];
                    isOrg?: boolean | undefined;
                };
                output: void;
            }>;
            inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    language: string;
                    usernameOrEmail: (string | (string | {
                        email: string;
                        role: "ADMIN" | "MEMBER" | "OWNER";
                    })[]) & (string | (string | {
                        email: string;
                        role: "ADMIN" | "MEMBER" | "OWNER";
                    })[] | undefined);
                    role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
                };
                output: {
                    usernameOrEmail: string | string[];
                    numUsersInvited: number;
                };
            }>;
            acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    accept: boolean;
                };
                output: void;
            }>;
            changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    memberId: number;
                };
                output: void;
            }>;
            getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    dateFrom: string;
                    dateTo: string;
                    memberId: number;
                    timezone: string;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    memberId: number;
                };
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                } | null;
            }>;
            updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    disableImpersonation: boolean;
                    memberId: number;
                };
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                };
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    url: string;
                    message: string;
                };
            }>;
            getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        children: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }[];
                    } & {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIds?: number[] | undefined;
                };
                output: ({
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                } & {
                    accepted: boolean;
                } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
            }>;
            lazyLoadMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    limit?: number | undefined;
                    searchTerm?: string | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    members: {
                        username: string | null;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        organization: any;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        bookerUrl: string;
                        name: string | null;
                        id: number;
                        email: string;
                        bio: string | null;
                        avatarUrl: string | null;
                        nonProfileUsername: string | null;
                    }[];
                    nextCursor: number | undefined;
                };
            }>;
            getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    userIds: number[];
                };
                output: Record<number, {
                    name: string | null;
                    logo: string | null;
                    externalId: string | null;
                    app: {
                        slug: string;
                        categories: import("@calcom/prisma/enums").AppCategories[];
                    } | null;
                }[]>;
            }>;
            hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    hasTeamPlan: boolean;
                };
            }>;
            listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    token?: string | undefined;
                };
                output: {
                    token: string;
                    inviteLink: string;
                };
            }>;
            setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                    expiresInDays?: number | undefined;
                };
                output: void;
            }>;
            deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: void;
            }>;
            inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: string;
            }>;
            hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    memberId: number;
                };
                output: boolean;
            }>;
            resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    teamId: number;
                    language: string;
                    isOrg?: boolean | undefined;
                };
                output: {
                    email: string;
                    teamId: number;
                    language: string;
                    isOrg: boolean;
                };
            }>;
            roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    teamId: number;
                };
                output: void;
            }>;
            checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    value: string;
                    teamId: number;
                };
                output: boolean;
            }>;
        }>;
        timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    CalComVersion: string;
                };
                output: {
                    city: string;
                    timezone: string;
                    pop: number;
                }[];
            }>;
        }>;
        organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    orgOwnerEmail: string;
                    language?: string | undefined;
                    seats?: number | undefined;
                    pricePerSeat?: number | undefined;
                    isPlatform?: boolean | undefined;
                    billingPeriod?: import("./organizations/create.schema").BillingPeriod | undefined;
                };
                output: {
                    userId: number;
                    email: string;
                    organizationId: number;
                    upId: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name?: string | undefined;
                    orgId?: string | number | undefined;
                    bio?: string | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    banner?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    timeFormat?: number | undefined;
                    metadata?: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | undefined;
                    lockEventTypeCreation?: boolean | undefined;
                    lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                    adminGetsNoSlotsNotification?: boolean | undefined;
                };
                output: {
                    update: boolean;
                    userId: number;
                    data: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                };
            }>;
            verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                };
                output: true;
            }>;
            createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                    teamNames: string[];
                    moveTeams: {
                        id: number;
                        newSlug: string | null;
                        shouldMove: boolean;
                    }[];
                };
                output: {
                    duplicatedSlugs: string[];
                };
            }>;
            listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    name: string;
                    id: number;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    canAdminImpersonate: boolean;
                    organizationSettings: {
                        lockEventTypeCreationForUsers: boolean | undefined;
                        adminGetsNoSlotsNotification: boolean | undefined;
                    };
                    user: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                };
            }>;
            checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    url: string;
                    message: string;
                };
            }>;
            setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    newPassword: string;
                };
                output: {
                    update: boolean;
                };
            }>;
            getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIdToExclude?: number | undefined;
                    accepted?: boolean | undefined;
                    distinctUser?: boolean | undefined;
                };
                output: {
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        completedOnboarding: boolean;
                    };
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | undefined;
                };
                output: {
                    canUserGetMembers: boolean;
                    rows: never[];
                    meta: {
                        totalRowCount: number;
                    };
                    nextCursor?: undefined;
                } | {
                    rows: {
                        id: number;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        completedOnboarding: boolean;
                        avatarUrl: string | null;
                        teams: ({
                            id: number;
                            name: string;
                            slug: string | null;
                        } | undefined)[];
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                    canUserGetMembers?: undefined;
                };
            }>;
            getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    slug: string;
                    fullDomain: string;
                    domainSuffix: string;
                    name: string;
                    logoUrl: string | null;
                    isPlatform: boolean;
                } | null;
            }>;
            getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId?: number | undefined;
                };
                output: {
                    teams: {
                        accepted: boolean;
                        name: string;
                        id: number;
                    }[];
                    role: import(".prisma/client").$Enums.MembershipRole;
                    name: string | null;
                    id: number;
                    email: string;
                    timeZone: string;
                    bio: string | null;
                    schedules: {
                        name: string;
                        id: number;
                    }[];
                    username: string | null;
                    avatarUrl: string | null;
                };
            }>;
            updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    timeZone: string;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    username?: string | undefined;
                    bio?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    avatar?: string | undefined;
                    attributeOptions?: {
                        userId: number;
                        attributes: {
                            id: string;
                            options?: {
                                value: string;
                                label?: string | undefined;
                            }[] | undefined;
                            value?: string | undefined;
                        }[];
                    } | undefined;
                };
                output: {
                    success: boolean;
                };
            }>;
            getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    id: number;
                }[];
            }>;
            addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    teamIds: number[];
                };
                output: {
                    success: boolean;
                    invitedTotalUsers: number;
                };
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    teamIds: number[];
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                };
                output: {
                    success: boolean;
                    usersDeleted: number;
                };
            }>;
            listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    limit: number;
                    query?: string | undefined;
                    offset?: number | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    rows: {
                        bookerUrl: string;
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                    nextCursor: number | null | undefined;
                };
            }>;
            getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    safeBio: string;
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    parent: {
                        id: number;
                        slug: string | null;
                    } | null;
                    logoUrl: string | null;
                    bio: string | null;
                    isPrivate: boolean;
                };
            }>;
            listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                }[];
            }>;
            deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    organizationSettings: {
                        id: number;
                        organizationId: number;
                        isOrganizationConfigured: boolean;
                        isOrganizationVerified: boolean;
                        orgAutoAcceptEmail: string;
                        lockEventTypeCreationForUsers: boolean;
                        adminGetsNoSlotsNotification: boolean;
                        isAdminReviewed: boolean;
                        isAdminAPIEnabled: boolean;
                    } | null;
                    name: string;
                    id: number;
                    slug: string | null;
                    members: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        };
                    }[];
                }[];
            }>;
            adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    organizationSettings: {
                        isOrganizationConfigured: boolean;
                        isOrganizationVerified: boolean;
                        orgAutoAcceptEmail: string;
                    } | null;
                    name: string;
                    id: number;
                    slug: string | null;
                    isOrganization: boolean;
                    members: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        };
                    }[];
                };
            }>;
            adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    organizationSettings?: {
                        isOrganizationVerified?: boolean | undefined;
                        isOrganizationConfigured?: boolean | undefined;
                        isAdminReviewed?: boolean | undefined;
                        orgAutoAcceptEmail?: string | undefined;
                        isAdminAPIEnabled?: boolean | undefined;
                    } | undefined;
                };
                output: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            }>;
            adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                    yourPhoneNumber: string;
                    numberToCall: string;
                    calApiKey: string;
                    enabled?: boolean | undefined;
                    schedulerName?: string | null | undefined;
                    guestName?: string | undefined;
                    guestEmail?: string | undefined;
                    guestCompany?: string | undefined;
                    beginMessage?: string | undefined;
                    generalPrompt?: string | undefined;
                };
                output: import("zod").objectOutputType<{
                    call_id: import("zod").ZodString;
                    agent_id: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">;
            }>;
        }>;
        webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    appId?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
                } | undefined;
                output: {
                    id: string;
                    userId: number | null;
                    eventTypeId: number | null;
                    createdAt: Date;
                    teamId: number | null;
                    secret: string | null;
                    appId: string | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                }[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    webhookId?: string | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    secret: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[];
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                    platform?: boolean | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    eventTypeId: number | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    createdAt: Date;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    appId: string | null;
                    secret: string | null;
                    platform: boolean;
                };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    payloadTemplate: string | null;
                    subscriberUrl?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
                    active?: boolean | undefined;
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    eventTypeId: number | null;
                    createdAt: Date;
                    teamId: number | null;
                    secret: string | null;
                    appId: string | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                } | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
            testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    type: string;
                    url: string;
                    secret?: string | undefined;
                    payloadTemplate?: string | null | undefined;
                };
                output: {
                    message?: string | undefined;
                    ok: boolean;
                    status: number;
                };
            }>;
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                } | undefined;
                output: {
                    webhookGroups: {
                        teamId?: number | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image?: string | undefined;
                        };
                        metadata?: {
                            readOnly: boolean;
                        } | undefined;
                        webhooks: {
                            id: string;
                            userId: number | null;
                            teamId: number | null;
                            eventTypeId: number | null;
                            platformOAuthClientId: string | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            createdAt: Date;
                            active: boolean;
                            eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                            appId: string | null;
                            secret: string | null;
                            platform: boolean;
                        }[];
                    }[];
                    profiles: {
                        readOnly?: boolean | undefined;
                        slug: string | null;
                        name: string | null;
                        image?: string | undefined;
                        teamId: number | null | undefined;
                    }[];
                };
            }>;
        }>;
        apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    note?: string | null | undefined;
                    expiresAt?: Date | null | undefined;
                    neverExpires?: boolean | undefined;
                    appId?: string | null | undefined;
                    teamId?: number | undefined;
                };
                output: string;
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    note?: string | null | undefined;
                    expiresAt?: Date | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
        }>;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | undefined;
                    teamMemberEmail?: string | null | undefined;
                };
                output: import("./slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                };
                output: {
                    uid: string;
                };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    uid: string | null;
                };
                output: void;
            }>;
        }>;
        workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                    userId?: number | undefined;
                } | undefined;
                output: {
                    workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } | null;
                    name: string;
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        stepNumber: number;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                    }[];
                    time: number | null;
                    isActiveOnAll: boolean;
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    activeOn: {
                        eventType: {
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        };
                    }[];
                    activeOnTeams: {
                        team: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    }[];
                } | null;
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    workflow: {
                        id: number;
                        position: number;
                        name: string;
                        userId: number | null;
                        teamId: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        time: number | null;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                };
                output: {
                    id: number;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    id: number;
                    steps: {
                        id: number;
                        template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                        stepNumber: number;
                        action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        includeCalendarEvent: boolean;
                        senderName: string | null;
                    }[];
                    time: number | null;
                    trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                    timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                    activeOn: number[];
                    isActiveOnAll?: boolean | undefined;
                };
                output: {
                    workflow: ({
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            isOrganization: boolean;
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } | null;
                        steps: {
                            id: number;
                            template: import(".prisma/client").$Enums.WorkflowTemplates;
                            stepNumber: number;
                            action: import(".prisma/client").$Enums.WorkflowActions;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                        activeOn: {
                            eventType: {
                                length: number;
                                id: number;
                                userId: number | null;
                                title: string;
                                description: string | null;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string | null;
                                slug: string;
                                position: number;
                                locations: import(".prisma/client").Prisma.JsonValue;
                                offsetStart: number;
                                hidden: boolean;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import(".prisma/client").Prisma.JsonValue;
                                periodType: import(".prisma/client").$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresConfirmationWillBlockSlot: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                price: number;
                                currency: string;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                                durationLimits: import(".prisma/client").Prisma.JsonValue;
                                isInstantEvent: boolean;
                                instantMeetingExpiryTimeOffsetInSeconds: number;
                                instantMeetingScheduleId: number | null;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                isRRWeightsEnabled: boolean;
                                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                                rescheduleWithSameRoundRobinHost: boolean;
                                secondaryEmailId: number | null;
                            };
                        }[];
                        activeOnTeams: {
                            team: {
                                name: string;
                                id: number;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            };
                        }[];
                    } & {
                        name: string;
                        id: number;
                        userId: number | null;
                        position: number;
                        teamId: number | null;
                        time: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    }) | null;
                };
            }>;
            activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    workflowId: number;
                };
                output: void;
            }>;
            sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    phoneNumber: string;
                };
                output: void;
            }>;
            verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    phoneNumber: string;
                    teamId?: number | undefined;
                };
                output: boolean;
            }>;
            getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    phoneNumber: string;
                }[];
            }>;
            getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: string[];
            }>;
            verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                    teamId?: number | undefined;
                };
                output: true;
            }>;
            getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    label: string;
                    value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                    needsTeamsUpgrade: boolean;
                }[];
            }>;
            filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                    totalCount: number;
                } | undefined;
            }>;
            getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    eventType: {
                        id: number;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        teamId?: number | null | undefined;
                        parent?: {
                            id: number | null;
                            teamId: number | null;
                        } | null | undefined;
                        userId?: number | null | undefined;
                    };
                };
                output: import("@calcom/ee/workflows/lib/types").Workflow[];
            }>;
        }>;
        saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                };
                output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                    encodedRawMetadata: string;
                };
                output: import("@boxyhq/saml-jackson").SAMLSSORecord;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                };
                output: void;
            }>;
            updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                    clientId: string;
                    clientSecret: string;
                    wellKnownUrl: string;
                };
                output: import("@boxyhq/saml-jackson").OIDCSSORecord;
            }>;
        }>;
        dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    organizationId: number | null;
                    provider: string;
                };
                output: import("@boxyhq/saml-jackson").Directory;
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    organizationId: number | null;
                };
                output: import("@boxyhq/saml-jackson").Directory | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    organizationId: number | null;
                    directoryId: string;
                };
                output: null;
            }>;
            teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        teamGroupMapping: {
                            id: number;
                            name: string;
                            slug: string | null;
                            directoryId: string;
                            groupNames: string[];
                        }[];
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        teamId: number;
                        directoryId: string;
                    };
                    output: {
                        newGroupName: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        groupName: string;
                    };
                    output: {
                        deletedGroupName: string;
                    };
                }>;
            }>;
        }>;
        insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_2 = unknown>(string: string) => T_2;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_1, O_1 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_1, O_1>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    empty: boolean;
                    created: {
                        count: number;
                        deltaPrevious: number;
                    };
                    completed: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rescheduled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    cancelled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rating: {
                        count: number;
                        deltaPrevious: number;
                    };
                    no_show: {
                        count: number;
                        deltaPrevious: number;
                    };
                    csat: {
                        count: number;
                        deltaPrevious: number;
                    };
                    previousRange: {
                        startDate: string;
                        endDate: string;
                    };
                };
            }>;
            eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    timeView: "day" | "month" | "year" | "week";
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Month: string;
                    Created: number;
                    Completed: number;
                    Rescheduled: number;
                    Cancelled: number;
                    "No-Show (Host)": number;
                }[];
            }>;
            popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: ({
                    eventTypeId?: undefined;
                    eventTypeName?: undefined;
                    count?: undefined;
                } | {
                    eventTypeId: number | null;
                    eventTypeName: string;
                    count: number;
                })[];
            }>;
            averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Date: string;
                    Average: number;
                }[];
            }>;
            membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
            }>;
            userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                    isAll: boolean | null;
                };
                output: {
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }[];
            }>;
            eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    title: string;
                    id: number;
                    slug: string;
                    teamId: number | null;
                    team: {
                        name: string;
                    } | null;
                }[];
            }>;
            recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    rating: number | null;
                    feedback: string | null;
                }[];
            }>;
            membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    memberUserId?: number | null | undefined;
                    isAll?: boolean | undefined;
                    eventTypeId?: number | null | undefined;
                };
                output: {
                    data: string;
                    filename: string;
                };
            }>;
        }>;
        payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    id: number;
                    uid: string;
                    appId: string | null;
                    bookingId: number;
                    amount: number;
                    fee: number;
                    currency: string;
                    success: boolean;
                    refunded: boolean;
                    data: import(".prisma/client").Prisma.JsonValue;
                    externalId: string;
                    paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                };
            }>;
        }>;
        appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_3 = unknown>(string: string) => T_3;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_2 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_2;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_2, O_2 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_2, O_2>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T_4 = unknown>(string: string) => T_4;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1_3 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_3;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I_3, O_3 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_3, O_3>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        formFillerId: string;
                        formId: string;
                        response: Record<string, {
                            value: (string | number | string[]) & (string | number | string[] | undefined);
                            label: string;
                        }>;
                    };
                    output: {
                        id: number;
                        createdAt: Date;
                        formFillerId: string;
                        formId: string;
                        response: import(".prisma/client").Prisma.JsonValue;
                    };
                }>;
            }>;
            forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: {
                        form: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                            team: ({
                                members: {
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    role: import(".prisma/client").$Enums.MembershipRole;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } & {
                                id: number;
                                name: string;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                theme: string | null;
                                createdAt: Date;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }) | null;
                            _count: {
                                responses: number;
                            };
                        } & {
                            id: string;
                            name: string;
                            description: string | null;
                            routes: import(".prisma/client").Prisma.JsonValue;
                            fields: import(".prisma/client").Prisma.JsonValue;
                            position: number;
                            disabled: boolean;
                            userId: number;
                            createdAt: Date;
                            updatedAt: Date;
                            teamId: number | null;
                            settings: import(".prisma/client").Prisma.JsonValue;
                        }>;
                        readOnly: boolean;
                    }[];
                    totalCount: number;
                };
            }>;
            formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: string;
                };
                output: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                    team: {
                        name: string;
                        slug: string | null;
                    } | null;
                    _count: {
                        responses: number;
                    };
                } & {
                    id: string;
                    name: string;
                    description: string | null;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    position: number;
                    disabled: boolean;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                }> | null;
            }>;
            formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    name: string;
                    description?: string | null | undefined;
                    disabled?: boolean | undefined;
                    fields?: ({
                        type: string;
                        label: string;
                        id: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                        options?: {
                            label: string;
                            id: string | null;
                        }[] | undefined;
                    } | {
                        type: string;
                        label: string;
                        id: string;
                        routerId: string;
                        options?: {
                            label: string;
                            id: string | null;
                        }[] | undefined;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                    })[] | undefined;
                    routes?: ({
                        id: string;
                        queryValue: {
                            type: "group" | "switch_group";
                            id?: string | undefined;
                            children1?: any;
                            properties?: any;
                        };
                        action: {
                            type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                            value: string;
                        };
                        isFallback?: boolean | undefined;
                    } | {
                        id: string;
                        isRouter: true;
                    })[] | null | undefined;
                    addFallback?: boolean | undefined;
                    duplicateFrom?: string | null | undefined;
                    teamId?: number | null | undefined;
                    shouldConnect?: boolean | undefined;
                    settings?: {
                        emailOwnerOnSubmission: boolean;
                        sendUpdatesTo?: number[] | undefined;
                        sendToAll?: boolean | undefined;
                    } | null | undefined;
                };
                output: {
                    id: string;
                    name: string;
                    description: string | null;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    position: number;
                    disabled: boolean;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                };
            }>;
            deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    formId: string;
                    jsonLogicQuery: {
                        logic: Record<string, any> | null;
                    };
                    cursor?: number | null | undefined;
                };
                output: {
                    headers: string[];
                    responses: string[][];
                    nextCursor: number | null;
                };
            }>;
        }>;
        appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_5 = unknown>(string: string) => T_5;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_4 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_4;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_4, O_4 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_4, O_4>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: any;
            }>;
            projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    projectId: string;
                };
                output: any;
            }>;
        }>;
        features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_6 = unknown>(string: string) => T_6;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_5 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_5;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_5, O_5 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_5, O_5>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    type: import(".prisma/client").$Enums.FeatureType | null;
                    description: string | null;
                    slug: string;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    enabled: boolean;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                }[];
            }>;
            map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: Partial<import("@calcom/features/flags/config").AppFlags>;
            }>;
        }>;
        appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    category: string;
                };
                output: ({
                    name: string;
                    slug: string;
                    logo: string;
                    title: string | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    description: string;
                    keys: import(".prisma/client").Prisma.JsonObject | null;
                    dirName: string;
                    enabled: boolean;
                    isTemplate: boolean | undefined;
                } | {
                    name: string;
                    slug: string;
                    logo: string;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title: string | undefined;
                    description: string;
                    enabled: boolean;
                    dirName: string;
                    keys: Record<string, string> | null;
                    isTemplate?: undefined;
                })[];
            }>;
            toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                    enabled: boolean;
                };
                output: boolean;
            }>;
            saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    type: string;
                    slug: string;
                    dirName: string;
                    keys?: unknown;
                    fromEnabled?: boolean | undefined;
                };
                output: void;
            }>;
            checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: boolean;
            }>;
            setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                };
                output: void;
            }>;
            updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    key: {} & {
                        [k: string]: unknown;
                    };
                    credentialId: number;
                };
                output: boolean;
            }>;
            queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: string[] | undefined;
                output: {
                    name: string;
                    slug: string;
                    installed: boolean;
                }[] | undefined;
            }>;
            checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    slug: string;
                };
                output: boolean;
            }>;
        }>;
        users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_7 = unknown>(string: string) => T_7;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_6 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_6;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_6, O_6 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_6, O_6>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    organizationId: number | null;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                }[];
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    timeZone: string;
                    weekStart: string;
                    identityProvider: "CAL" | "GOOGLE" | "SAML";
                    role: "USER" | "ADMIN";
                    theme?: string | null | undefined;
                    name?: string | null | undefined;
                    username?: string | null | undefined;
                    locale?: string | null | undefined;
                    bio?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    avatarUrl?: string | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                    message: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    theme?: string | null | undefined;
                    name?: string | null | undefined;
                    email?: string | undefined;
                    timeZone?: string | undefined;
                    username?: string | null | undefined;
                    locale?: string | null | undefined;
                    bio?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    weekStart?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                    role?: "USER" | "ADMIN" | undefined;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                    message: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    message: string;
                };
            }>;
        }>;
        oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    clientId: string;
                };
                output: {
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                } | null;
            }>;
            addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    logo: string;
                    redirectUri: string;
                };
                output: {
                    clientSecret: string;
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                };
            }>;
            generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    clientId: string;
                    scopes: string[];
                    teamSlug?: string | undefined;
                };
                output: {
                    client: {
                        name: string;
                        clientId: string;
                        redirectUri: string;
                    };
                    authorizationCode: string;
                };
            }>;
        }>;
        googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number | undefined;
                };
            }>;
            getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: string[];
            }>;
            removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    deleted: number;
                };
            }>;
        }>;
        admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | null | undefined;
                };
                output: {
                    rows: {
                        name: string | null;
                        id: number;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        locked: boolean;
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                };
            }>;
            lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    locked: boolean;
                };
                output: {
                    success: boolean;
                    userId: number;
                    locked: boolean;
                };
            }>;
            toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                    enabled: boolean;
                };
                output: {
                    type: import(".prisma/client").$Enums.FeatureType | null;
                    description: string | null;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    slug: string;
                    enabled: boolean;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                };
            }>;
            removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                    userId: number;
                };
            }>;
            getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    users: {
                        locked: {
                            name: string | null;
                            id: number;
                            email: string;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            username: string | null;
                            avatarUrl: string | null;
                        }[];
                        reviewNeeded: {
                            name: string | null;
                            id: number;
                            email: string;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            username: string | null;
                            avatarUrl: string | null;
                        }[];
                    };
                    teams: {
                        locked: {
                            name: string;
                            id: number;
                            slug: string | null;
                            logoUrl: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        }[];
                        reviewNeeded: {
                            name: string;
                            id: number;
                            slug: string | null;
                            logoUrl: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        }[];
                    };
                };
            }>;
            setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId?: number | undefined;
                    username?: string | undefined;
                    teamId?: number | undefined;
                    teamSlug?: string | undefined;
                    lock?: boolean | undefined;
                };
                output: {
                    name: string | null;
                    locked: boolean | undefined;
                };
            }>;
            createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    billingPeriod: "MONTHLY" | "ANNUALLY";
                    billingType: "PER_BOOKING" | "PER_USER";
                    entityCount: number;
                    entityPrice: number;
                    overages: number;
                    billingEmail: string;
                };
                output: {
                    stripeCheckoutUrl: string;
                };
            }>;
        }>;
        attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    options: {
                        value: string;
                        id: string;
                        slug: string;
                        attributeId: string;
                    }[];
                } & {
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    teamId: number;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                })[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: string;
                };
                output: {
                    options: {
                        value: string;
                        id?: string | undefined;
                        assignedUsers?: number | undefined;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                    id: string;
                };
            }>;
            getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    id: string;
                    name: string;
                    type: import("@calcom/prisma/enums").AttributeType;
                    options: {
                        id: string;
                        slug: string;
                        value: string;
                    }[];
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    options: {
                        value: string;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                };
                output: {
                    id: string;
                    teamId: number;
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    slug: string;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    options: {
                        value: string;
                        id?: string | undefined;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                    attributeId: string;
                };
                output: {
                    id: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                };
                output: {
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    teamId: number;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                };
            }>;
            toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    attributeId: string;
                };
                output: {
                    enabled: boolean;
                    id: string;
                };
            }>;
            assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    attributes: {
                        id: string;
                        options?: {
                            value: string;
                            label?: string | undefined;
                        }[] | undefined;
                        value?: string | undefined;
                    }[];
                };
                output: {
                    success: boolean;
                    message: string;
                };
            }>;
        }>;
    } & {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includePasswordAdded?: boolean | undefined;
            } | undefined;
            output: {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: null;
                organization: {
                    id: number;
                    isPlatform: boolean;
                    slug: string;
                    isOrgAdmin: boolean;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                profiles: never[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            } | {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: number | null;
                organization: {
                    id: number | null;
                    isOrgAdmin: boolean;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    requestedSlug: string | null;
                    organizationSettings?: {
                        lockEventTypeCreationForUsers: boolean;
                    } | null | undefined;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    isPrivate?: boolean | undefined;
                    bannerUrl?: string | null | undefined;
                    isPlatform?: boolean | undefined;
                    members?: {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[] | undefined;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    user: {
                        name: string | null;
                        id: number;
                        startTime: number;
                        endTime: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        defaultScheduleId: number | null;
                        isPlatformManaged: boolean;
                    };
                    organization: {
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null;
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } & Omit<Pick<{
                        id: number;
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        parentId: number | null;
                        timeFormat: number | null;
                        timeZone: string;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                        requestedSlug: string | null;
                        metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        };
                    };
                    movedFromUser: {
                        id: number;
                    } | null;
                    id: number;
                    uid: string;
                    userId: number;
                    createdAt: Date & string;
                    updatedAt: Date & string;
                    organizationId: number;
                    username: string;
                    upId: string;
                };
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            };
        }>;
        platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                username: string | null;
                email: string;
                timeFormat: number | null;
                timeZone: string;
                defaultScheduleId: number | null;
                weekStart: string;
                organizationId: number | null;
                organization: {
                    isPlatform: any;
                    id: number | null;
                };
            };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                password: string;
                totpCode?: string | undefined;
            };
            output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                onboarding?: boolean | undefined;
            } | undefined;
            output: {
                connectedCalendars: ({
                    integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary?: undefined;
                    calendars?: undefined;
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    };
                    calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    }[];
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    error: {
                        message: string;
                    };
                    primary?: undefined;
                    calendars?: undefined;
                })[];
                destinationCalendar: {
                    primary?: boolean | undefined;
                    name?: string | undefined;
                    readOnly?: boolean | undefined;
                    email?: string | undefined;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    integrationTitle?: string | undefined;
                    userId: number | null;
                    integration: string;
                    externalId: string;
                    id: number;
                    eventTypeId: number | null;
                };
            };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                integration: string;
                externalId: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
            };
            output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
                appId?: string | undefined;
            };
            output: {
                items: {
                    dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                    userCredentialIds: number[];
                    invalidCredentialIds: number[];
                    teams: ({
                        teamId: number;
                        name: string;
                        logoUrl: string | null;
                        credentialId: number;
                        isAdmin: boolean;
                    } | null)[];
                    isInstalled: boolean | undefined;
                    isSetupAlready: boolean | undefined;
                    credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    enabled: boolean;
                }[];
            };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appId: string;
            };
            output: {
                installed?: boolean | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title?: string | undefined;
                name: string;
                description: string;
                variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                slug: string;
                category?: string | undefined;
                categories: import(".prisma/client").$Enums.AppCategories[];
                extendsFeature?: "EventType" | "User" | undefined;
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string | undefined;
                verified?: boolean | undefined;
                trending?: boolean | undefined;
                rating?: number | undefined;
                reviews?: number | undefined;
                isGlobal?: boolean | undefined;
                simplePath?: string | undefined;
                email: string;
                key?: import(".prisma/client").Prisma.JsonValue | undefined;
                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                price?: number | undefined;
                commission?: number | undefined;
                licenseRequired?: boolean | undefined;
                teamsPlanRequired?: {
                    upgradeUrl: string;
                } | undefined;
                appData?: import("@calcom/types/App").AppData | undefined;
                paid?: import("@calcom/types/App").PaidAppData | undefined;
                dirName?: string | undefined;
                isTemplate?: boolean | undefined;
                __template?: string | undefined;
                dependencies?: string[] | undefined;
                concurrentMeetings?: boolean | undefined;
                createdAt?: string | undefined;
                isOAuth?: boolean | undefined;
                locationOption: {
                    label: string;
                    value: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                } | null;
                isInstalled: number;
            };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appType: string;
            };
            output: {
                credentials: {
                    type: string;
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    subscriptionId: string | null;
                    billingCycleStart: number | null;
                    key: import(".prisma/client").Prisma.JsonValue;
                    appId: string | null;
                    paymentStatus: string | null;
                    invalid: boolean | null;
                }[];
                userAdminTeams: number[];
            };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                isPremium: boolean;
                username: string | null;
            };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted?: boolean | undefined;
                }[] | undefined;
            };
            output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted: boolean;
                }[] | undefined;
            };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                message: string;
            };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: string[];
            };
            output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                rating: string;
                comment: string;
            };
            output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                label: string;
                options: {
                    label: string;
                    value: string;
                    disabled?: boolean | undefined;
                    icon?: string | undefined;
                    slug?: string | undefined;
                    credentialId?: number | undefined;
                }[];
            }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
            };
            output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                roomName: string;
            };
            output: {
                data: import("zod").objectOutputType<{
                    id: import("zod").ZodString;
                    room_name: import("zod").ZodString;
                    start_ts: import("zod").ZodNumber;
                    status: import("zod").ZodString;
                    max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                    duration: import("zod").ZodNumber;
                    share_token: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">[];
                total_count: number;
            } | {} | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                teamUpgradeBanner: ({
                    team: {
                        children: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }[];
                    } & {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
            };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                recordingId: string;
            };
            output: {
                download_link: string;
            } | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            } | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                email: string;
                isVerified: boolean;
            };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includeOrg?: boolean | undefined;
            } | undefined;
            output: ({
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import(".prisma/client").$Enums.MembershipRole;
                readOnly: boolean;
            } | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
            })[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
            };
        }>;
        outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                dateRange: {
                    startDate: Date;
                    endDate: Date;
                };
                offset: number;
                toTeamUserId: number | null;
                reasonId: number;
                uuid?: string | null | undefined;
                notes?: string | null | undefined;
            };
            output: {} | undefined;
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                end: Date;
                notes: string | null;
                start: Date;
                reason: {
                    id: number;
                    userId: number | null;
                    reason: string;
                    emoji: string;
                } | null;
                uuid: string;
                toUserId: number | null;
                toUser: {
                    username: string | null;
                } | null;
            }[];
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                outOfOfficeUid: string;
            };
            output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            };
            output: {
                data: {
                    id: number;
                    userId: number;
                    email: string;
                    emailVerified: Date | null;
                };
                message: string;
            };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                timeZone: string;
                startDate: Date;
                endDate: Date | null;
            }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                userId: number | null;
                enabled: boolean;
                reason: string;
                emoji: string;
            }[];
        }>;
        addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingUid: string;
                attendees?: {
                    email: string;
                    noShow: boolean;
                }[] | undefined;
                noShowHost?: boolean | undefined;
            };
            output: {
                attendees: {
                    email: string;
                    noShow: boolean;
                }[];
                noShowHost: boolean;
                message: string;
            };
        }>;
    };
    record: {
        loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includePasswordAdded?: boolean | undefined;
                } | undefined;
                output: {
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                        id: number;
                        email: string;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                    organizationId: null;
                    organization: {
                        id: number;
                        isPlatform: boolean;
                        slug: string;
                        isOrgAdmin: boolean;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                    profiles: never[];
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                } | {
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                        id: number;
                        email: string;
                        emailVerified: Date | null;
                    }[];
                    sumOfBookings: number | undefined;
                    sumOfCalendars: number | undefined;
                    sumOfTeams: number | undefined;
                    sumOfEventTypes: number | undefined;
                    isPremium: boolean | undefined;
                    sumOfTeamEventTypes: number;
                    organizationId: number | null;
                    organization: {
                        id: number | null;
                        isOrgAdmin: boolean;
                        metadata: {
                            requestedSlug?: string | null | undefined;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        } | null;
                        requestedSlug: string | null;
                        organizationSettings?: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null | undefined;
                        name?: string | undefined;
                        slug?: string | null | undefined;
                        logoUrl?: string | null | undefined;
                        calVideoLogo?: string | null | undefined;
                        isPrivate?: boolean | undefined;
                        bannerUrl?: string | null | undefined;
                        isPlatform?: boolean | undefined;
                        members?: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[] | undefined;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        user: {
                            name: string | null;
                            id: number;
                            startTime: number;
                            endTime: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            defaultScheduleId: number | null;
                            isPlatformManaged: boolean;
                        };
                        organization: {
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                            name: string;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                        };
                        movedFromUser: {
                            id: number;
                        } | null;
                        id: number;
                        uid: string;
                        userId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        organizationId: number;
                        username: string;
                        upId: string;
                    };
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                };
            }>;
            platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    username: string | null;
                    email: string;
                    timeFormat: number | null;
                    timeZone: string;
                    defaultScheduleId: number | null;
                    weekStart: string;
                    organizationId: number | null;
                    organization: {
                        isPlatform: any;
                        id: number | null;
                    };
                };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    password: string;
                    totpCode?: string | undefined;
                };
                output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    onboarding?: boolean | undefined;
                } | undefined;
                output: {
                    connectedCalendars: ({
                        integration: import("@calcom/types/App").App & {
                            credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                            credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary?: undefined;
                        calendars?: undefined;
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import(".prisma/client").$Enums.AppCategories[];
                            extendsFeature?: "EventType" | "User" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import(".prisma/client").Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        primary: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        };
                        calendars: {
                            readOnly: boolean;
                            primary: true | null;
                            isSelected: boolean;
                            credentialId: number;
                            name?: string | undefined;
                            email?: string | undefined;
                            primaryEmail?: string | undefined;
                            integrationTitle?: string | undefined;
                            userId?: number | undefined;
                            integration?: string | undefined;
                            externalId: string;
                        }[];
                        error?: undefined;
                    } | {
                        integration: {
                            installed?: boolean | undefined;
                            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                            title?: string | undefined;
                            name: string;
                            description: string;
                            variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                            slug: string;
                            category?: string | undefined;
                            categories: import(".prisma/client").$Enums.AppCategories[];
                            extendsFeature?: "EventType" | "User" | undefined;
                            logo: string;
                            publisher: string;
                            url: string;
                            docsUrl?: string | undefined;
                            verified?: boolean | undefined;
                            trending?: boolean | undefined;
                            rating?: number | undefined;
                            reviews?: number | undefined;
                            isGlobal?: boolean | undefined;
                            simplePath?: string | undefined;
                            email: string;
                            key?: import(".prisma/client").Prisma.JsonValue | undefined;
                            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                            price?: number | undefined;
                            commission?: number | undefined;
                            licenseRequired?: boolean | undefined;
                            teamsPlanRequired?: {
                                upgradeUrl: string;
                            } | undefined;
                            appData?: import("@calcom/types/App").AppData | undefined;
                            paid?: import("@calcom/types/App").PaidAppData | undefined;
                            dirName?: string | undefined;
                            isTemplate?: boolean | undefined;
                            __template?: string | undefined;
                            dependencies?: string[] | undefined;
                            concurrentMeetings?: boolean | undefined;
                            createdAt?: string | undefined;
                            isOAuth?: boolean | undefined;
                            locationOption: {
                                label: string;
                                value: string;
                                icon?: string | undefined;
                                disabled?: boolean | undefined;
                            } | null;
                        };
                        credentialId: number;
                        error: {
                            message: string;
                        };
                        primary?: undefined;
                        calendars?: undefined;
                    })[];
                    destinationCalendar: {
                        primary?: boolean | undefined;
                        name?: string | undefined;
                        readOnly?: boolean | undefined;
                        email?: string | undefined;
                        primaryEmail: string | null;
                        credentialId: number | null;
                        integrationTitle?: string | undefined;
                        userId: number | null;
                        integration: string;
                        externalId: string;
                        id: number;
                        eventTypeId: number | null;
                    };
                };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    integration: string;
                    externalId: string;
                    eventTypeId?: number | null | undefined;
                    bookingId?: number | null | undefined;
                };
                output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    variant?: string | undefined;
                    exclude?: string[] | undefined;
                    onlyInstalled?: boolean | undefined;
                    includeTeamInstalledApps?: boolean | undefined;
                    extendsFeature?: "EventType" | undefined;
                    teamId?: number | null | undefined;
                    sortByMostPopular?: boolean | undefined;
                    categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
                    appId?: string | undefined;
                };
                output: {
                    items: {
                        dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                        userCredentialIds: number[];
                        invalidCredentialIds: number[];
                        teams: ({
                            teamId: number;
                            name: string;
                            logoUrl: string | null;
                            credentialId: number;
                            isAdmin: boolean;
                        } | null)[];
                        isInstalled: boolean | undefined;
                        isSetupAlready: boolean | undefined;
                        credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                        enabled: boolean;
                    }[];
                };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId: string;
                };
                output: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    isInstalled: number;
                };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appType: string;
                };
                output: {
                    credentials: {
                        type: string;
                        id: number;
                        userId: number | null;
                        teamId: number | null;
                        subscriptionId: string | null;
                        billingCycleStart: number | null;
                        key: import(".prisma/client").Prisma.JsonValue;
                        appId: string | null;
                        paymentStatus: string | null;
                        invalid: boolean | null;
                    }[];
                    userAdminTeams: number[];
                };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    isPremium: boolean;
                    username: string | null;
                };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    username?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    bio?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        id: number;
                        email: string;
                        isDeleted?: boolean | undefined;
                    }[] | undefined;
                };
                output: {
                    email: string | undefined;
                    avatarUrl: string | null;
                    hasEmailBeenChanged: boolean | "" | undefined;
                    sendEmailVerification: boolean;
                    username?: string | undefined;
                    name?: string | undefined;
                    bio?: string | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    hideBranding?: boolean | undefined;
                    allowDynamicBooking?: boolean | undefined;
                    allowSEOIndexing?: boolean | undefined;
                    receiveMonthlyDigestEmail?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    appTheme?: string | null | undefined;
                    completedOnboarding?: boolean | undefined;
                    locale?: string | undefined;
                    timeFormat?: number | undefined;
                    disableImpersonation?: boolean | undefined;
                    metadata?: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?: {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                        } | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?: {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                        } | undefined;
                        defaultBookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?: {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                        } | undefined;
                    } | null | undefined;
                    travelSchedules?: {
                        timeZone: string;
                        startDate: Date;
                        id?: number | undefined;
                        endDate?: Date | undefined;
                    }[] | undefined;
                    secondaryEmails?: {
                        id: number;
                        email: string;
                        isDeleted: boolean;
                    }[] | undefined;
                };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    message: string;
                };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: string[];
                };
                output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    ids: number[];
                };
                output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: string;
                    comment: string;
                };
                output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                        credentialId?: number | undefined;
                    }[];
                }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    externalId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    roomName: string;
                };
                output: {
                    data: import("zod").objectOutputType<{
                        id: import("zod").ZodString;
                        room_name: import("zod").ZodString;
                        start_ts: import("zod").ZodNumber;
                        status: import("zod").ZodString;
                        max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                        duration: import("zod").ZodNumber;
                        share_token: import("zod").ZodString;
                    }, import("zod").ZodTypeAny, "passthrough">[];
                    total_count: number;
                } | {} | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamUpgradeBanner: ({
                        team: {
                            children: {
                                name: string;
                                id: number;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }[];
                        } & {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    } & {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    orgUpgradeBanner: ({
                        team: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    } & {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    })[];
                    verifyEmailBanner: boolean;
                    calendarCredentialBanner: boolean;
                    invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
                };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    recordingId: string;
                };
                output: {
                    download_link: string;
                } | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
                output: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    email: string;
                    isVerified: boolean;
                };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includeOrg?: boolean | undefined;
                } | undefined;
                output: ({
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    readOnly: boolean;
                } | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                })[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: {
                    isBookingAlreadyAcceptedBySomeoneElse: boolean;
                    meetingUrl: string;
                };
            }>;
            outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    dateRange: {
                        startDate: Date;
                        endDate: Date;
                    };
                    offset: number;
                    toTeamUserId: number | null;
                    reasonId: number;
                    uuid?: string | null | undefined;
                    notes?: string | null | undefined;
                };
                output: {} | undefined;
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    end: Date;
                    notes: string | null;
                    start: Date;
                    reason: {
                        id: number;
                        userId: number | null;
                        reason: string;
                        emoji: string;
                    } | null;
                    uuid: string;
                    toUserId: number | null;
                    toUser: {
                        username: string | null;
                    } | null;
                }[];
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    outOfOfficeUid: string;
                };
                output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    data: {
                        id: number;
                        userId: number;
                        email: string;
                        emailVerified: Date | null;
                    };
                    message: string;
                };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    timeZone: string;
                    startDate: Date;
                    endDate: Date | null;
                }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    userId: number | null;
                    enabled: boolean;
                    reason: string;
                    emoji: string;
                }[];
            }>;
            addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    subscription: string;
                };
                output: {
                    message: string;
                };
            }>;
            removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    subscription: string;
                };
                output: {
                    message: string;
                };
            }>;
            markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingUid: string;
                    attendees?: {
                        email: string;
                        noShow: boolean;
                    }[] | undefined;
                    noShowHost?: boolean | undefined;
                };
                output: {
                    attendees: {
                        email: string;
                        noShow: boolean;
                    }[];
                    noShowHost: boolean;
                    message: string;
                };
            }>;
        }>;
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import("next-auth").Session | null;
            }>;
            i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    locale: string;
                    CalComVersion: string;
                };
                output: {
                    i18n: import("next-i18next").SSRConfig;
                    locale: string;
                };
            }>;
            countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    countryCode: string;
                };
            }>;
            submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    rating: number;
                    bookingUid: string;
                    comment?: string | undefined;
                };
                output: void;
            }>;
            markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    noShowHost: boolean;
                    bookingUid: string;
                };
                output: {
                    attendees: {
                        email: string;
                        noShow: boolean;
                    }[];
                    noShowHost: boolean;
                    message: string;
                };
            }>;
            samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                };
                output: {
                    tenant: string;
                    product: string;
                };
            }>;
            stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    stripeCustomerId?: string | undefined;
                    checkoutSessionId?: string | undefined;
                };
                output: {
                    valid: boolean;
                    hasPaymentFailed?: undefined;
                    isPremiumUsername?: undefined;
                    customer?: undefined;
                } | {
                    valid: boolean;
                    hasPaymentFailed: boolean;
                    isPremiumUsername: boolean;
                    customer: {
                        username: string;
                        email: string;
                        stripeCustomerId: string;
                    };
                };
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        startTime: string;
                        endTime: string;
                        eventTypeId?: number | undefined;
                        eventTypeSlug?: string | undefined;
                        timeZone?: string | undefined;
                        usernameList?: string[] | undefined;
                        debug?: boolean | undefined;
                        duration?: string | undefined;
                        rescheduleUid?: string | null | undefined;
                        isTeamEvent?: boolean | undefined;
                        orgSlug?: string | undefined;
                        teamMemberEmail?: string | null | undefined;
                    };
                    output: import("./slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeId: number;
                        slotUtcStartDate: string;
                        slotUtcEndDate: string;
                        bookingUid?: string | undefined;
                    };
                    output: {
                        uid: string;
                    };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        uid: string | null;
                    };
                    output: void;
                }>;
            }>;
            event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    org: string | null;
                    eventSlug: string;
                    isTeamEvent?: boolean | undefined;
                    fromRedirectOfNonOrgLink?: boolean | undefined;
                };
                output: {
                    bookingFields: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    users: ({
                        metadata: undefined;
                        bookerUrl: string;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    } | {
                        metadata: undefined;
                        bookerUrl: string;
                        profile: {
                            organization: Omit<{
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                            } & Omit<Pick<{
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                                };
                            }, "metadata"> & {
                                requestedSlug: string | null;
                                metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?: {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                    } | undefined;
                                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                                };
                            };
                            id: number;
                            organizationId: number;
                            userId: number;
                            uid: string;
                            username: string;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            upId: string;
                        };
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    })[];
                    locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    profile: {
                        image?: string | undefined;
                        name?: string | undefined;
                        username?: string | null | undefined;
                        weekStart: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: null;
                        bookerLayouts: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null;
                    };
                    entity: {
                        considerUnpublished: boolean;
                        fromRedirectOfNonOrgLink: boolean;
                        orgSlug: string | null;
                        name: string | null;
                        teamSlug: null;
                        logoUrl: null;
                    };
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                position?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                hidden?: true | undefined;
                                length?: true | undefined;
                                parent?: true | undefined;
                                description?: true | undefined;
                                children?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                userId?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                hashedLink?: true | undefined;
                                bookings?: true | undefined;
                                availability?: true | undefined;
                                webhooks?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                schedule?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    isDynamic: boolean;
                    periodCountCalendarDays: boolean;
                    periodStartDate: null;
                    periodEndDate: null;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    periodType: "UNLIMITED";
                    periodDays: null;
                    slotInterval: null;
                    offsetStart: number;
                    customInputs: {
                        label: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        placeholder: string;
                        required: boolean;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    disableGuests: boolean;
                    minimumBookingNotice: number;
                    schedule: null;
                    timeZone: null;
                    successRedirectUrl: string;
                    forwardParamsSuccessRedirect: boolean;
                    teamId: null;
                    scheduleId: null;
                    availability: never[];
                    price: number;
                    currency: string;
                    schedulingType: "COLLECTIVE";
                    seatsPerTimeSlot: null;
                    seatsShowAttendees: null;
                    seatsShowAvailabilityCount: null;
                    onlyShowFirstAvailableSlot: boolean;
                    id: number;
                    hideCalendarNotes: boolean;
                    recurringEvent: null;
                    destinationCalendar: null;
                    team: null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    bookingLimits: null;
                    durationLimits: null;
                    hidden: boolean;
                    userId: number;
                    parentId: null;
                    parent: null;
                    owner: null;
                    workflows: never[];
                    hosts: never[];
                    assignAllTeamMembers: boolean;
                    isRRWeightsEnabled: boolean;
                    rescheduleWithSameRoundRobinHost: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: null;
                    secondaryEmail: null;
                    length: number;
                    slug: string;
                    title: string;
                    eventName: string;
                    description: string;
                    descriptionAsSafeHTML: string;
                    position: number;
                } | {
                    bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    description: string;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                position?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                hidden?: true | undefined;
                                length?: true | undefined;
                                parent?: true | undefined;
                                description?: true | undefined;
                                children?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                userId?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                hashedLink?: true | undefined;
                                bookings?: true | undefined;
                                availability?: true | undefined;
                                webhooks?: true | undefined;
                                destinationCalendar?: true | undefined;
                                customInputs?: true | undefined;
                                schedule?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                secondaryEmail?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    customInputs: {
                        label: string;
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        placeholder: string;
                        required: boolean;
                        eventTypeId: number;
                        options?: {
                            label: string;
                            type: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    bookingFields: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    profile: {
                        username: string | null | undefined;
                        name: string | null;
                        weekStart: string;
                        image: string;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        theme: string | null;
                        bookerLayouts: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null;
                    };
                    users: {
                        username: string | null;
                        name: string | null;
                        weekStart: string;
                        organizationId: any;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        bookerUrl: string;
                    }[];
                    entity: {
                        logoUrl?: string | undefined;
                        name: any;
                        fromRedirectOfNonOrgLink: boolean;
                        considerUnpublished: boolean;
                        orgSlug: string | null;
                        teamSlug: string | null;
                    };
                    isDynamic: boolean;
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    aiPhoneCallConfig: {
                        id: number;
                        eventTypeId: number;
                        enabled: boolean;
                        templateType: string;
                        schedulerName: string | null;
                        generalPrompt: string | null;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string | null;
                        guestEmail: string | null;
                        guestCompany: string | null;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                    assignAllTeamMembers: boolean;
                    owner: ({
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        username: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        weekStart: string;
                        organization: {
                            id: number;
                            name: string;
                            slug: string | null;
                            calVideoLogo: string | null;
                            bannerUrl: string | null;
                        } | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }) | null;
                    hosts: {
                        user: {
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            id: number;
                            name: string | null;
                            username: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            weekStart: string;
                            organization: {
                                id: number;
                                name: string;
                                slug: string | null;
                                calVideoLogo: string | null;
                                bannerUrl: string | null;
                            } | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                    }[];
                    title: string;
                    hidden: boolean;
                    length: number;
                    id: number;
                    slug: string;
                    eventName: string | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    disableGuests: boolean;
                    seatsPerTimeSlot: number | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    rescheduleWithSameRoundRobinHost: boolean;
                    team: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        name: string;
                        parent: {
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            bannerUrl: string | null;
                        } | null;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                    } | null;
                    schedule: {
                        id: number;
                        timeZone: string | null;
                    } | null;
                    workflows: ({
                        workflow: {
                            steps: {
                                template: import(".prisma/client").$Enums.WorkflowTemplates;
                                id: number;
                                action: import(".prisma/client").$Enums.WorkflowActions;
                                stepNumber: number;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                        } & {
                            position: number;
                            time: number | null;
                            id: number;
                            name: string;
                            userId: number | null;
                            teamId: number | null;
                            isActiveOnAll: boolean;
                            trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                            timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                        };
                    } & {
                        id: number;
                        eventTypeId: number;
                        workflowId: number;
                    })[];
                    instantMeetingSchedule: {
                        id: number;
                        timeZone: string | null;
                    } | null;
                } | null;
            }>;
            ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    connectionExists: null;
                } | {
                    connectionExists: boolean;
                };
            }>;
            checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    email: string;
                    userSessionEmail?: string | undefined;
                };
                output: boolean;
            }>;
        }>;
        auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    oldPassword: string;
                    newPassword: string;
                };
                output: void;
            }>;
            verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    passwordInput: string;
                };
                output: void;
            }>;
            verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                };
                output: true;
            }>;
            sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    username?: string | undefined;
                    language?: string | undefined;
                    isVerifyingEmail?: boolean | undefined;
                };
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                } | undefined;
                output: {
                    ok: boolean;
                    skipped: boolean;
                };
            }>;
            createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: void;
            }>;
        }>;
        deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    licenseKey?: string | undefined;
                };
                output: void;
            }>;
        }>;
        bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters: {
                        status: "cancelled" | "upcoming" | "recurring" | "past" | "unconfirmed";
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        eventTypeIds?: number[] | undefined;
                    };
                    limit?: number | null | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    bookings: {
                        eventType: {
                            recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                            eventTypeColor: {
                                lightEventTypeColor: string;
                                darkEventTypeColor: string;
                            } | null;
                            price: number;
                            currency: string;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    campsite?: {} | undefined;
                                    closecom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    googlevideo?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        roundRobinLeadSkip?: boolean | undefined;
                                        skipContactCreation?: boolean | undefined;
                                    } | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    twipla?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    umami?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                        SCRIPT_URL?: string | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    all?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        length?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        profile?: true | undefined;
                                        team?: true | undefined;
                                        schedule?: true | undefined;
                                        availability?: true | undefined;
                                        hashedLink?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        userId?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        customInputs?: true | undefined;
                                        metadata?: true | undefined;
                                        timeZone?: true | undefined;
                                        slug?: true | undefined;
                                        position?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        hidden?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresConfirmationWillBlockSlot?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        price?: true | undefined;
                                        currency?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                        instantMeetingScheduleId?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        isRRWeightsEnabled?: true | undefined;
                                        eventTypeColor?: true | undefined;
                                        rescheduleWithSameRoundRobinHost?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hosts?: true | undefined;
                                        users?: true | undefined;
                                        owner?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        parent?: true | undefined;
                                        children?: true | undefined;
                                        workflows?: true | undefined;
                                        instantMeetingSchedule?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                                } | null | undefined;
                            } | null;
                            team?: {
                                name: string;
                                id: number;
                                members: {
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    role: import(".prisma/client").$Enums.MembershipRole;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } | null | undefined;
                            id?: number | undefined;
                            slug?: string | undefined;
                            eventName?: string | null | undefined;
                            seatsShowAttendees?: boolean | null | undefined;
                            seatsShowAvailabilityCount?: boolean | null | undefined;
                            schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                        };
                        startTime: string;
                        endTime: string;
                        isUserTeamAdminOrOwner: boolean;
                        status: import(".prisma/client").$Enums.BookingStatus;
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        } | null;
                        payment: {
                            currency: string;
                            success: boolean;
                            amount: number;
                            paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                        }[];
                        references: {
                            type: string;
                            id: number;
                            uid: string;
                            bookingId: number | null;
                            deleted: boolean | null;
                            credentialId: number | null;
                            thirdPartyRecurringEventId: string | null;
                            meetingId: string | null;
                            meetingPassword: string | null;
                            meetingUrl: string | null;
                            externalCalendarId: string | null;
                        }[];
                        attendees: {
                            name: string;
                            id: number;
                            email: string;
                            timeZone: string;
                            locale: string | null;
                            noShow: boolean | null;
                            bookingId: number | null;
                        }[];
                        seatsReferences: {
                            attendee: {
                                email: string;
                            };
                            referenceUid: string;
                        }[];
                        id: number;
                        uid: string;
                        userPrimaryEmail: string | null;
                        title: string;
                        description: string | null;
                        customInputs: import(".prisma/client").Prisma.JsonValue;
                        location: string | null;
                        paid: boolean;
                        rescheduled: boolean | null;
                        recurringEventId: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        isRecorded: boolean;
                    }[];
                    recurringInfo: {
                        recurringEventId: string | null;
                        count: number;
                        firstDate: Date | null;
                        bookings: {
                            [key: string]: Date[];
                        };
                    }[];
                    nextCursor: number | null;
                };
            }>;
            requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: string;
                    rescheduleReason?: string | undefined;
                };
                output: void;
            }>;
            editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    newLocation: string;
                    details?: {
                        credentialId?: number | undefined;
                    } | undefined;
                };
                output: {
                    message: string;
                };
            }>;
            addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    guests: string[];
                };
                output: {
                    message: string;
                };
            }>;
            confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    confirmed: boolean;
                    recurringEventId?: string | undefined;
                    reason?: string | undefined;
                };
                output: {
                    message: string;
                    status: "ACCEPTED" | "REJECTED";
                } | null;
            }>;
            getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    seatReferenceUid: string;
                };
                output: number;
            }>;
            find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingUid?: string | undefined;
                };
                output: {
                    booking: {
                        status: import(".prisma/client").$Enums.BookingStatus;
                        id: number;
                        uid: string;
                        eventTypeId: number | null;
                        description: string | null;
                        startTime: Date;
                        endTime: Date;
                        paid: boolean;
                    } | null;
                };
            }>;
            getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    booking: {
                        status: import(".prisma/client").$Enums.BookingStatus;
                        id: number;
                        uid: string;
                        eventTypeId: number | null;
                        description: string | null;
                        startTime: Date;
                        endTime: Date;
                        location: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                    } | null;
                };
            }>;
        }>;
        eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                } | null | undefined;
                output: {
                    allUsersAcrossAllEventTypes: Map<number, {
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    }>;
                    eventTypeGroups: {
                        eventTypes: {
                            userIds: number[];
                            safeDescription: string | undefined;
                            metadata: {
                                smartContractAddress?: string | undefined;
                                blockchainId?: number | undefined;
                                multipleDuration?: number[] | undefined;
                                giphyThankYouPage?: string | undefined;
                                apps?: {
                                    alby?: {
                                        price: number;
                                        currency: string;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                    } | undefined;
                                    basecamp3?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    campsite?: {} | undefined;
                                    closecom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    dailyvideo?: {} | undefined;
                                    fathom?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    feishucalendar?: {} | undefined;
                                    ga4?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    giphy?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        thankYouPage?: string | undefined;
                                    } | undefined;
                                    googlecalendar?: {} | undefined;
                                    googlevideo?: {} | undefined;
                                    gtm?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    hubspot?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    intercom?: {} | undefined;
                                    jelly?: {} | undefined;
                                    jitsivideo?: {} | undefined;
                                    larkcalendar?: {} | undefined;
                                    make?: {} | undefined;
                                    matomo?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        MATOMO_URL?: string | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    metapixel?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    "mock-payment-app"?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    office365calendar?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    office365video?: {
                                        client_id: string;
                                        client_secret: string;
                                    } | undefined;
                                    paypal?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    "pipedrive-crm"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    plausible?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        PLAUSIBLE_URL?: string | undefined;
                                        trackingId?: string | undefined;
                                    } | undefined;
                                    posthog?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        TRACKING_ID?: string | undefined;
                                        API_HOST?: string | undefined;
                                    } | undefined;
                                    qr_code?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "routing-forms"?: any;
                                    salesforce?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        roundRobinLeadSkip?: boolean | undefined;
                                        skipContactCreation?: boolean | undefined;
                                    } | undefined;
                                    shimmervideo?: {} | undefined;
                                    stripe?: {
                                        price: number;
                                        currency: string;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        paymentOption?: string | undefined;
                                        enabled?: boolean | undefined;
                                    } | undefined;
                                    tandemvideo?: {} | undefined;
                                    "booking-pages-tag"?: {
                                        trackingId: string;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    "event-type-app-card"?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    twipla?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                    } | undefined;
                                    umami?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                        SITE_ID?: string | undefined;
                                        SCRIPT_URL?: string | undefined;
                                    } | undefined;
                                    vital?: {} | undefined;
                                    webex?: {} | undefined;
                                    wordpress?: {
                                        isSunrise: boolean;
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zapier?: {} | undefined;
                                    "zoho-bigin"?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zohocalendar?: {} | undefined;
                                    zohocrm?: {
                                        enabled?: boolean | undefined;
                                        credentialId?: number | undefined;
                                        appCategories?: string[] | undefined;
                                    } | undefined;
                                    zoomvideo?: {} | undefined;
                                } | undefined;
                                additionalNotesRequired?: boolean | undefined;
                                disableSuccessPage?: boolean | undefined;
                                disableStandardEmails?: {
                                    all?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                    confirmation?: {
                                        host?: boolean | undefined;
                                        attendee?: boolean | undefined;
                                    } | undefined;
                                } | undefined;
                                managedEventConfig?: {
                                    unlockedFields?: {
                                        length?: true | undefined;
                                        destinationCalendar?: true | undefined;
                                        profile?: true | undefined;
                                        team?: true | undefined;
                                        schedule?: true | undefined;
                                        availability?: true | undefined;
                                        hashedLink?: true | undefined;
                                        secondaryEmail?: true | undefined;
                                        userId?: true | undefined;
                                        title?: true | undefined;
                                        description?: true | undefined;
                                        customInputs?: true | undefined;
                                        metadata?: true | undefined;
                                        timeZone?: true | undefined;
                                        slug?: true | undefined;
                                        position?: true | undefined;
                                        locations?: true | undefined;
                                        offsetStart?: true | undefined;
                                        hidden?: true | undefined;
                                        profileId?: true | undefined;
                                        teamId?: true | undefined;
                                        eventName?: true | undefined;
                                        parentId?: true | undefined;
                                        bookingFields?: true | undefined;
                                        periodType?: true | undefined;
                                        periodStartDate?: true | undefined;
                                        periodEndDate?: true | undefined;
                                        periodDays?: true | undefined;
                                        periodCountCalendarDays?: true | undefined;
                                        lockTimeZoneToggleOnBookingPage?: true | undefined;
                                        requiresConfirmation?: true | undefined;
                                        requiresConfirmationWillBlockSlot?: true | undefined;
                                        requiresBookerEmailVerification?: true | undefined;
                                        recurringEvent?: true | undefined;
                                        disableGuests?: true | undefined;
                                        hideCalendarNotes?: true | undefined;
                                        minimumBookingNotice?: true | undefined;
                                        beforeEventBuffer?: true | undefined;
                                        afterEventBuffer?: true | undefined;
                                        seatsPerTimeSlot?: true | undefined;
                                        onlyShowFirstAvailableSlot?: true | undefined;
                                        seatsShowAttendees?: true | undefined;
                                        seatsShowAvailabilityCount?: true | undefined;
                                        schedulingType?: true | undefined;
                                        scheduleId?: true | undefined;
                                        price?: true | undefined;
                                        currency?: true | undefined;
                                        slotInterval?: true | undefined;
                                        successRedirectUrl?: true | undefined;
                                        forwardParamsSuccessRedirect?: true | undefined;
                                        bookingLimits?: true | undefined;
                                        durationLimits?: true | undefined;
                                        isInstantEvent?: true | undefined;
                                        instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                        instantMeetingScheduleId?: true | undefined;
                                        assignAllTeamMembers?: true | undefined;
                                        useEventTypeDestinationCalendarEmail?: true | undefined;
                                        isRRWeightsEnabled?: true | undefined;
                                        eventTypeColor?: true | undefined;
                                        rescheduleWithSameRoundRobinHost?: true | undefined;
                                        secondaryEmailId?: true | undefined;
                                        hosts?: true | undefined;
                                        users?: true | undefined;
                                        owner?: true | undefined;
                                        bookings?: true | undefined;
                                        webhooks?: true | undefined;
                                        parent?: true | undefined;
                                        children?: true | undefined;
                                        workflows?: true | undefined;
                                        instantMeetingSchedule?: true | undefined;
                                        aiPhoneCallConfig?: true | undefined;
                                        _count?: true | undefined;
                                    } | undefined;
                                } | undefined;
                                requiresConfirmationThreshold?: {
                                    time: number;
                                    unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                                } | undefined;
                                config?: {
                                    useHostSchedulesForTeamEvent?: boolean | undefined;
                                } | undefined;
                                bookerLayouts?: {
                                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                                } | null | undefined;
                            } | null;
                            children: {
                                users: ({
                                    name: string | null;
                                    id: number;
                                    username: string | null;
                                    avatarUrl: string | null;
                                } & {
                                    nonProfileUsername: string | null;
                                    profile: import("@calcom/types/UserProfile").UserProfile;
                                })[];
                                length: number;
                                id: number;
                                userId: number | null;
                                title: string;
                                description: string | null;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string | null;
                                slug: string;
                                position: number;
                                locations: import(".prisma/client").Prisma.JsonValue;
                                offsetStart: number;
                                hidden: boolean;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import(".prisma/client").Prisma.JsonValue;
                                periodType: import(".prisma/client").$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresConfirmationWillBlockSlot: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                price: number;
                                currency: string;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                                durationLimits: import(".prisma/client").Prisma.JsonValue;
                                isInstantEvent: boolean;
                                instantMeetingExpiryTimeOffsetInSeconds: number;
                                instantMeetingScheduleId: number | null;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                isRRWeightsEnabled: boolean;
                                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                                rescheduleWithSameRoundRobinHost: boolean;
                                secondaryEmailId: number | null;
                            }[];
                            length: number;
                            hashedLink: {
                                id: number;
                                eventTypeId: number;
                                link: string;
                            } | null;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                            hosts: ({
                                user: {
                                    name: string | null;
                                    id: number;
                                    username: string | null;
                                    avatarUrl: string | null;
                                };
                            } & {
                                userId: number;
                                eventTypeId: number;
                                isFixed: boolean;
                                priority: number | null;
                                weight: number | null;
                                weightAdjustment: number | null;
                            })[];
                            aiPhoneCallConfig: {
                                id: number;
                                eventTypeId: number;
                                enabled: boolean;
                                templateType: string;
                                schedulerName: string | null;
                                generalPrompt: string | null;
                                yourPhoneNumber: string;
                                numberToCall: string;
                                guestName: string | null;
                                guestEmail: string | null;
                                guestCompany: string | null;
                                beginMessage: string | null;
                                llmId: string | null;
                            } | null;
                        }[];
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                        bookerUrl: string;
                        membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        };
                        metadata: {
                            membershipCount: number;
                            readOnly: boolean;
                        };
                    }[];
                    profiles: {
                        teamId: number | null | undefined;
                        membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        membershipCount: number;
                        readOnly: boolean;
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    }[];
                };
            }>;
            getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                } | null | undefined;
                output: {
                    eventTypeGroups: {
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                        bookerUrl: string;
                        membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image: string;
                            eventTypesLockedByOrg?: boolean | undefined;
                        };
                        metadata: {
                            membershipCount: number;
                            readOnly: boolean;
                        };
                    }[];
                    profiles: {
                        teamId: number | null | undefined;
                        membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                        membershipCount: number;
                        readOnly: boolean;
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    }[];
                };
            }>;
            getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    group: {
                        teamId?: number | null | undefined;
                        parentId?: number | null | undefined;
                    };
                    filters?: {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    } | undefined;
                    forRoutingForms?: boolean | undefined;
                    cursor?: number | null | undefined;
                    limit?: number | undefined;
                };
                output: {
                    eventTypes: {
                        safeDescription: string | undefined;
                        users: ({
                            name: string | null;
                            id: number;
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        children: {
                            users: ({
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            })[];
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        }[];
                        length: number;
                        hashedLink: {
                            id: number;
                            eventTypeId: number;
                            link: string;
                        } | null;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                        hosts: ({
                            user: {
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            };
                        } & {
                            userId: number;
                            eventTypeId: number;
                            isFixed: boolean;
                            priority: number | null;
                            weight: number | null;
                            weightAdjustment: number | null;
                        })[];
                        aiPhoneCallConfig: {
                            id: number;
                            eventTypeId: number;
                            enabled: boolean;
                            templateType: string;
                            schedulerName: string | null;
                            generalPrompt: string | null;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string | null;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    }[];
                    nextCursor: number | undefined;
                };
            }>;
            getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                    isOrg?: boolean | undefined;
                } | null | undefined;
                output: {
                    eventTypeOptions: {
                        value: string;
                        label: string;
                    }[];
                    teamOptions: {
                        value: string;
                        label: string;
                    }[];
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    length: number;
                    id: number;
                    title: string;
                    description: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string;
                    hidden: boolean;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                }[];
            }>;
            listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    team: {
                        name: string;
                        id: number;
                    } | null;
                    id: number;
                    title: string;
                    slug: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    length: number;
                    title: string;
                    slug: string;
                    description?: string | null | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    hidden?: boolean | undefined;
                    teamId?: number | null | undefined;
                    disableGuests?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    scheduleId?: number | undefined;
                    slotInterval?: number | null | undefined;
                };
                output: {
                    eventType: {
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    eventType: {
                        schedule: number | null;
                        instantMeetingSchedule: number | null;
                        scheduleName: string | null;
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                        eventTypeColor: {
                            lightEventTypeColor: string;
                            darkEventTypeColor: string;
                        } | null;
                        locations: import("@calcom/app-store/locations").LocationObject[];
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        };
                        customInputs: {
                            type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                            id: number;
                            eventTypeId: number;
                            label: string;
                            required: boolean;
                            placeholder: string;
                            options?: {
                                type: string;
                                label: string;
                            }[] | null | undefined;
                            hasToBeCreated?: boolean | undefined;
                        }[];
                        users: {
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        }[];
                        bookerUrl: string;
                        children: {
                            owner: {
                                avatar: string;
                                email: string;
                                name: string;
                                username: string;
                                membership: import(".prisma/client").$Enums.MembershipRole;
                                id: number;
                                avatarUrl: string | null;
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            };
                            created: boolean;
                            slug: string;
                            hidden: boolean;
                        }[];
                        length: number;
                        destinationCalendar: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            credentialId: number | null;
                            integration: string;
                            externalId: string;
                            primaryEmail: string | null;
                        } | null;
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            parentId: number | null;
                            parent: {
                                organizationSettings: {
                                    lockEventTypeCreationForUsers: boolean;
                                } | null;
                                slug: string | null;
                            } | null;
                            members: {
                                user: {
                                    name: string | null;
                                    id: number;
                                    email: string;
                                    locale: string | null;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                    username: string | null;
                                    avatarUrl: string | null;
                                    defaultScheduleId: number | null;
                                };
                                role: import(".prisma/client").$Enums.MembershipRole;
                                accepted: boolean;
                            }[];
                        } | null;
                        hashedLink: {
                            id: number;
                            eventTypeId: number;
                            link: string;
                        } | null;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        timeZone: string | null;
                        slug: string;
                        offsetStart: number;
                        hidden: boolean;
                        teamId: number | null;
                        eventName: string | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                        hosts: {
                            userId: number;
                            isFixed: boolean;
                            priority: number | null;
                            weight: number | null;
                            weightAdjustment: number | null;
                        }[];
                        owner: {
                            id: number;
                        } | null;
                        webhooks: {
                            id: string;
                            eventTypeId: number | null;
                            secret: string | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            active: boolean;
                            eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                        }[];
                        parent: {
                            id: number;
                            teamId: number | null;
                        } | null;
                        workflows: ({
                            workflow: {
                                team: {
                                    name: string;
                                    id: number;
                                    slug: string | null;
                                    members: {
                                        id: number;
                                        userId: number;
                                        teamId: number;
                                        role: import(".prisma/client").$Enums.MembershipRole;
                                        disableImpersonation: boolean;
                                        accepted: boolean;
                                    }[];
                                } | null;
                                name: string;
                                id: number;
                                userId: number | null;
                                teamId: number | null;
                                steps: {
                                    id: number;
                                    template: import(".prisma/client").$Enums.WorkflowTemplates;
                                    stepNumber: number;
                                    action: import(".prisma/client").$Enums.WorkflowActions;
                                    workflowId: number;
                                    sendTo: string | null;
                                    reminderBody: string | null;
                                    emailSubject: string | null;
                                    numberRequired: boolean | null;
                                    sender: string | null;
                                    numberVerificationPending: boolean;
                                    includeCalendarEvent: boolean;
                                }[];
                                time: number | null;
                                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                                activeOn: {
                                    eventType: {
                                        id: number;
                                        title: string;
                                        parentId: number | null;
                                        _count: {
                                            children: number;
                                        };
                                    };
                                }[];
                            };
                        } & {
                            id: number;
                            eventTypeId: number;
                            workflowId: number;
                        })[];
                        aiPhoneCallConfig: {
                            id: number;
                            eventTypeId: number;
                            enabled: boolean;
                            templateType: string;
                            schedulerName: string | null;
                            generalPrompt: string | null;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string | null;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    } & {
                        users: ({
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        } & {
                            avatar: string;
                        })[];
                        periodStartDate: string | null;
                        periodEndDate: string | null;
                        bookingFields: {
                            type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                            name: string;
                            label?: string | undefined;
                            options?: {
                                label: string;
                                value: string;
                            }[] | undefined;
                            maxLength?: number | undefined;
                            defaultLabel?: string | undefined;
                            defaultPlaceholder?: string | undefined;
                            labelAsSafeHtml?: string | undefined;
                            placeholder?: string | undefined;
                            required?: boolean | undefined;
                            getOptionsAt?: string | undefined;
                            optionsInputs?: Record<string, {
                                type: "text" | "phone" | "address";
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                            }> | undefined;
                            minLength?: number | undefined;
                            variant?: string | undefined;
                            variantsConfig?: {
                                variants: Record<string, {
                                    fields: {
                                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                        name: string;
                                        label?: string | undefined;
                                        maxLength?: number | undefined;
                                        labelAsSafeHtml?: string | undefined;
                                        placeholder?: string | undefined;
                                        required?: boolean | undefined;
                                        minLength?: number | undefined;
                                    }[];
                                }>;
                            } | undefined;
                            views?: {
                                label: string;
                                id: string;
                                description?: string | undefined;
                            }[] | undefined;
                            hideWhenJustOneOption?: boolean | undefined;
                            hidden?: boolean | undefined;
                            editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                            sources?: {
                                label: string;
                                type: string;
                                id: string;
                                editUrl?: string | undefined;
                                fieldRequired?: boolean | undefined;
                            }[] | undefined;
                            disableOnPrefill?: boolean | undefined;
                        }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    };
                    locationOptions: {
                        label: string;
                        options: {
                            label: string;
                            value: string;
                            disabled?: boolean | undefined;
                            icon?: string | undefined;
                            slug?: string | undefined;
                            credentialId?: number | undefined;
                        }[];
                    }[];
                    destinationCalendar: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        credentialId: number | null;
                        integration: string;
                        externalId: string;
                        primaryEmail: string | null;
                    } | null;
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        parentId: number | null;
                        parent: {
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                            slug: string | null;
                        } | null;
                        members: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                                username: string | null;
                                avatarUrl: string | null;
                                defaultScheduleId: number | null;
                            };
                            role: import(".prisma/client").$Enums.MembershipRole;
                            accepted: boolean;
                        }[];
                    } | null;
                    teamMembers: {
                        profileId: number | null;
                        eventTypes: string[];
                        membership: import(".prisma/client").$Enums.MembershipRole;
                        name: string | null;
                        id: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        avatar: string;
                    }[];
                    currentUserMembership: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            eventTypes: {
                                slug: string;
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        };
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    } | null;
                    isUserOrganizationAdmin: boolean;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: (number[] & (string | number)[]) | undefined;
                    length?: number | undefined;
                    destinationCalendar?: {
                        integration: string;
                        externalId: string;
                    } | null | undefined;
                    schedule?: number | null | undefined;
                    hashedLink?: string | undefined;
                    userId?: number | null | undefined;
                    title?: string | undefined;
                    description?: string | null | undefined;
                    customInputs?: {
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        label: string;
                        required: boolean;
                        placeholder: string;
                        options?: {
                            type: string;
                            label: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[] | undefined;
                    metadata?: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null | undefined;
                    timeZone?: string | null | undefined;
                    slug?: string | undefined;
                    position?: number | undefined;
                    locations?: {
                        type: string;
                        address?: string | undefined;
                        link?: string | undefined;
                        displayLocationPublicly?: boolean | undefined;
                        hostPhoneNumber?: string | undefined;
                        credentialId?: number | undefined;
                        teamName?: string | undefined;
                    }[] | undefined;
                    offsetStart?: number | undefined;
                    hidden?: boolean | undefined;
                    profileId?: number | null | undefined;
                    teamId?: number | null | undefined;
                    eventName?: string | null | undefined;
                    parentId?: number | null | undefined;
                    bookingFields?: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] | undefined;
                    periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                    periodStartDate?: Date | null | undefined;
                    periodEndDate?: Date | null | undefined;
                    periodDays?: number | null | undefined;
                    periodCountCalendarDays?: boolean | null | undefined;
                    lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                    requiresConfirmation?: boolean | undefined;
                    requiresConfirmationWillBlockSlot?: boolean | undefined;
                    requiresBookerEmailVerification?: boolean | undefined;
                    recurringEvent?: {
                        count: number;
                        interval: number;
                        freq: import("@calcom/prisma/zod-utils").Frequency;
                        dtstart?: Date | undefined;
                        until?: Date | undefined;
                        tzid?: string | undefined;
                    } | null | undefined;
                    disableGuests?: boolean | undefined;
                    hideCalendarNotes?: boolean | undefined;
                    minimumBookingNotice?: number | undefined;
                    beforeEventBuffer?: number | undefined;
                    afterEventBuffer?: number | undefined;
                    seatsPerTimeSlot?: number | null | undefined;
                    onlyShowFirstAvailableSlot?: boolean | undefined;
                    seatsShowAttendees?: boolean | null | undefined;
                    seatsShowAvailabilityCount?: boolean | null | undefined;
                    schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                    scheduleId?: number | null | undefined;
                    price?: number | undefined;
                    currency?: string | undefined;
                    slotInterval?: number | null | undefined;
                    successRedirectUrl?: string | null | undefined;
                    forwardParamsSuccessRedirect?: boolean | null | undefined;
                    bookingLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    durationLimits?: {
                        PER_DAY?: number | undefined;
                        PER_WEEK?: number | undefined;
                        PER_MONTH?: number | undefined;
                        PER_YEAR?: number | undefined;
                    } | null | undefined;
                    isInstantEvent?: boolean | undefined;
                    instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
                    instantMeetingScheduleId?: number | null | undefined;
                    assignAllTeamMembers?: boolean | undefined;
                    useEventTypeDestinationCalendarEmail?: boolean | undefined;
                    isRRWeightsEnabled?: boolean | undefined;
                    eventTypeColor?: {
                        lightEventTypeColor: string;
                        darkEventTypeColor: string;
                    } | null | undefined;
                    rescheduleWithSameRoundRobinHost?: boolean | undefined;
                    secondaryEmailId?: number | null | undefined;
                    hosts?: {
                        userId: number;
                        profileId?: number | null | undefined;
                        isFixed?: boolean | undefined;
                        priority?: number | null | undefined;
                        weight?: number | null | undefined;
                    }[] | undefined;
                    children?: {
                        hidden: boolean;
                        owner: {
                            name: string;
                            id: number;
                            email: string;
                            eventTypeSlugs: string[];
                        };
                    }[] | undefined;
                    instantMeetingSchedule?: number | null | undefined;
                    aiPhoneCallConfig?: {
                        enabled: boolean;
                        templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                        generalPrompt: string;
                        beginMessage: string | null;
                        yourPhoneNumber?: string | undefined;
                        numberToCall?: string | undefined;
                        guestName?: string | null | undefined;
                        guestEmail?: string | null | undefined;
                        guestCompany?: string | null | undefined;
                    } | undefined;
                    calAiPhoneScript?: string | undefined;
                };
                output: {
                    eventType: {
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            parentId: number | null;
                            parent: {
                                slug: string | null;
                            } | null;
                            members: {
                                user: {
                                    name: string | null;
                                    id: number;
                                    email: string;
                                    eventTypes: {
                                        slug: string;
                                    }[];
                                };
                                role: import(".prisma/client").$Enums.MembershipRole;
                                accepted: boolean;
                            }[];
                        } | null;
                        title: string;
                        isRRWeightsEnabled: boolean;
                        children: {
                            userId: number | null;
                        }[];
                        workflows: {
                            workflowId: number;
                        }[];
                        aiPhoneCallConfig: {
                            enabled: boolean;
                            generalPrompt: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                };
                output: {
                    id: number;
                };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    users?: number[] | undefined;
                    length: number;
                    title: string;
                    description: string;
                    slug: string;
                    teamId?: number | null | undefined;
                };
                output: {
                    eventType: {
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    };
                };
            }>;
            bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    eventTypes: {
                        logo: string | undefined;
                        id: number;
                        title: string;
                        locations: import(".prisma/client").Prisma.JsonValue;
                    }[];
                };
            }>;
            bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
        }>;
        availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    schedules: {
                        isDefault: boolean;
                        availability: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        name: string;
                        id: number;
                        timeZone: string | null;
                    }[];
                };
            }>;
            user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    username: string;
                    dateFrom: string;
                    dateTo: string;
                    eventTypeId?: string | number | undefined;
                    withSource?: boolean | undefined;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    limit: number;
                    loggedInUsersTz: string;
                    cursor?: number | null | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    rows: ({
                        id: number;
                        organizationId: number | null;
                        name: string | null;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                        avatarUrl?: undefined;
                        profile?: undefined;
                    } | {
                        id: number;
                        username: string | null;
                        email: string;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        name: string | null;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        defaultScheduleId: number;
                        dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    })[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        scheduleId?: number | undefined;
                        isManagedEventType?: boolean | undefined;
                    };
                    output: {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        schedule?: {
                            end: Date;
                            start: Date;
                        }[][] | undefined;
                        eventTypeId?: number | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: void;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                        timeZone?: string | undefined;
                        name?: string | undefined;
                        isDefault?: boolean | undefined;
                        schedule?: {
                            end: Date;
                            start: Date;
                        }[][] | undefined;
                        dateOverrides?: {
                            end: Date;
                            start: Date;
                        }[] | undefined;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                        };
                        isDefault: boolean;
                        availability?: undefined;
                        timeZone?: undefined;
                        prevDefaultId?: undefined;
                        currentDefaultId?: undefined;
                    } | {
                        schedule: {
                            eventType: {
                                id: number;
                                eventName: string | null;
                            }[];
                            availability: {
                                id: number;
                                userId: number | null;
                                eventTypeId: number | null;
                                startTime: Date;
                                endTime: Date;
                                scheduleId: number | null;
                                days: number[];
                                date: Date | null;
                            }[];
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                        availability: import("@calcom/types/schedule").Schedule;
                        timeZone: string;
                        isDefault: boolean;
                        prevDefaultId: number | null;
                        currentDefaultId: number | null;
                    };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        scheduleId: number;
                    };
                    output: {
                        schedule: {
                            name: string;
                            id: number;
                            userId: number;
                            timeZone: string | null;
                        };
                    };
                }>;
                getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        userId?: number | undefined;
                    };
                    output: {
                        hasDefaultSchedule: boolean;
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    } | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                        hasDefaultSchedule: boolean;
                    };
                }>;
                getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: {
                        eventSlug: string;
                    };
                    output: {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        availability: {
                            end: Date;
                            userId?: number | null | undefined;
                            start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                            ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                    } | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                    };
                }>;
                bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        eventTypeIds: number[];
                    };
                    output: import("@prisma/client/runtime/library").GetBatchResult;
                }>;
            }>;
            calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    dateFrom: string | null;
                    dateTo: string | null;
                    loggedInUsersTz: string;
                    calendarsToLoad: {
                        credentialId: number;
                        externalId: string;
                    }[];
                };
                output: import("@calcom/types/Calendar").EventBusyDate[];
            }>;
        }>;
        teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    members: {
                        username: string | null;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        organization: any;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        subteams: (string | null)[] | null;
                        bookerUrl: string;
                        connectedApps: {
                            name: any;
                            logo: any;
                            app: {
                                slug: string;
                                categories: import(".prisma/client").$Enums.AppCategories[];
                            } | null;
                            externalId: string | null;
                        }[] | null;
                        name: string | null;
                        id: number;
                        email: string;
                        bio: string | null;
                        teams: {
                            team: {
                                id: number;
                                slug: string | null;
                            };
                        }[];
                        avatarUrl: string | null;
                        nonProfileUsername: string | null;
                    }[];
                    safeBio: string;
                    membership: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                    inviteToken: {
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    };
                    eventTypes: {
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        users: ({
                            name: string | null;
                            id: number;
                            email: string;
                            bio: string | null;
                            credentials: {
                                app: {
                                    slug: string;
                                    categories: import(".prisma/client").$Enums.AppCategories[];
                                } | null;
                                destinationCalendars: {
                                    externalId: string;
                                }[];
                            }[];
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        length: number;
                        id: number;
                        title: string;
                        description: string | null;
                        slug: string;
                        hidden: boolean;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        price: number;
                        currency: string;
                        hosts: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                bio: string | null;
                                credentials: {
                                    app: {
                                        slug: string;
                                        categories: import(".prisma/client").$Enums.AppCategories[];
                                    } | null;
                                    destinationCalendars: {
                                        externalId: string;
                                    }[];
                                }[];
                                teams: {
                                    team: {
                                        id: number;
                                        slug: string | null;
                                    };
                                }[];
                                username: string | null;
                                avatarUrl: string | null;
                            };
                        }[];
                    }[] | null;
                    logo?: string | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        isOrganization: boolean;
                    } | null;
                    children: {
                        name: string;
                        slug: string | null;
                    }[];
                    logoUrl: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    isOrganization: boolean;
                };
            }>;
            getMinimal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    isOrg?: boolean | undefined;
                };
                output: {
                    membership: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                    inviteToken: {
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    };
                    logo?: string | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        isOrganization: boolean;
                    } | null;
                    children: {
                        name: string;
                        slug: string | null;
                    }[];
                    logoUrl: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    isOrganization: boolean;
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    includeOrgs?: boolean | undefined;
                } | undefined;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    inviteToken: {
                        id: number;
                        createdAt: Date;
                        updatedAt: Date;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    } | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    inviteToken: {
                        id: number;
                        createdAt: Date;
                        updatedAt: Date;
                        teamId: number | null;
                        secondaryEmailId: number | null;
                        token: string;
                        identifier: string;
                        expires: Date;
                        expiresInDays: number | null;
                    } | undefined;
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    } | null;
                    logoUrl: string | null;
                    isOrganization: boolean;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    logo?: string | null | undefined;
                };
                output: {
                    url: string;
                    message: string;
                    team: null;
                } | {
                    url: string;
                    message: string;
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    bio?: string | undefined;
                    name?: string | undefined;
                    logo?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    isPrivate?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                };
                output: {
                    logoUrl: string | null;
                    name: string;
                    bio: string | null;
                    slug: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                } | undefined;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamIds: number[];
                    memberIds: number[];
                    isOrg?: boolean | undefined;
                };
                output: void;
            }>;
            inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    language: string;
                    usernameOrEmail: (string | (string | {
                        email: string;
                        role: "ADMIN" | "MEMBER" | "OWNER";
                    })[]) & (string | (string | {
                        email: string;
                        role: "ADMIN" | "MEMBER" | "OWNER";
                    })[] | undefined);
                    role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
                };
                output: {
                    usernameOrEmail: string | string[];
                    numUsersInvited: number;
                };
            }>;
            acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    accept: boolean;
                };
                output: void;
            }>;
            changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    memberId: number;
                };
                output: void;
            }>;
            getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    dateFrom: string;
                    dateTo: string;
                    memberId: number;
                    timezone: string;
                };
                output: {
                    busy: import("@calcom/types/Calendar").EventBusyDetails[];
                    timeZone: string;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    dateOverrides: import("@calcom/types/schedule").TimeRange[];
                    currentSeats: {
                        uid: string;
                        startTime: Date;
                        _count: {
                            attendees: number;
                        };
                    }[] | null;
                    datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
                };
            }>;
            getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    memberId: number;
                };
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                } | null;
            }>;
            updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    disableImpersonation: boolean;
                    memberId: number;
                };
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                };
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    url: string;
                    message: string;
                };
            }>;
            getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        children: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }[];
                    } & {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIds?: number[] | undefined;
                };
                output: ({
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                } & {
                    accepted: boolean;
                } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
            }>;
            lazyLoadMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    limit?: number | undefined;
                    searchTerm?: string | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    members: {
                        username: string | null;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        organizationId: number | null;
                        organization: any;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        bookerUrl: string;
                        name: string | null;
                        id: number;
                        email: string;
                        bio: string | null;
                        avatarUrl: string | null;
                        nonProfileUsername: string | null;
                    }[];
                    nextCursor: number | undefined;
                };
            }>;
            getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    userIds: number[];
                };
                output: Record<number, {
                    name: string | null;
                    logo: string | null;
                    externalId: string | null;
                    app: {
                        slug: string;
                        categories: import("@calcom/prisma/enums").AppCategories[];
                    } | null;
                }[]>;
            }>;
            hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    hasTeamPlan: boolean;
                };
            }>;
            listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    token?: string | undefined;
                };
                output: {
                    token: string;
                    inviteLink: string;
                };
            }>;
            setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                    expiresInDays?: number | undefined;
                };
                output: void;
            }>;
            deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: void;
            }>;
            inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    token: string;
                };
                output: string;
            }>;
            hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    memberId: number;
                };
                output: boolean;
            }>;
            resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    teamId: number;
                    language: string;
                    isOrg?: boolean | undefined;
                };
                output: {
                    email: string;
                    teamId: number;
                    language: string;
                    isOrg: boolean;
                };
            }>;
            roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                    teamId: number;
                };
                output: void;
            }>;
            checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    value: string;
                    teamId: number;
                };
                output: boolean;
            }>;
        }>;
        timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    CalComVersion: string;
                };
                output: {
                    city: string;
                    timezone: string;
                    pop: number;
                }[];
            }>;
        }>;
        organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    slug: string;
                    orgOwnerEmail: string;
                    language?: string | undefined;
                    seats?: number | undefined;
                    pricePerSeat?: number | undefined;
                    isPlatform?: boolean | undefined;
                    billingPeriod?: import("./organizations/create.schema").BillingPeriod | undefined;
                };
                output: {
                    userId: number;
                    email: string;
                    organizationId: number;
                    upId: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name?: string | undefined;
                    orgId?: string | number | undefined;
                    bio?: string | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    banner?: string | null | undefined;
                    slug?: string | undefined;
                    hideBranding?: boolean | undefined;
                    hideBookATeamMember?: boolean | undefined;
                    brandColor?: string | undefined;
                    darkBrandColor?: string | undefined;
                    theme?: string | null | undefined;
                    timeZone?: string | undefined;
                    weekStart?: string | undefined;
                    timeFormat?: number | undefined;
                    metadata?: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | undefined;
                    lockEventTypeCreation?: boolean | undefined;
                    lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                    adminGetsNoSlotsNotification?: boolean | undefined;
                };
                output: {
                    update: boolean;
                    userId: number;
                    data: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                };
            }>;
            verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                };
                output: true;
            }>;
            createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                    teamNames: string[];
                    moveTeams: {
                        id: number;
                        newSlug: string | null;
                        shouldMove: boolean;
                    }[];
                };
                output: {
                    duplicatedSlugs: string[];
                };
            }>;
            listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    name: string;
                    id: number;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    canAdminImpersonate: boolean;
                    organizationSettings: {
                        lockEventTypeCreationForUsers: boolean | undefined;
                        adminGetsNoSlotsNotification: boolean | undefined;
                    };
                    user: {
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    };
                };
            }>;
            checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    url: string;
                    message: string;
                };
            }>;
            setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    newPassword: string;
                };
                output: {
                    update: boolean;
                };
            }>;
            getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamIdToExclude?: number | undefined;
                    accepted?: boolean | undefined;
                    distinctUser?: boolean | undefined;
                };
                output: {
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        completedOnboarding: boolean;
                    };
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | undefined;
                };
                output: {
                    canUserGetMembers: boolean;
                    rows: never[];
                    meta: {
                        totalRowCount: number;
                    };
                    nextCursor?: undefined;
                } | {
                    rows: {
                        id: number;
                        username: string | null;
                        email: string;
                        timeZone: string;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                        disableImpersonation: boolean;
                        completedOnboarding: boolean;
                        avatarUrl: string | null;
                        teams: ({
                            id: number;
                            name: string;
                            slug: string | null;
                        } | undefined)[];
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                    canUserGetMembers?: undefined;
                };
            }>;
            getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    slug: string;
                    fullDomain: string;
                    domainSuffix: string;
                    name: string;
                    logoUrl: string | null;
                    isPlatform: boolean;
                } | null;
            }>;
            getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId?: number | undefined;
                };
                output: {
                    teams: {
                        accepted: boolean;
                        name: string;
                        id: number;
                    }[];
                    role: import(".prisma/client").$Enums.MembershipRole;
                    name: string | null;
                    id: number;
                    email: string;
                    timeZone: string;
                    bio: string | null;
                    schedules: {
                        name: string;
                        id: number;
                    }[];
                    username: string | null;
                    avatarUrl: string | null;
                };
            }>;
            updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    timeZone: string;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                    username?: string | undefined;
                    bio?: string | undefined;
                    name?: string | undefined;
                    email?: string | undefined;
                    avatar?: string | undefined;
                    attributeOptions?: {
                        userId: number;
                        attributes: {
                            id: string;
                            options?: {
                                value: string;
                                label?: string | undefined;
                            }[] | undefined;
                            value?: string | undefined;
                        }[];
                    } | undefined;
                };
                output: {
                    success: boolean;
                };
            }>;
            getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    id: number;
                }[];
            }>;
            addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    teamIds: number[];
                };
                output: {
                    success: boolean;
                    invitedTotalUsers: number;
                };
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    teamIds: number[];
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userIds: number[];
                };
                output: {
                    success: boolean;
                    usersDeleted: number;
                };
            }>;
            listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                    limit: number;
                    query?: string | undefined;
                    offset?: number | undefined;
                    cursor?: number | null | undefined;
                };
                output: {
                    rows: {
                        bookerUrl: string;
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                    nextCursor: number | null | undefined;
                };
            }>;
            getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number;
                };
                output: {
                    safeBio: string;
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    parent: {
                        id: number;
                        slug: string | null;
                    } | null;
                    logoUrl: string | null;
                    bio: string | null;
                    isPrivate: boolean;
                };
            }>;
            listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                }[];
            }>;
            deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                };
                output: void;
            }>;
            adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    organizationSettings: {
                        id: number;
                        organizationId: number;
                        isOrganizationConfigured: boolean;
                        isOrganizationVerified: boolean;
                        orgAutoAcceptEmail: string;
                        lockEventTypeCreationForUsers: boolean;
                        adminGetsNoSlotsNotification: boolean;
                        isAdminReviewed: boolean;
                        isAdminAPIEnabled: boolean;
                    } | null;
                    name: string;
                    id: number;
                    slug: string | null;
                    members: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        };
                    }[];
                }[];
            }>;
            adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    organizationSettings: {
                        isOrganizationConfigured: boolean;
                        isOrganizationVerified: boolean;
                        orgAutoAcceptEmail: string;
                    } | null;
                    name: string;
                    id: number;
                    slug: string | null;
                    isOrganization: boolean;
                    members: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                        };
                    }[];
                };
            }>;
            adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    organizationSettings?: {
                        isOrganizationVerified?: boolean | undefined;
                        isOrganizationConfigured?: boolean | undefined;
                        isAdminReviewed?: boolean | undefined;
                        orgAutoAcceptEmail?: string | undefined;
                        isAdminAPIEnabled?: boolean | undefined;
                    } | undefined;
                };
                output: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            }>;
            adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    orgId: number;
                };
                output: {
                    ok: boolean;
                    message: string;
                };
            }>;
            createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                    yourPhoneNumber: string;
                    numberToCall: string;
                    calApiKey: string;
                    enabled?: boolean | undefined;
                    schedulerName?: string | null | undefined;
                    guestName?: string | undefined;
                    guestEmail?: string | undefined;
                    guestCompany?: string | undefined;
                    beginMessage?: string | undefined;
                    generalPrompt?: string | undefined;
                };
                output: import("zod").objectOutputType<{
                    call_id: import("zod").ZodString;
                    agent_id: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">;
            }>;
        }>;
        webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    appId?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
                } | undefined;
                output: {
                    id: string;
                    userId: number | null;
                    eventTypeId: number | null;
                    createdAt: Date;
                    teamId: number | null;
                    secret: string | null;
                    appId: string | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                }[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    webhookId?: string | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    secret: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[];
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                    platform?: boolean | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    teamId: number | null;
                    eventTypeId: number | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    createdAt: Date;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    appId: string | null;
                    secret: string | null;
                    platform: boolean;
                };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    payloadTemplate: string | null;
                    subscriberUrl?: string | undefined;
                    eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
                    active?: boolean | undefined;
                    appId?: string | null | undefined;
                    secret?: string | null | undefined;
                };
                output: {
                    id: string;
                    userId: number | null;
                    eventTypeId: number | null;
                    createdAt: Date;
                    teamId: number | null;
                    secret: string | null;
                    appId: string | null;
                    platformOAuthClientId: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    platform: boolean;
                } | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
            testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    type: string;
                    url: string;
                    secret?: string | undefined;
                    payloadTemplate?: string | null | undefined;
                };
                output: {
                    message?: string | undefined;
                    ok: boolean;
                    status: number;
                };
            }>;
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                } | undefined;
                output: {
                    webhookGroups: {
                        teamId?: number | null | undefined;
                        profile: {
                            slug: string | null;
                            name: string | null;
                            image?: string | undefined;
                        };
                        metadata?: {
                            readOnly: boolean;
                        } | undefined;
                        webhooks: {
                            id: string;
                            userId: number | null;
                            teamId: number | null;
                            eventTypeId: number | null;
                            platformOAuthClientId: string | null;
                            subscriberUrl: string;
                            payloadTemplate: string | null;
                            createdAt: Date;
                            active: boolean;
                            eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                            appId: string | null;
                            secret: string | null;
                            platform: boolean;
                        }[];
                    }[];
                    profiles: {
                        readOnly?: boolean | undefined;
                        slug: string | null;
                        name: string | null;
                        image?: string | undefined;
                        teamId: number | null | undefined;
                    }[];
                };
            }>;
        }>;
        apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    appId?: string | undefined;
                    teamId?: number | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    note?: string | null | undefined;
                    expiresAt?: Date | null | undefined;
                    neverExpires?: boolean | undefined;
                    appId?: string | null | undefined;
                    teamId?: number | undefined;
                };
                output: string;
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    note?: string | null | undefined;
                    expiresAt?: Date | undefined;
                };
                output: {
                    id: string;
                    userId: number;
                    createdAt: Date;
                    teamId: number | null;
                    appId: string | null;
                    note: string | null;
                    expiresAt: Date | null;
                    lastUsedAt: Date | null;
                    hashedKey: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    eventTypeId?: number | undefined;
                };
                output: {
                    id: string;
                };
            }>;
        }>;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | undefined;
                    teamMemberEmail?: string | null | undefined;
                };
                output: import("./slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                };
                output: {
                    uid: string;
                };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    uid: string | null;
                };
                output: void;
            }>;
        }>;
        workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                    userId?: number | undefined;
                } | undefined;
                output: {
                    workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: number;
                };
                output: {
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } | null;
                    name: string;
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        stepNumber: number;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                    }[];
                    time: number | null;
                    isActiveOnAll: boolean;
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    activeOn: {
                        eventType: {
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        };
                    }[];
                    activeOnTeams: {
                        team: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    }[];
                } | null;
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    workflow: {
                        id: number;
                        position: number;
                        name: string;
                        userId: number | null;
                        teamId: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        time: number | null;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: number;
                };
                output: {
                    id: number;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    id: number;
                    steps: {
                        id: number;
                        template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                        stepNumber: number;
                        action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        includeCalendarEvent: boolean;
                        senderName: string | null;
                    }[];
                    time: number | null;
                    trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                    timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                    activeOn: number[];
                    isActiveOnAll?: boolean | undefined;
                };
                output: {
                    workflow: ({
                        team: {
                            name: string;
                            id: number;
                            slug: string | null;
                            isOrganization: boolean;
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } | null;
                        steps: {
                            id: number;
                            template: import(".prisma/client").$Enums.WorkflowTemplates;
                            stepNumber: number;
                            action: import(".prisma/client").$Enums.WorkflowActions;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                        activeOn: {
                            eventType: {
                                length: number;
                                id: number;
                                userId: number | null;
                                title: string;
                                description: string | null;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string | null;
                                slug: string;
                                position: number;
                                locations: import(".prisma/client").Prisma.JsonValue;
                                offsetStart: number;
                                hidden: boolean;
                                profileId: number | null;
                                teamId: number | null;
                                eventName: string | null;
                                parentId: number | null;
                                bookingFields: import(".prisma/client").Prisma.JsonValue;
                                periodType: import(".prisma/client").$Enums.PeriodType;
                                periodStartDate: Date | null;
                                periodEndDate: Date | null;
                                periodDays: number | null;
                                periodCountCalendarDays: boolean | null;
                                lockTimeZoneToggleOnBookingPage: boolean;
                                requiresConfirmation: boolean;
                                requiresConfirmationWillBlockSlot: boolean;
                                requiresBookerEmailVerification: boolean;
                                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                                disableGuests: boolean;
                                hideCalendarNotes: boolean;
                                minimumBookingNotice: number;
                                beforeEventBuffer: number;
                                afterEventBuffer: number;
                                seatsPerTimeSlot: number | null;
                                onlyShowFirstAvailableSlot: boolean;
                                seatsShowAttendees: boolean | null;
                                seatsShowAvailabilityCount: boolean | null;
                                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                                scheduleId: number | null;
                                price: number;
                                currency: string;
                                slotInterval: number | null;
                                successRedirectUrl: string | null;
                                forwardParamsSuccessRedirect: boolean | null;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                                durationLimits: import(".prisma/client").Prisma.JsonValue;
                                isInstantEvent: boolean;
                                instantMeetingExpiryTimeOffsetInSeconds: number;
                                instantMeetingScheduleId: number | null;
                                assignAllTeamMembers: boolean;
                                useEventTypeDestinationCalendarEmail: boolean;
                                isRRWeightsEnabled: boolean;
                                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                                rescheduleWithSameRoundRobinHost: boolean;
                                secondaryEmailId: number | null;
                            };
                        }[];
                        activeOnTeams: {
                            team: {
                                name: string;
                                id: number;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            };
                        }[];
                    } & {
                        name: string;
                        id: number;
                        userId: number | null;
                        position: number;
                        teamId: number | null;
                        time: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    }) | null;
                };
            }>;
            activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    workflowId: number;
                };
                output: void;
            }>;
            sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    phoneNumber: string;
                };
                output: void;
            }>;
            verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    phoneNumber: string;
                    teamId?: number | undefined;
                };
                output: boolean;
            }>;
            getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: {
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    phoneNumber: string;
                }[];
            }>;
            getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | undefined;
                };
                output: string[];
            }>;
            verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    code: string;
                    email: string;
                    teamId?: number | undefined;
                };
                output: true;
            }>;
            getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    label: string;
                    value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                    needsTeamsUpgrade: boolean;
                }[];
            }>;
            filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                    totalCount: number;
                } | undefined;
            }>;
            getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    eventType: {
                        id: number;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        teamId?: number | null | undefined;
                        parent?: {
                            id: number | null;
                            teamId: number | null;
                        } | null | undefined;
                        userId?: number | null | undefined;
                    };
                };
                output: import("@calcom/ee/workflows/lib/types").Workflow[];
            }>;
        }>;
        saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                };
                output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                    encodedRawMetadata: string;
                };
                output: import("@boxyhq/saml-jackson").SAMLSSORecord;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                };
                output: void;
            }>;
            updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number | null;
                    clientId: string;
                    clientSecret: string;
                    wellKnownUrl: string;
                };
                output: import("@boxyhq/saml-jackson").OIDCSSORecord;
            }>;
        }>;
        dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    organizationId: number | null;
                    provider: string;
                };
                output: import("@boxyhq/saml-jackson").Directory;
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    organizationId: number | null;
                };
                output: import("@boxyhq/saml-jackson").Directory | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    organizationId: number | null;
                    directoryId: string;
                };
                output: null;
            }>;
            teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T = unknown>(string: string) => T;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                    input: void;
                    output: {
                        teamGroupMapping: {
                            id: number;
                            name: string;
                            slug: string | null;
                            directoryId: string;
                            groupNames: string[];
                        }[];
                    };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        name: string;
                        teamId: number;
                        directoryId: string;
                    };
                    output: {
                        newGroupName: string;
                    };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        teamId: number;
                        groupName: string;
                    };
                    output: {
                        deletedGroupName: string;
                    };
                }>;
            }>;
        }>;
        insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_2 = unknown>(string: string) => T_2;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_1, O_1 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_1, O_1>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    empty: boolean;
                    created: {
                        count: number;
                        deltaPrevious: number;
                    };
                    completed: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rescheduled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    cancelled: {
                        count: number;
                        deltaPrevious: number;
                    };
                    rating: {
                        count: number;
                        deltaPrevious: number;
                    };
                    no_show: {
                        count: number;
                        deltaPrevious: number;
                    };
                    csat: {
                        count: number;
                        deltaPrevious: number;
                    };
                    previousRange: {
                        startDate: string;
                        endDate: string;
                    };
                };
            }>;
            eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    timeView: "day" | "month" | "year" | "week";
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    memberUserId?: number | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Month: string;
                    Created: number;
                    Completed: number;
                    Rescheduled: number;
                    Cancelled: number;
                    "No-Show (Host)": number;
                }[];
            }>;
            popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: ({
                    eventTypeId?: undefined;
                    eventTypeName?: undefined;
                    count?: undefined;
                } | {
                    eventTypeId: number | null;
                    eventTypeName: string;
                    count: number;
                })[];
            }>;
            averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    memberUserId?: number | undefined;
                    teamId?: number | null | undefined;
                    userId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    Date: string;
                    Average: number;
                }[];
            }>;
            membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
            }>;
            userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId: number | null;
                    isAll: boolean | null;
                };
                output: {
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }[];
            }>;
            eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    title: string;
                    id: number;
                    slug: string;
                    teamId: number | null;
                    team: {
                        name: string;
                    } | null;
                }[];
            }>;
            recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    rating: number | null;
                    feedback: string | null;
                }[];
            }>;
            membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    count: number;
                }[];
            }>;
            membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    eventTypeId?: number | undefined;
                    isAll?: boolean | undefined;
                };
                output: {
                    userId: number | null;
                    user: Omit<{
                        id: number;
                        name: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    }, "avatarUrl"> & {
                        avatarUrl: string;
                    };
                    emailMd5: string;
                    averageRating: number | null;
                }[];
            }>;
            rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startDate: string;
                    endDate: string;
                    teamId?: number | null | undefined;
                    userId?: number | null | undefined;
                    memberUserId?: number | null | undefined;
                    isAll?: boolean | undefined;
                    eventTypeId?: number | null | undefined;
                };
                output: {
                    data: string;
                    filename: string;
                };
            }>;
        }>;
        payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    bookingId: number;
                };
                output: {
                    id: number;
                    uid: string;
                    appId: string | null;
                    bookingId: number;
                    amount: number;
                    fee: number;
                    currency: string;
                    success: boolean;
                    refunded: boolean;
                    data: import(".prisma/client").Prisma.JsonValue;
                    externalId: string;
                    paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                };
            }>;
        }>;
        appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_3 = unknown>(string: string) => T_3;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_2 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_2;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_2, O_2 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_2, O_2>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../../createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                    stringify: (object: any) => string;
                    parse: <T_4 = unknown>(string: string) => T_4;
                    serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                    deserialize: <T_1_3 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_3;
                    registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                    registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                    registerCustom: <I_3, O_3 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_3, O_3>, "name">, name: string) => void;
                    allowErrorProps: (...props: string[]) => void;
                };
            }>, {
                response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                    input: {
                        formFillerId: string;
                        formId: string;
                        response: Record<string, {
                            value: (string | number | string[]) & (string | number | string[] | undefined);
                            label: string;
                        }>;
                    };
                    output: {
                        id: number;
                        createdAt: Date;
                        formFillerId: string;
                        formId: string;
                        response: import(".prisma/client").Prisma.JsonValue;
                    };
                }>;
            }>;
            forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    filters?: {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                    } | undefined;
                } | null | undefined;
                output: {
                    filtered: {
                        form: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                            team: ({
                                members: {
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    role: import(".prisma/client").$Enums.MembershipRole;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } & {
                                id: number;
                                name: string;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                theme: string | null;
                                createdAt: Date;
                                timeZone: string;
                                slug: string | null;
                                parentId: number | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                timeFormat: number | null;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                            }) | null;
                            _count: {
                                responses: number;
                            };
                        } & {
                            id: string;
                            name: string;
                            description: string | null;
                            routes: import(".prisma/client").Prisma.JsonValue;
                            fields: import(".prisma/client").Prisma.JsonValue;
                            position: number;
                            disabled: boolean;
                            userId: number;
                            createdAt: Date;
                            updatedAt: Date;
                            teamId: number | null;
                            settings: import(".prisma/client").Prisma.JsonValue;
                        }>;
                        readOnly: boolean;
                    }[];
                    totalCount: number;
                };
            }>;
            formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: string;
                };
                output: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                    team: {
                        name: string;
                        slug: string | null;
                    } | null;
                    _count: {
                        responses: number;
                    };
                } & {
                    id: string;
                    name: string;
                    description: string | null;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    position: number;
                    disabled: boolean;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                }> | null;
            }>;
            formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                    name: string;
                    description?: string | null | undefined;
                    disabled?: boolean | undefined;
                    fields?: ({
                        type: string;
                        label: string;
                        id: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                        options?: {
                            label: string;
                            id: string | null;
                        }[] | undefined;
                    } | {
                        type: string;
                        label: string;
                        id: string;
                        routerId: string;
                        options?: {
                            label: string;
                            id: string | null;
                        }[] | undefined;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                    })[] | undefined;
                    routes?: ({
                        id: string;
                        queryValue: {
                            type: "group" | "switch_group";
                            id?: string | undefined;
                            children1?: any;
                            properties?: any;
                        };
                        action: {
                            type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                            value: string;
                        };
                        isFallback?: boolean | undefined;
                    } | {
                        id: string;
                        isRouter: true;
                    })[] | null | undefined;
                    addFallback?: boolean | undefined;
                    duplicateFrom?: string | null | undefined;
                    teamId?: number | null | undefined;
                    shouldConnect?: boolean | undefined;
                    settings?: {
                        emailOwnerOnSubmission: boolean;
                        sendUpdatesTo?: number[] | undefined;
                        sendToAll?: boolean | undefined;
                    } | null | undefined;
                };
                output: {
                    id: string;
                    name: string;
                    description: string | null;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    position: number;
                    disabled: boolean;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                };
            }>;
            deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    formId: string;
                    jsonLogicQuery: {
                        logic: Record<string, any> | null;
                    };
                    cursor?: number | null | undefined;
                };
                output: {
                    headers: string[];
                    responses: string[][];
                    nextCursor: number | null;
                };
            }>;
        }>;
        appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_5 = unknown>(string: string) => T_5;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_4 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_4;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_4, O_4 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_4, O_4>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: any;
            }>;
            projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    projectId: string;
                };
                output: any;
            }>;
        }>;
        features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_6 = unknown>(string: string) => T_6;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_5 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_5;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_5, O_5 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_5, O_5>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    type: import(".prisma/client").$Enums.FeatureType | null;
                    description: string | null;
                    slug: string;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    enabled: boolean;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                }[];
            }>;
            map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: Partial<import("@calcom/features/flags/config").AppFlags>;
            }>;
        }>;
        appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    category: string;
                };
                output: ({
                    name: string;
                    slug: string;
                    logo: string;
                    title: string | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    description: string;
                    keys: import(".prisma/client").Prisma.JsonObject | null;
                    dirName: string;
                    enabled: boolean;
                    isTemplate: boolean | undefined;
                } | {
                    name: string;
                    slug: string;
                    logo: string;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title: string | undefined;
                    description: string;
                    enabled: boolean;
                    dirName: string;
                    keys: Record<string, string> | null;
                    isTemplate?: undefined;
                })[];
            }>;
            toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                    enabled: boolean;
                };
                output: boolean;
            }>;
            saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    type: string;
                    slug: string;
                    dirName: string;
                    keys?: unknown;
                    fromEnabled?: boolean | undefined;
                };
                output: void;
            }>;
            checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: boolean;
            }>;
            setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                };
                output: void;
            }>;
            updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    key: {} & {
                        [k: string]: unknown;
                    };
                    credentialId: number;
                };
                output: boolean;
            }>;
            queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: string[] | undefined;
                output: {
                    name: string;
                    slug: string;
                    installed: boolean;
                }[] | undefined;
            }>;
            checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    slug: string;
                };
                output: boolean;
            }>;
        }>;
        users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_7 = unknown>(string: string) => T_7;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_6 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_6;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_6, O_6 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_6, O_6>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    organizationId: number | null;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                }[];
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    email: string;
                    timeZone: string;
                    weekStart: string;
                    identityProvider: "CAL" | "GOOGLE" | "SAML";
                    role: "USER" | "ADMIN";
                    theme?: string | null | undefined;
                    name?: string | null | undefined;
                    username?: string | null | undefined;
                    locale?: string | null | undefined;
                    bio?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    avatarUrl?: string | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                    message: string;
                };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    theme?: string | null | undefined;
                    name?: string | null | undefined;
                    email?: string | undefined;
                    timeZone?: string | undefined;
                    username?: string | null | undefined;
                    locale?: string | null | undefined;
                    bio?: string | null | undefined;
                    timeFormat?: number | null | undefined;
                    weekStart?: string | undefined;
                    avatarUrl?: string | null | undefined;
                    defaultScheduleId?: number | null | undefined;
                    identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
                    allowDynamicBooking?: boolean | null | undefined;
                    role?: "USER" | "ADMIN" | undefined;
                };
                output: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        email: string;
                        organizationId: number | null;
                        timeZone: string;
                        username: string | null;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        bio: string | null;
                        hideBranding: boolean;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        emailVerified: Date | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        appTheme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        defaultScheduleId: number | null;
                        completedOnboarding: boolean;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        disableImpersonation: boolean;
                        locked: boolean;
                        movedToProfileId: number | null;
                        isPlatformManaged: boolean;
                    };
                    message: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    message: string;
                };
            }>;
        }>;
        oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    clientId: string;
                };
                output: {
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                } | null;
            }>;
            addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    logo: string;
                    redirectUri: string;
                };
                output: {
                    clientSecret: string;
                    name: string;
                    logo: string | null;
                    clientId: string;
                    redirectUri: string;
                };
            }>;
            generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    clientId: string;
                    scopes: string[];
                    teamSlug?: string | undefined;
                };
                output: {
                    client: {
                        name: string;
                        clientId: string;
                        redirectUri: string;
                    };
                    authorizationCode: string;
                };
            }>;
        }>;
        googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    id: number | undefined;
                };
            }>;
            getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: string[];
            }>;
            removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: void;
                output: {
                    deleted: number;
                };
            }>;
        }>;
        admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    limit: number;
                    cursor?: number | null | undefined;
                    searchTerm?: string | null | undefined;
                };
                output: {
                    rows: {
                        name: string | null;
                        id: number;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        role: import(".prisma/client").$Enums.UserPermissionRole;
                        locked: boolean;
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                        totalRowCount: number;
                    };
                };
            }>;
            sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                };
            }>;
            lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    locked: boolean;
                };
                output: {
                    success: boolean;
                    userId: number;
                    locked: boolean;
                };
            }>;
            toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    slug: string;
                    enabled: boolean;
                };
                output: {
                    type: import(".prisma/client").$Enums.FeatureType | null;
                    description: string | null;
                    createdAt: Date | null;
                    updatedAt: Date | null;
                    slug: string;
                    enabled: boolean;
                    lastUsedAt: Date | null;
                    stale: boolean | null;
                    updatedBy: number | null;
                };
            }>;
            removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    success: boolean;
                    userId: number;
                };
            }>;
            getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    users: {
                        locked: {
                            name: string | null;
                            id: number;
                            email: string;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            username: string | null;
                            avatarUrl: string | null;
                        }[];
                        reviewNeeded: {
                            name: string | null;
                            id: number;
                            email: string;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            username: string | null;
                            avatarUrl: string | null;
                        }[];
                    };
                    teams: {
                        locked: {
                            name: string;
                            id: number;
                            slug: string | null;
                            logoUrl: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        }[];
                        reviewNeeded: {
                            name: string;
                            id: number;
                            slug: string | null;
                            logoUrl: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        }[];
                    };
                };
            }>;
            setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId?: number | undefined;
                    username?: string | undefined;
                    teamId?: number | undefined;
                    teamSlug?: string | undefined;
                    lock?: boolean | undefined;
                };
                output: {
                    name: string | null;
                    locked: boolean | undefined;
                };
            }>;
            createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    billingPeriod: "MONTHLY" | "ANNUALLY";
                    billingType: "PER_BOOKING" | "PER_USER";
                    entityCount: number;
                    entityPrice: number;
                    overages: number;
                    billingEmail: string;
                };
                output: {
                    stripeCheckoutUrl: string;
                };
            }>;
        }>;
        attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: ({
                    options: {
                        value: string;
                        id: string;
                        slug: string;
                        attributeId: string;
                    }[];
                } & {
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    teamId: number;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                })[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    id: string;
                };
                output: {
                    options: {
                        value: string;
                        id?: string | undefined;
                        assignedUsers?: number | undefined;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                    id: string;
                };
            }>;
            getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId: number;
                };
                output: {
                    id: string;
                    name: string;
                    type: import("@calcom/prisma/enums").AttributeType;
                    options: {
                        id: string;
                        slug: string;
                        value: string;
                    }[];
                }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    options: {
                        value: string;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                };
                output: {
                    id: string;
                    teamId: number;
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    slug: string;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                    createdAt: Date;
                    updatedAt: Date;
                };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    options: {
                        value: string;
                        id?: string | undefined;
                    }[];
                    type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                    name: string;
                    attributeId: string;
                };
                output: {
                    id: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    id: string;
                };
                output: {
                    type: import(".prisma/client").$Enums.AttributeType;
                    name: string;
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    teamId: number;
                    enabled: boolean;
                    usersCanEditRelation: boolean;
                };
            }>;
            toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    attributeId: string;
                };
                output: {
                    enabled: boolean;
                    id: string;
                };
            }>;
            assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    userId: number;
                    attributes: {
                        id: string;
                        options?: {
                            value: string;
                            label?: string | undefined;
                        }[] | undefined;
                        value?: string | undefined;
                    }[];
                };
                output: {
                    success: boolean;
                    message: string;
                };
            }>;
        }>;
    } & {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includePasswordAdded?: boolean | undefined;
            } | undefined;
            output: {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: null;
                organization: {
                    id: number;
                    isPlatform: boolean;
                    slug: string;
                    isOrgAdmin: boolean;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                profiles: never[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            } | {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: number | null;
                organization: {
                    id: number | null;
                    isOrgAdmin: boolean;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    requestedSlug: string | null;
                    organizationSettings?: {
                        lockEventTypeCreationForUsers: boolean;
                    } | null | undefined;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    isPrivate?: boolean | undefined;
                    bannerUrl?: string | null | undefined;
                    isPlatform?: boolean | undefined;
                    members?: {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[] | undefined;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    user: {
                        name: string | null;
                        id: number;
                        startTime: number;
                        endTime: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        defaultScheduleId: number | null;
                        isPlatformManaged: boolean;
                    };
                    organization: {
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null;
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } & Omit<Pick<{
                        id: number;
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        parentId: number | null;
                        timeFormat: number | null;
                        timeZone: string;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                        requestedSlug: string | null;
                        metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        };
                    };
                    movedFromUser: {
                        id: number;
                    } | null;
                    id: number;
                    uid: string;
                    userId: number;
                    createdAt: Date & string;
                    updatedAt: Date & string;
                    organizationId: number;
                    username: string;
                    upId: string;
                };
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            };
        }>;
        platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                username: string | null;
                email: string;
                timeFormat: number | null;
                timeZone: string;
                defaultScheduleId: number | null;
                weekStart: string;
                organizationId: number | null;
                organization: {
                    isPlatform: any;
                    id: number | null;
                };
            };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                password: string;
                totpCode?: string | undefined;
            };
            output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                onboarding?: boolean | undefined;
            } | undefined;
            output: {
                connectedCalendars: ({
                    integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary?: undefined;
                    calendars?: undefined;
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    };
                    calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    }[];
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    error: {
                        message: string;
                    };
                    primary?: undefined;
                    calendars?: undefined;
                })[];
                destinationCalendar: {
                    primary?: boolean | undefined;
                    name?: string | undefined;
                    readOnly?: boolean | undefined;
                    email?: string | undefined;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    integrationTitle?: string | undefined;
                    userId: number | null;
                    integration: string;
                    externalId: string;
                    id: number;
                    eventTypeId: number | null;
                };
            };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                integration: string;
                externalId: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
            };
            output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
                appId?: string | undefined;
            };
            output: {
                items: {
                    dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                    userCredentialIds: number[];
                    invalidCredentialIds: number[];
                    teams: ({
                        teamId: number;
                        name: string;
                        logoUrl: string | null;
                        credentialId: number;
                        isAdmin: boolean;
                    } | null)[];
                    isInstalled: boolean | undefined;
                    isSetupAlready: boolean | undefined;
                    credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    enabled: boolean;
                }[];
            };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appId: string;
            };
            output: {
                installed?: boolean | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title?: string | undefined;
                name: string;
                description: string;
                variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                slug: string;
                category?: string | undefined;
                categories: import(".prisma/client").$Enums.AppCategories[];
                extendsFeature?: "EventType" | "User" | undefined;
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string | undefined;
                verified?: boolean | undefined;
                trending?: boolean | undefined;
                rating?: number | undefined;
                reviews?: number | undefined;
                isGlobal?: boolean | undefined;
                simplePath?: string | undefined;
                email: string;
                key?: import(".prisma/client").Prisma.JsonValue | undefined;
                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                price?: number | undefined;
                commission?: number | undefined;
                licenseRequired?: boolean | undefined;
                teamsPlanRequired?: {
                    upgradeUrl: string;
                } | undefined;
                appData?: import("@calcom/types/App").AppData | undefined;
                paid?: import("@calcom/types/App").PaidAppData | undefined;
                dirName?: string | undefined;
                isTemplate?: boolean | undefined;
                __template?: string | undefined;
                dependencies?: string[] | undefined;
                concurrentMeetings?: boolean | undefined;
                createdAt?: string | undefined;
                isOAuth?: boolean | undefined;
                locationOption: {
                    label: string;
                    value: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                } | null;
                isInstalled: number;
            };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appType: string;
            };
            output: {
                credentials: {
                    type: string;
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    subscriptionId: string | null;
                    billingCycleStart: number | null;
                    key: import(".prisma/client").Prisma.JsonValue;
                    appId: string | null;
                    paymentStatus: string | null;
                    invalid: boolean | null;
                }[];
                userAdminTeams: number[];
            };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                isPremium: boolean;
                username: string | null;
            };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted?: boolean | undefined;
                }[] | undefined;
            };
            output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted: boolean;
                }[] | undefined;
            };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                message: string;
            };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: string[];
            };
            output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                rating: string;
                comment: string;
            };
            output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                label: string;
                options: {
                    label: string;
                    value: string;
                    disabled?: boolean | undefined;
                    icon?: string | undefined;
                    slug?: string | undefined;
                    credentialId?: number | undefined;
                }[];
            }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
            };
            output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                roomName: string;
            };
            output: {
                data: import("zod").objectOutputType<{
                    id: import("zod").ZodString;
                    room_name: import("zod").ZodString;
                    start_ts: import("zod").ZodNumber;
                    status: import("zod").ZodString;
                    max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                    duration: import("zod").ZodNumber;
                    share_token: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">[];
                total_count: number;
            } | {} | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                teamUpgradeBanner: ({
                    team: {
                        children: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }[];
                    } & {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
            };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                recordingId: string;
            };
            output: {
                download_link: string;
            } | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            } | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                email: string;
                isVerified: boolean;
            };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includeOrg?: boolean | undefined;
            } | undefined;
            output: ({
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import(".prisma/client").$Enums.MembershipRole;
                readOnly: boolean;
            } | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
            })[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
            };
        }>;
        outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                dateRange: {
                    startDate: Date;
                    endDate: Date;
                };
                offset: number;
                toTeamUserId: number | null;
                reasonId: number;
                uuid?: string | null | undefined;
                notes?: string | null | undefined;
            };
            output: {} | undefined;
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                end: Date;
                notes: string | null;
                start: Date;
                reason: {
                    id: number;
                    userId: number | null;
                    reason: string;
                    emoji: string;
                } | null;
                uuid: string;
                toUserId: number | null;
                toUser: {
                    username: string | null;
                } | null;
            }[];
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                outOfOfficeUid: string;
            };
            output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            };
            output: {
                data: {
                    id: number;
                    userId: number;
                    email: string;
                    emailVerified: Date | null;
                };
                message: string;
            };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                timeZone: string;
                startDate: Date;
                endDate: Date | null;
            }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                userId: number | null;
                enabled: boolean;
                reason: string;
                emoji: string;
            }[];
        }>;
        addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingUid: string;
                attendees?: {
                    email: string;
                    noShow: boolean;
                }[] | undefined;
                noShowHost?: boolean | undefined;
            };
            output: {
                attendees: {
                    email: string;
                    noShow: boolean;
                }[];
                noShowHost: boolean;
                message: string;
            };
        }>;
    };
}> & {
    loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includePasswordAdded?: boolean | undefined;
            } | undefined;
            output: {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: null;
                organization: {
                    id: number;
                    isPlatform: boolean;
                    slug: string;
                    isOrgAdmin: boolean;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                profiles: never[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            } | {
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                }[];
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                isPremium: boolean | undefined;
                sumOfTeamEventTypes: number;
                organizationId: number | null;
                organization: {
                    id: number | null;
                    isOrgAdmin: boolean;
                    metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    requestedSlug: string | null;
                    organizationSettings?: {
                        lockEventTypeCreationForUsers: boolean;
                    } | null | undefined;
                    name?: string | undefined;
                    slug?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    calVideoLogo?: string | null | undefined;
                    isPrivate?: boolean | undefined;
                    bannerUrl?: string | null | undefined;
                    isPlatform?: boolean | undefined;
                    members?: {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[] | undefined;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    user: {
                        name: string | null;
                        id: number;
                        startTime: number;
                        endTime: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        defaultScheduleId: number | null;
                        isPlatformManaged: boolean;
                    };
                    organization: {
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null;
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } & Omit<Pick<{
                        id: number;
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        parentId: number | null;
                        timeFormat: number | null;
                        timeZone: string;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                        requestedSlug: string | null;
                        metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?: {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                            } | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        };
                    };
                    movedFromUser: {
                        id: number;
                    } | null;
                    id: number;
                    uid: string;
                    userId: number;
                    createdAt: Date & string;
                    updatedAt: Date & string;
                    organizationId: number;
                    username: string;
                    upId: string;
                };
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
            };
        }>;
        platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                username: string | null;
                email: string;
                timeFormat: number | null;
                timeZone: string;
                defaultScheduleId: number | null;
                weekStart: string;
                organizationId: number | null;
                organization: {
                    isPlatform: any;
                    id: number | null;
                };
            };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                password: string;
                totpCode?: string | undefined;
            };
            output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                onboarding?: boolean | undefined;
            } | undefined;
            output: {
                connectedCalendars: ({
                    integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary?: undefined;
                    calendars?: undefined;
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    };
                    calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        name?: string | undefined;
                        email?: string | undefined;
                        primaryEmail?: string | undefined;
                        integrationTitle?: string | undefined;
                        userId?: number | undefined;
                        integration?: string | undefined;
                        externalId: string;
                    }[];
                    error?: undefined;
                } | {
                    integration: {
                        installed?: boolean | undefined;
                        type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                        title?: string | undefined;
                        name: string;
                        description: string;
                        variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                        slug: string;
                        category?: string | undefined;
                        categories: import(".prisma/client").$Enums.AppCategories[];
                        extendsFeature?: "EventType" | "User" | undefined;
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string | undefined;
                        verified?: boolean | undefined;
                        trending?: boolean | undefined;
                        rating?: number | undefined;
                        reviews?: number | undefined;
                        isGlobal?: boolean | undefined;
                        simplePath?: string | undefined;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue | undefined;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                        price?: number | undefined;
                        commission?: number | undefined;
                        licenseRequired?: boolean | undefined;
                        teamsPlanRequired?: {
                            upgradeUrl: string;
                        } | undefined;
                        appData?: import("@calcom/types/App").AppData | undefined;
                        paid?: import("@calcom/types/App").PaidAppData | undefined;
                        dirName?: string | undefined;
                        isTemplate?: boolean | undefined;
                        __template?: string | undefined;
                        dependencies?: string[] | undefined;
                        concurrentMeetings?: boolean | undefined;
                        createdAt?: string | undefined;
                        isOAuth?: boolean | undefined;
                        locationOption: {
                            label: string;
                            value: string;
                            icon?: string | undefined;
                            disabled?: boolean | undefined;
                        } | null;
                    };
                    credentialId: number;
                    error: {
                        message: string;
                    };
                    primary?: undefined;
                    calendars?: undefined;
                })[];
                destinationCalendar: {
                    primary?: boolean | undefined;
                    name?: string | undefined;
                    readOnly?: boolean | undefined;
                    email?: string | undefined;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    integrationTitle?: string | undefined;
                    userId: number | null;
                    integration: string;
                    externalId: string;
                    id: number;
                    eventTypeId: number | null;
                };
            };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                integration: string;
                externalId: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
            };
            output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
                appId?: string | undefined;
            };
            output: {
                items: {
                    dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                    userCredentialIds: number[];
                    invalidCredentialIds: number[];
                    teams: ({
                        teamId: number;
                        name: string;
                        logoUrl: string | null;
                        credentialId: number;
                        isAdmin: boolean;
                    } | null)[];
                    isInstalled: boolean | undefined;
                    isSetupAlready: boolean | undefined;
                    credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                    enabled: boolean;
                }[];
            };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appId: string;
            };
            output: {
                installed?: boolean | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title?: string | undefined;
                name: string;
                description: string;
                variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                slug: string;
                category?: string | undefined;
                categories: import(".prisma/client").$Enums.AppCategories[];
                extendsFeature?: "EventType" | "User" | undefined;
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string | undefined;
                verified?: boolean | undefined;
                trending?: boolean | undefined;
                rating?: number | undefined;
                reviews?: number | undefined;
                isGlobal?: boolean | undefined;
                simplePath?: string | undefined;
                email: string;
                key?: import(".prisma/client").Prisma.JsonValue | undefined;
                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                price?: number | undefined;
                commission?: number | undefined;
                licenseRequired?: boolean | undefined;
                teamsPlanRequired?: {
                    upgradeUrl: string;
                } | undefined;
                appData?: import("@calcom/types/App").AppData | undefined;
                paid?: import("@calcom/types/App").PaidAppData | undefined;
                dirName?: string | undefined;
                isTemplate?: boolean | undefined;
                __template?: string | undefined;
                dependencies?: string[] | undefined;
                concurrentMeetings?: boolean | undefined;
                createdAt?: string | undefined;
                isOAuth?: boolean | undefined;
                locationOption: {
                    label: string;
                    value: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                } | null;
                isInstalled: number;
            };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appType: string;
            };
            output: {
                credentials: {
                    type: string;
                    id: number;
                    userId: number | null;
                    teamId: number | null;
                    subscriptionId: string | null;
                    billingCycleStart: number | null;
                    key: import(".prisma/client").Prisma.JsonValue;
                    appId: string | null;
                    paymentStatus: string | null;
                    invalid: boolean | null;
                }[];
                userAdminTeams: number[];
            };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                isPremium: boolean;
                username: string | null;
            };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted?: boolean | undefined;
                }[] | undefined;
            };
            output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?: {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?: {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                    } | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?: {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                    } | undefined;
                    defaultBookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?: {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                    } | undefined;
                } | null | undefined;
                travelSchedules?: {
                    timeZone: string;
                    startDate: Date;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                }[] | undefined;
                secondaryEmails?: {
                    id: number;
                    email: string;
                    isDeleted: boolean;
                }[] | undefined;
            };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                message: string;
            };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: string[];
            };
            output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                ids: number[];
            };
            output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                rating: string;
                comment: string;
            };
            output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                label: string;
                options: {
                    label: string;
                    value: string;
                    disabled?: boolean | undefined;
                    icon?: string | undefined;
                    slug?: string | undefined;
                    credentialId?: number | undefined;
                }[];
            }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
            };
            output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                roomName: string;
            };
            output: {
                data: import("zod").objectOutputType<{
                    id: import("zod").ZodString;
                    room_name: import("zod").ZodString;
                    start_ts: import("zod").ZodNumber;
                    status: import("zod").ZodString;
                    max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                    duration: import("zod").ZodNumber;
                    share_token: import("zod").ZodString;
                }, import("zod").ZodTypeAny, "passthrough">[];
                total_count: number;
            } | {} | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                teamUpgradeBanner: ({
                    team: {
                        children: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }[];
                    } & {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                } & {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
            };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                recordingId: string;
            };
            output: {
                download_link: string;
            } | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            } | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
            output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
            };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                email: string;
                isVerified: boolean;
            };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includeOrg?: boolean | undefined;
            } | undefined;
            output: ({
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import(".prisma/client").$Enums.MembershipRole;
                readOnly: boolean;
            } | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
            })[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
            };
        }>;
        outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                dateRange: {
                    startDate: Date;
                    endDate: Date;
                };
                offset: number;
                toTeamUserId: number | null;
                reasonId: number;
                uuid?: string | null | undefined;
                notes?: string | null | undefined;
            };
            output: {} | undefined;
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                end: Date;
                notes: string | null;
                start: Date;
                reason: {
                    id: number;
                    userId: number | null;
                    reason: string;
                    emoji: string;
                } | null;
                uuid: string;
                toUserId: number | null;
                toUser: {
                    username: string | null;
                } | null;
            }[];
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                outOfOfficeUid: string;
            };
            output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            };
            output: {
                data: {
                    id: number;
                    userId: number;
                    email: string;
                    emailVerified: Date | null;
                };
                message: string;
            };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                timeZone: string;
                startDate: Date;
                endDate: Date | null;
            }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                userId: number | null;
                enabled: boolean;
                reason: string;
                emoji: string;
            }[];
        }>;
        addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                subscription: string;
            };
            output: {
                message: string;
            };
        }>;
        markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingUid: string;
                attendees?: {
                    email: string;
                    noShow: boolean;
                }[] | undefined;
                noShowHost?: boolean | undefined;
            };
            output: {
                attendees: {
                    email: string;
                    noShow: boolean;
                }[];
                noShowHost: boolean;
                message: string;
            };
        }>;
    }>;
    public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: import("next-auth").Session | null;
        }>;
        i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                locale: string;
                CalComVersion: string;
            };
            output: {
                i18n: import("next-i18next").SSRConfig;
                locale: string;
            };
        }>;
        countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                countryCode: string;
            };
        }>;
        submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                rating: number;
                bookingUid: string;
                comment?: string | undefined;
            };
            output: void;
        }>;
        markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                noShowHost: boolean;
                bookingUid: string;
            };
            output: {
                attendees: {
                    email: string;
                    noShow: boolean;
                }[];
                noShowHost: boolean;
                message: string;
            };
        }>;
        samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            };
            output: {
                tenant: string;
                product: string;
            };
        }>;
        stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                stripeCustomerId?: string | undefined;
                checkoutSessionId?: string | undefined;
            };
            output: {
                valid: boolean;
                hasPaymentFailed?: undefined;
                isPremiumUsername?: undefined;
                customer?: undefined;
            } | {
                valid: boolean;
                hasPaymentFailed: boolean;
                isPremiumUsername: boolean;
                customer: {
                    username: string;
                    email: string;
                    stripeCustomerId: string;
                };
            };
        }>;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | undefined;
                    teamMemberEmail?: string | null | undefined;
                };
                output: import("./slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                };
                output: {
                    uid: string;
                };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    uid: string | null;
                };
                output: void;
            }>;
        }>;
        event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                username: string;
                org: string | null;
                eventSlug: string;
                isTeamEvent?: boolean | undefined;
                fromRedirectOfNonOrgLink?: boolean | undefined;
            };
            output: {
                bookingFields: {
                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                    name: string;
                    label?: string | undefined;
                    options?: {
                        label: string;
                        value: string;
                    }[] | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    placeholder?: string | undefined;
                    required?: boolean | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?: Record<string, {
                        type: "text" | "phone" | "address";
                        required?: boolean | undefined;
                        placeholder?: string | undefined;
                    }> | undefined;
                    minLength?: number | undefined;
                    variant?: string | undefined;
                    variantsConfig?: {
                        variants: Record<string, {
                            fields: {
                                type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                name: string;
                                label?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                placeholder?: string | undefined;
                                required?: boolean | undefined;
                                minLength?: number | undefined;
                            }[];
                        }>;
                    } | undefined;
                    views?: {
                        label: string;
                        id: string;
                        description?: string | undefined;
                    }[] | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                    sources?: {
                        label: string;
                        type: string;
                        id: string;
                        editUrl?: string | undefined;
                        fieldRequired?: boolean | undefined;
                    }[] | undefined;
                    disableOnPrefill?: boolean | undefined;
                }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                users: ({
                    metadata: undefined;
                    bookerUrl: string;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                } | {
                    metadata: undefined;
                    bookerUrl: string;
                    profile: {
                        organization: Omit<{
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                        } & Omit<Pick<{
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                        }, "metadata"> & {
                            requestedSlug: string | null;
                            metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?: {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                } | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                        };
                        id: number;
                        organizationId: number;
                        userId: number;
                        uid: string;
                        username: string;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        upId: string;
                    };
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                })[];
                locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                profile: {
                    image?: string | undefined;
                    name?: string | undefined;
                    username?: string | null | undefined;
                    weekStart: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    theme: null;
                    bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                };
                entity: {
                    considerUnpublished: boolean;
                    fromRedirectOfNonOrgLink: boolean;
                    orgSlug: string | null;
                    name: string | null;
                    teamSlug: null;
                    logoUrl: null;
                };
                isInstantEvent: boolean;
                showInstantEventConnectNowModal: boolean;
                metadata: {
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    apps?: {
                        alby?: {
                            price: number;
                            currency: string;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                        } | undefined;
                        basecamp3?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        campsite?: {} | undefined;
                        closecom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        dailyvideo?: {} | undefined;
                        fathom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        feishucalendar?: {} | undefined;
                        ga4?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        giphy?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            thankYouPage?: string | undefined;
                        } | undefined;
                        googlecalendar?: {} | undefined;
                        googlevideo?: {} | undefined;
                        gtm?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        hubspot?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        intercom?: {} | undefined;
                        jelly?: {} | undefined;
                        jitsivideo?: {} | undefined;
                        larkcalendar?: {} | undefined;
                        make?: {} | undefined;
                        matomo?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            MATOMO_URL?: string | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        metapixel?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        "mock-payment-app"?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        office365calendar?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        office365video?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        paypal?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        "pipedrive-crm"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        plausible?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            PLAUSIBLE_URL?: string | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        posthog?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            TRACKING_ID?: string | undefined;
                            API_HOST?: string | undefined;
                        } | undefined;
                        qr_code?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "routing-forms"?: any;
                        salesforce?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            roundRobinLeadSkip?: boolean | undefined;
                            skipContactCreation?: boolean | undefined;
                        } | undefined;
                        shimmervideo?: {} | undefined;
                        stripe?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        tandemvideo?: {} | undefined;
                        "booking-pages-tag"?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "event-type-app-card"?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        twipla?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        umami?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                            SCRIPT_URL?: string | undefined;
                        } | undefined;
                        vital?: {} | undefined;
                        webex?: {} | undefined;
                        wordpress?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zapier?: {} | undefined;
                        "zoho-bigin"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zohocalendar?: {} | undefined;
                        zohocrm?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zoomvideo?: {} | undefined;
                    } | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?: {
                        all?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                        confirmation?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    managedEventConfig?: {
                        unlockedFields?: {
                            position?: true | undefined;
                            title?: true | undefined;
                            metadata?: true | undefined;
                            hidden?: true | undefined;
                            length?: true | undefined;
                            parent?: true | undefined;
                            description?: true | undefined;
                            children?: true | undefined;
                            timeZone?: true | undefined;
                            slug?: true | undefined;
                            locations?: true | undefined;
                            offsetStart?: true | undefined;
                            userId?: true | undefined;
                            profileId?: true | undefined;
                            teamId?: true | undefined;
                            eventName?: true | undefined;
                            parentId?: true | undefined;
                            bookingFields?: true | undefined;
                            periodType?: true | undefined;
                            periodStartDate?: true | undefined;
                            periodEndDate?: true | undefined;
                            periodDays?: true | undefined;
                            periodCountCalendarDays?: true | undefined;
                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                            requiresConfirmation?: true | undefined;
                            requiresConfirmationWillBlockSlot?: true | undefined;
                            requiresBookerEmailVerification?: true | undefined;
                            recurringEvent?: true | undefined;
                            disableGuests?: true | undefined;
                            hideCalendarNotes?: true | undefined;
                            minimumBookingNotice?: true | undefined;
                            beforeEventBuffer?: true | undefined;
                            afterEventBuffer?: true | undefined;
                            seatsPerTimeSlot?: true | undefined;
                            onlyShowFirstAvailableSlot?: true | undefined;
                            seatsShowAttendees?: true | undefined;
                            seatsShowAvailabilityCount?: true | undefined;
                            schedulingType?: true | undefined;
                            scheduleId?: true | undefined;
                            price?: true | undefined;
                            currency?: true | undefined;
                            slotInterval?: true | undefined;
                            successRedirectUrl?: true | undefined;
                            forwardParamsSuccessRedirect?: true | undefined;
                            bookingLimits?: true | undefined;
                            durationLimits?: true | undefined;
                            isInstantEvent?: true | undefined;
                            instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                            instantMeetingScheduleId?: true | undefined;
                            assignAllTeamMembers?: true | undefined;
                            useEventTypeDestinationCalendarEmail?: true | undefined;
                            isRRWeightsEnabled?: true | undefined;
                            eventTypeColor?: true | undefined;
                            rescheduleWithSameRoundRobinHost?: true | undefined;
                            secondaryEmailId?: true | undefined;
                            hosts?: true | undefined;
                            users?: true | undefined;
                            owner?: true | undefined;
                            profile?: true | undefined;
                            team?: true | undefined;
                            hashedLink?: true | undefined;
                            bookings?: true | undefined;
                            availability?: true | undefined;
                            webhooks?: true | undefined;
                            destinationCalendar?: true | undefined;
                            customInputs?: true | undefined;
                            schedule?: true | undefined;
                            workflows?: true | undefined;
                            instantMeetingSchedule?: true | undefined;
                            aiPhoneCallConfig?: true | undefined;
                            secondaryEmail?: true | undefined;
                            _count?: true | undefined;
                        } | undefined;
                    } | undefined;
                    requiresConfirmationThreshold?: {
                        time: number;
                        unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                    } | undefined;
                    config?: {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                    } | undefined;
                    bookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                } | null;
                isDynamic: boolean;
                periodCountCalendarDays: boolean;
                periodStartDate: null;
                periodEndDate: null;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                periodType: "UNLIMITED";
                periodDays: null;
                slotInterval: null;
                offsetStart: number;
                customInputs: {
                    label: string;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    id: number;
                    placeholder: string;
                    required: boolean;
                    eventTypeId: number;
                    options?: {
                        label: string;
                        type: string;
                    }[] | null | undefined;
                    hasToBeCreated?: boolean | undefined;
                }[];
                disableGuests: boolean;
                minimumBookingNotice: number;
                schedule: null;
                timeZone: null;
                successRedirectUrl: string;
                forwardParamsSuccessRedirect: boolean;
                teamId: null;
                scheduleId: null;
                availability: never[];
                price: number;
                currency: string;
                schedulingType: "COLLECTIVE";
                seatsPerTimeSlot: null;
                seatsShowAttendees: null;
                seatsShowAvailabilityCount: null;
                onlyShowFirstAvailableSlot: boolean;
                id: number;
                hideCalendarNotes: boolean;
                recurringEvent: null;
                destinationCalendar: null;
                team: null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresBookerEmailVerification: boolean;
                bookingLimits: null;
                durationLimits: null;
                hidden: boolean;
                userId: number;
                parentId: null;
                parent: null;
                owner: null;
                workflows: never[];
                hosts: never[];
                assignAllTeamMembers: boolean;
                isRRWeightsEnabled: boolean;
                rescheduleWithSameRoundRobinHost: boolean;
                useEventTypeDestinationCalendarEmail: boolean;
                secondaryEmailId: null;
                secondaryEmail: null;
                length: number;
                slug: string;
                title: string;
                eventName: string;
                description: string;
                descriptionAsSafeHTML: string;
                position: number;
            } | {
                bookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                description: string;
                metadata: {
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    apps?: {
                        alby?: {
                            price: number;
                            currency: string;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                        } | undefined;
                        basecamp3?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        campsite?: {} | undefined;
                        closecom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        dailyvideo?: {} | undefined;
                        fathom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        feishucalendar?: {} | undefined;
                        ga4?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        giphy?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            thankYouPage?: string | undefined;
                        } | undefined;
                        googlecalendar?: {} | undefined;
                        googlevideo?: {} | undefined;
                        gtm?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        hubspot?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        intercom?: {} | undefined;
                        jelly?: {} | undefined;
                        jitsivideo?: {} | undefined;
                        larkcalendar?: {} | undefined;
                        make?: {} | undefined;
                        matomo?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            MATOMO_URL?: string | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        metapixel?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        "mock-payment-app"?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        office365calendar?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        office365video?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        paypal?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        "pipedrive-crm"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        plausible?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            PLAUSIBLE_URL?: string | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        posthog?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            TRACKING_ID?: string | undefined;
                            API_HOST?: string | undefined;
                        } | undefined;
                        qr_code?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "routing-forms"?: any;
                        salesforce?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            roundRobinLeadSkip?: boolean | undefined;
                            skipContactCreation?: boolean | undefined;
                        } | undefined;
                        shimmervideo?: {} | undefined;
                        stripe?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        tandemvideo?: {} | undefined;
                        "booking-pages-tag"?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "event-type-app-card"?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        twipla?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        umami?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                            SCRIPT_URL?: string | undefined;
                        } | undefined;
                        vital?: {} | undefined;
                        webex?: {} | undefined;
                        wordpress?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zapier?: {} | undefined;
                        "zoho-bigin"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zohocalendar?: {} | undefined;
                        zohocrm?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zoomvideo?: {} | undefined;
                    } | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?: {
                        all?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                        confirmation?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    managedEventConfig?: {
                        unlockedFields?: {
                            position?: true | undefined;
                            title?: true | undefined;
                            metadata?: true | undefined;
                            hidden?: true | undefined;
                            length?: true | undefined;
                            parent?: true | undefined;
                            description?: true | undefined;
                            children?: true | undefined;
                            timeZone?: true | undefined;
                            slug?: true | undefined;
                            locations?: true | undefined;
                            offsetStart?: true | undefined;
                            userId?: true | undefined;
                            profileId?: true | undefined;
                            teamId?: true | undefined;
                            eventName?: true | undefined;
                            parentId?: true | undefined;
                            bookingFields?: true | undefined;
                            periodType?: true | undefined;
                            periodStartDate?: true | undefined;
                            periodEndDate?: true | undefined;
                            periodDays?: true | undefined;
                            periodCountCalendarDays?: true | undefined;
                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                            requiresConfirmation?: true | undefined;
                            requiresConfirmationWillBlockSlot?: true | undefined;
                            requiresBookerEmailVerification?: true | undefined;
                            recurringEvent?: true | undefined;
                            disableGuests?: true | undefined;
                            hideCalendarNotes?: true | undefined;
                            minimumBookingNotice?: true | undefined;
                            beforeEventBuffer?: true | undefined;
                            afterEventBuffer?: true | undefined;
                            seatsPerTimeSlot?: true | undefined;
                            onlyShowFirstAvailableSlot?: true | undefined;
                            seatsShowAttendees?: true | undefined;
                            seatsShowAvailabilityCount?: true | undefined;
                            schedulingType?: true | undefined;
                            scheduleId?: true | undefined;
                            price?: true | undefined;
                            currency?: true | undefined;
                            slotInterval?: true | undefined;
                            successRedirectUrl?: true | undefined;
                            forwardParamsSuccessRedirect?: true | undefined;
                            bookingLimits?: true | undefined;
                            durationLimits?: true | undefined;
                            isInstantEvent?: true | undefined;
                            instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                            instantMeetingScheduleId?: true | undefined;
                            assignAllTeamMembers?: true | undefined;
                            useEventTypeDestinationCalendarEmail?: true | undefined;
                            isRRWeightsEnabled?: true | undefined;
                            eventTypeColor?: true | undefined;
                            rescheduleWithSameRoundRobinHost?: true | undefined;
                            secondaryEmailId?: true | undefined;
                            hosts?: true | undefined;
                            users?: true | undefined;
                            owner?: true | undefined;
                            profile?: true | undefined;
                            team?: true | undefined;
                            hashedLink?: true | undefined;
                            bookings?: true | undefined;
                            availability?: true | undefined;
                            webhooks?: true | undefined;
                            destinationCalendar?: true | undefined;
                            customInputs?: true | undefined;
                            schedule?: true | undefined;
                            workflows?: true | undefined;
                            instantMeetingSchedule?: true | undefined;
                            aiPhoneCallConfig?: true | undefined;
                            secondaryEmail?: true | undefined;
                            _count?: true | undefined;
                        } | undefined;
                    } | undefined;
                    requiresConfirmationThreshold?: {
                        time: number;
                        unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                    } | undefined;
                    config?: {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                    } | undefined;
                    bookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                } | null;
                customInputs: {
                    label: string;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    id: number;
                    placeholder: string;
                    required: boolean;
                    eventTypeId: number;
                    options?: {
                        label: string;
                        type: string;
                    }[] | null | undefined;
                    hasToBeCreated?: boolean | undefined;
                }[];
                locations: (Pick<Partial<import("@calcom/app-store/locations").LocationObject>, "link" | "address"> & Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                bookingFields: {
                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                    name: string;
                    label?: string | undefined;
                    options?: {
                        label: string;
                        value: string;
                    }[] | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    placeholder?: string | undefined;
                    required?: boolean | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?: Record<string, {
                        type: "text" | "phone" | "address";
                        required?: boolean | undefined;
                        placeholder?: string | undefined;
                    }> | undefined;
                    minLength?: number | undefined;
                    variant?: string | undefined;
                    variantsConfig?: {
                        variants: Record<string, {
                            fields: {
                                type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                name: string;
                                label?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                placeholder?: string | undefined;
                                required?: boolean | undefined;
                                minLength?: number | undefined;
                            }[];
                        }>;
                    } | undefined;
                    views?: {
                        label: string;
                        id: string;
                        description?: string | undefined;
                    }[] | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                    sources?: {
                        label: string;
                        type: string;
                        id: string;
                        editUrl?: string | undefined;
                        fieldRequired?: boolean | undefined;
                    }[] | undefined;
                    disableOnPrefill?: boolean | undefined;
                }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                profile: {
                    username: string | null | undefined;
                    name: string | null;
                    weekStart: string;
                    image: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    theme: string | null;
                    bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                };
                users: {
                    username: string | null;
                    name: string | null;
                    weekStart: string;
                    organizationId: any;
                    avatarUrl: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    bookerUrl: string;
                }[];
                entity: {
                    logoUrl?: string | undefined;
                    name: any;
                    fromRedirectOfNonOrgLink: boolean;
                    considerUnpublished: boolean;
                    orgSlug: string | null;
                    teamSlug: string | null;
                };
                isDynamic: boolean;
                isInstantEvent: boolean;
                showInstantEventConnectNowModal: boolean;
                aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                } | null;
                assignAllTeamMembers: boolean;
                owner: ({
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    username: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    weekStart: string;
                    organization: {
                        id: number;
                        name: string;
                        slug: string | null;
                        calVideoLogo: string | null;
                        bannerUrl: string | null;
                    } | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                }) | null;
                hosts: {
                    user: {
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        theme: string | null;
                        id: number;
                        name: string | null;
                        username: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        weekStart: string;
                        organization: {
                            id: number;
                            name: string;
                            slug: string | null;
                            calVideoLogo: string | null;
                            bannerUrl: string | null;
                        } | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                }[];
                title: string;
                hidden: boolean;
                length: number;
                id: number;
                slug: string;
                eventName: string | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresBookerEmailVerification: boolean;
                disableGuests: boolean;
                seatsPerTimeSlot: number | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                price: number;
                currency: string;
                successRedirectUrl: string | null;
                forwardParamsSuccessRedirect: boolean | null;
                rescheduleWithSameRoundRobinHost: boolean;
                team: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    name: string;
                    parent: {
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        bannerUrl: string | null;
                    } | null;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                } | null;
                schedule: {
                    id: number;
                    timeZone: string | null;
                } | null;
                workflows: ({
                    workflow: {
                        steps: {
                            template: import(".prisma/client").$Enums.WorkflowTemplates;
                            id: number;
                            action: import(".prisma/client").$Enums.WorkflowActions;
                            stepNumber: number;
                            workflowId: number;
                            sendTo: string | null;
                            reminderBody: string | null;
                            emailSubject: string | null;
                            numberRequired: boolean | null;
                            sender: string | null;
                            numberVerificationPending: boolean;
                            includeCalendarEvent: boolean;
                        }[];
                    } & {
                        position: number;
                        time: number | null;
                        id: number;
                        name: string;
                        userId: number | null;
                        teamId: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    };
                } & {
                    id: number;
                    eventTypeId: number;
                    workflowId: number;
                })[];
                instantMeetingSchedule: {
                    id: number;
                    timeZone: string | null;
                } | null;
            } | null;
        }>;
        ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                connectionExists: null;
            } | {
                connectionExists: boolean;
            };
        }>;
        checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                email: string;
                userSessionEmail?: string | undefined;
            };
            output: boolean;
        }>;
    }>;
    auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                oldPassword: string;
                newPassword: string;
            };
            output: void;
        }>;
        verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                passwordInput: string;
            };
            output: void;
        }>;
        verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                code: string;
                email: string;
            };
            output: true;
        }>;
        sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
                username?: string | undefined;
                language?: string | undefined;
                isVerifyingEmail?: boolean | undefined;
            };
            output: {
                ok: boolean;
                skipped: boolean;
            };
        }>;
        resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
            } | undefined;
            output: {
                ok: boolean;
                skipped: boolean;
            };
        }>;
        createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
        }>;
    }>;
    deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                licenseKey?: string | undefined;
            };
            output: void;
        }>;
    }>;
    bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                filters: {
                    status: "cancelled" | "upcoming" | "recurring" | "past" | "unconfirmed";
                    teamIds?: number[] | undefined;
                    userIds?: number[] | undefined;
                    eventTypeIds?: number[] | undefined;
                };
                limit?: number | null | undefined;
                cursor?: number | null | undefined;
            };
            output: {
                bookings: {
                    eventType: {
                        recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                        eventTypeColor: {
                            lightEventTypeColor: string;
                            darkEventTypeColor: string;
                        } | null;
                        price: number;
                        currency: string;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        team?: {
                            name: string;
                            id: number;
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } | null | undefined;
                        id?: number | undefined;
                        slug?: string | undefined;
                        eventName?: string | null | undefined;
                        seatsShowAttendees?: boolean | null | undefined;
                        seatsShowAvailabilityCount?: boolean | null | undefined;
                        schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                    };
                    startTime: string;
                    endTime: string;
                    isUserTeamAdminOrOwner: boolean;
                    status: import(".prisma/client").$Enums.BookingStatus;
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                    } | null;
                    payment: {
                        currency: string;
                        success: boolean;
                        amount: number;
                        paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                    }[];
                    references: {
                        type: string;
                        id: number;
                        uid: string;
                        bookingId: number | null;
                        deleted: boolean | null;
                        credentialId: number | null;
                        thirdPartyRecurringEventId: string | null;
                        meetingId: string | null;
                        meetingPassword: string | null;
                        meetingUrl: string | null;
                        externalCalendarId: string | null;
                    }[];
                    attendees: {
                        name: string;
                        id: number;
                        email: string;
                        timeZone: string;
                        locale: string | null;
                        noShow: boolean | null;
                        bookingId: number | null;
                    }[];
                    seatsReferences: {
                        attendee: {
                            email: string;
                        };
                        referenceUid: string;
                    }[];
                    id: number;
                    uid: string;
                    userPrimaryEmail: string | null;
                    title: string;
                    description: string | null;
                    customInputs: import(".prisma/client").Prisma.JsonValue;
                    location: string | null;
                    paid: boolean;
                    rescheduled: boolean | null;
                    recurringEventId: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    isRecorded: boolean;
                }[];
                recurringInfo: {
                    recurringEventId: string | null;
                    count: number;
                    firstDate: Date | null;
                    bookings: {
                        [key: string]: Date[];
                    };
                }[];
                nextCursor: number | null;
            };
        }>;
        requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: string;
                rescheduleReason?: string | undefined;
            };
            output: void;
        }>;
        editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: number;
                newLocation: string;
                details?: {
                    credentialId?: number | undefined;
                } | undefined;
            };
            output: {
                message: string;
            };
        }>;
        addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: number;
                guests: string[];
            };
            output: {
                message: string;
            };
        }>;
        confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: number;
                confirmed: boolean;
                recurringEventId?: string | undefined;
                reason?: string | undefined;
            };
            output: {
                message: string;
                status: "ACCEPTED" | "REJECTED";
            } | null;
        }>;
        getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                seatReferenceUid: string;
            };
            output: number;
        }>;
        find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                bookingUid?: string | undefined;
            };
            output: {
                booking: {
                    status: import(".prisma/client").$Enums.BookingStatus;
                    id: number;
                    uid: string;
                    eventTypeId: number | null;
                    description: string | null;
                    startTime: Date;
                    endTime: Date;
                    paid: boolean;
                } | null;
            };
        }>;
        getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                bookingId: number;
            };
            output: {
                booking: {
                    status: import(".prisma/client").$Enums.BookingStatus;
                    id: number;
                    uid: string;
                    eventTypeId: number | null;
                    description: string | null;
                    startTime: Date;
                    endTime: Date;
                    location: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                } | null;
            };
        }>;
    }>;
    eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                filters?: {
                    teamIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                    schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                } | undefined;
                forRoutingForms?: boolean | undefined;
            } | null | undefined;
            output: {
                allUsersAcrossAllEventTypes: Map<number, {
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                }>;
                eventTypeGroups: {
                    eventTypes: {
                        userIds: number[];
                        safeDescription: string | undefined;
                        metadata: {
                            smartContractAddress?: string | undefined;
                            blockchainId?: number | undefined;
                            multipleDuration?: number[] | undefined;
                            giphyThankYouPage?: string | undefined;
                            apps?: {
                                alby?: {
                                    price: number;
                                    currency: string;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                } | undefined;
                                basecamp3?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                campsite?: {} | undefined;
                                closecom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                dailyvideo?: {} | undefined;
                                fathom?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                feishucalendar?: {} | undefined;
                                ga4?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                giphy?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    thankYouPage?: string | undefined;
                                } | undefined;
                                googlecalendar?: {} | undefined;
                                googlevideo?: {} | undefined;
                                gtm?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                hubspot?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                intercom?: {} | undefined;
                                jelly?: {} | undefined;
                                jitsivideo?: {} | undefined;
                                larkcalendar?: {} | undefined;
                                make?: {} | undefined;
                                matomo?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    MATOMO_URL?: string | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                metapixel?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                "mock-payment-app"?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                office365calendar?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                office365video?: {
                                    client_id: string;
                                    client_secret: string;
                                } | undefined;
                                paypal?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                "pipedrive-crm"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                plausible?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    PLAUSIBLE_URL?: string | undefined;
                                    trackingId?: string | undefined;
                                } | undefined;
                                posthog?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    TRACKING_ID?: string | undefined;
                                    API_HOST?: string | undefined;
                                } | undefined;
                                qr_code?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "routing-forms"?: any;
                                salesforce?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    roundRobinLeadSkip?: boolean | undefined;
                                    skipContactCreation?: boolean | undefined;
                                } | undefined;
                                shimmervideo?: {} | undefined;
                                stripe?: {
                                    price: number;
                                    currency: string;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    paymentOption?: string | undefined;
                                    enabled?: boolean | undefined;
                                } | undefined;
                                tandemvideo?: {} | undefined;
                                "booking-pages-tag"?: {
                                    trackingId: string;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                "event-type-app-card"?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                twipla?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                } | undefined;
                                umami?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                    SITE_ID?: string | undefined;
                                    SCRIPT_URL?: string | undefined;
                                } | undefined;
                                vital?: {} | undefined;
                                webex?: {} | undefined;
                                wordpress?: {
                                    isSunrise: boolean;
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zapier?: {} | undefined;
                                "zoho-bigin"?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zohocalendar?: {} | undefined;
                                zohocrm?: {
                                    enabled?: boolean | undefined;
                                    credentialId?: number | undefined;
                                    appCategories?: string[] | undefined;
                                } | undefined;
                                zoomvideo?: {} | undefined;
                            } | undefined;
                            additionalNotesRequired?: boolean | undefined;
                            disableSuccessPage?: boolean | undefined;
                            disableStandardEmails?: {
                                all?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                                confirmation?: {
                                    host?: boolean | undefined;
                                    attendee?: boolean | undefined;
                                } | undefined;
                            } | undefined;
                            managedEventConfig?: {
                                unlockedFields?: {
                                    length?: true | undefined;
                                    destinationCalendar?: true | undefined;
                                    profile?: true | undefined;
                                    team?: true | undefined;
                                    schedule?: true | undefined;
                                    availability?: true | undefined;
                                    hashedLink?: true | undefined;
                                    secondaryEmail?: true | undefined;
                                    userId?: true | undefined;
                                    title?: true | undefined;
                                    description?: true | undefined;
                                    customInputs?: true | undefined;
                                    metadata?: true | undefined;
                                    timeZone?: true | undefined;
                                    slug?: true | undefined;
                                    position?: true | undefined;
                                    locations?: true | undefined;
                                    offsetStart?: true | undefined;
                                    hidden?: true | undefined;
                                    profileId?: true | undefined;
                                    teamId?: true | undefined;
                                    eventName?: true | undefined;
                                    parentId?: true | undefined;
                                    bookingFields?: true | undefined;
                                    periodType?: true | undefined;
                                    periodStartDate?: true | undefined;
                                    periodEndDate?: true | undefined;
                                    periodDays?: true | undefined;
                                    periodCountCalendarDays?: true | undefined;
                                    lockTimeZoneToggleOnBookingPage?: true | undefined;
                                    requiresConfirmation?: true | undefined;
                                    requiresConfirmationWillBlockSlot?: true | undefined;
                                    requiresBookerEmailVerification?: true | undefined;
                                    recurringEvent?: true | undefined;
                                    disableGuests?: true | undefined;
                                    hideCalendarNotes?: true | undefined;
                                    minimumBookingNotice?: true | undefined;
                                    beforeEventBuffer?: true | undefined;
                                    afterEventBuffer?: true | undefined;
                                    seatsPerTimeSlot?: true | undefined;
                                    onlyShowFirstAvailableSlot?: true | undefined;
                                    seatsShowAttendees?: true | undefined;
                                    seatsShowAvailabilityCount?: true | undefined;
                                    schedulingType?: true | undefined;
                                    scheduleId?: true | undefined;
                                    price?: true | undefined;
                                    currency?: true | undefined;
                                    slotInterval?: true | undefined;
                                    successRedirectUrl?: true | undefined;
                                    forwardParamsSuccessRedirect?: true | undefined;
                                    bookingLimits?: true | undefined;
                                    durationLimits?: true | undefined;
                                    isInstantEvent?: true | undefined;
                                    instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                    instantMeetingScheduleId?: true | undefined;
                                    assignAllTeamMembers?: true | undefined;
                                    useEventTypeDestinationCalendarEmail?: true | undefined;
                                    isRRWeightsEnabled?: true | undefined;
                                    eventTypeColor?: true | undefined;
                                    rescheduleWithSameRoundRobinHost?: true | undefined;
                                    secondaryEmailId?: true | undefined;
                                    hosts?: true | undefined;
                                    users?: true | undefined;
                                    owner?: true | undefined;
                                    bookings?: true | undefined;
                                    webhooks?: true | undefined;
                                    parent?: true | undefined;
                                    children?: true | undefined;
                                    workflows?: true | undefined;
                                    instantMeetingSchedule?: true | undefined;
                                    aiPhoneCallConfig?: true | undefined;
                                    _count?: true | undefined;
                                } | undefined;
                            } | undefined;
                            requiresConfirmationThreshold?: {
                                time: number;
                                unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                            } | undefined;
                            config?: {
                                useHostSchedulesForTeamEvent?: boolean | undefined;
                            } | undefined;
                            bookerLayouts?: {
                                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            } | null | undefined;
                        } | null;
                        children: {
                            users: ({
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            } & {
                                nonProfileUsername: string | null;
                                profile: import("@calcom/types/UserProfile").UserProfile;
                            })[];
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        }[];
                        length: number;
                        hashedLink: {
                            id: number;
                            eventTypeId: number;
                            link: string;
                        } | null;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                        hosts: ({
                            user: {
                                name: string | null;
                                id: number;
                                username: string | null;
                                avatarUrl: string | null;
                            };
                        } & {
                            userId: number;
                            eventTypeId: number;
                            isFixed: boolean;
                            priority: number | null;
                            weight: number | null;
                            weightAdjustment: number | null;
                        })[];
                        aiPhoneCallConfig: {
                            id: number;
                            eventTypeId: number;
                            enabled: boolean;
                            templateType: string;
                            schedulerName: string | null;
                            generalPrompt: string | null;
                            yourPhoneNumber: string;
                            numberToCall: string;
                            guestName: string | null;
                            guestEmail: string | null;
                            guestCompany: string | null;
                            beginMessage: string | null;
                            llmId: string | null;
                        } | null;
                    }[];
                    teamId?: number | null | undefined;
                    parentId?: number | null | undefined;
                    bookerUrl: string;
                    membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                    profile: {
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    };
                    metadata: {
                        membershipCount: number;
                        readOnly: boolean;
                    };
                }[];
                profiles: {
                    teamId: number | null | undefined;
                    membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                    membershipCount: number;
                    readOnly: boolean;
                    slug: string | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean | undefined;
                }[];
            };
        }>;
        getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                filters?: {
                    teamIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                    schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                } | undefined;
                forRoutingForms?: boolean | undefined;
            } | null | undefined;
            output: {
                eventTypeGroups: {
                    teamId?: number | null | undefined;
                    parentId?: number | null | undefined;
                    bookerUrl: string;
                    membershipRole?: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                    profile: {
                        slug: string | null;
                        name: string | null;
                        image: string;
                        eventTypesLockedByOrg?: boolean | undefined;
                    };
                    metadata: {
                        membershipCount: number;
                        readOnly: boolean;
                    };
                }[];
                profiles: {
                    teamId: number | null | undefined;
                    membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                    membershipCount: number;
                    readOnly: boolean;
                    slug: string | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean | undefined;
                }[];
            };
        }>;
        getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                group: {
                    teamId?: number | null | undefined;
                    parentId?: number | null | undefined;
                };
                filters?: {
                    teamIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                    schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                } | undefined;
                forRoutingForms?: boolean | undefined;
                cursor?: number | null | undefined;
                limit?: number | undefined;
            };
            output: {
                eventTypes: {
                    safeDescription: string | undefined;
                    users: ({
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    children: {
                        users: ({
                            name: string | null;
                            id: number;
                            username: string | null;
                            avatarUrl: string | null;
                        } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        })[];
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    }[];
                    length: number;
                    hashedLink: {
                        id: number;
                        eventTypeId: number;
                        link: string;
                    } | null;
                    id: number;
                    userId: number | null;
                    title: string;
                    description: string | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                    hosts: ({
                        user: {
                            name: string | null;
                            id: number;
                            username: string | null;
                            avatarUrl: string | null;
                        };
                    } & {
                        userId: number;
                        eventTypeId: number;
                        isFixed: boolean;
                        priority: number | null;
                        weight: number | null;
                        weightAdjustment: number | null;
                    })[];
                    aiPhoneCallConfig: {
                        id: number;
                        eventTypeId: number;
                        enabled: boolean;
                        templateType: string;
                        schedulerName: string | null;
                        generalPrompt: string | null;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string | null;
                        guestEmail: string | null;
                        guestCompany: string | null;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                }[];
                nextCursor: number | undefined;
            };
        }>;
        getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
                isOrg?: boolean | undefined;
            } | null | undefined;
            output: {
                eventTypeOptions: {
                    value: string;
                    label: string;
                }[];
                teamOptions: {
                    value: string;
                    label: string;
                }[];
            };
        }>;
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                length: number;
                id: number;
                title: string;
                description: string | null;
                metadata: import(".prisma/client").Prisma.JsonValue;
                slug: string;
                hidden: boolean;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
            }[];
        }>;
        listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                team: {
                    name: string;
                    id: number;
                } | null;
                id: number;
                title: string;
                slug: string;
            }[];
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                length: number;
                title: string;
                slug: string;
                description?: string | null | undefined;
                metadata?: {
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    apps?: {
                        alby?: {
                            price: number;
                            currency: string;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                        } | undefined;
                        basecamp3?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        campsite?: {} | undefined;
                        closecom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        dailyvideo?: {} | undefined;
                        fathom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        feishucalendar?: {} | undefined;
                        ga4?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        giphy?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            thankYouPage?: string | undefined;
                        } | undefined;
                        googlecalendar?: {} | undefined;
                        googlevideo?: {} | undefined;
                        gtm?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        hubspot?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        intercom?: {} | undefined;
                        jelly?: {} | undefined;
                        jitsivideo?: {} | undefined;
                        larkcalendar?: {} | undefined;
                        make?: {} | undefined;
                        matomo?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            MATOMO_URL?: string | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        metapixel?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        "mock-payment-app"?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        office365calendar?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        office365video?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        paypal?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        "pipedrive-crm"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        plausible?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            PLAUSIBLE_URL?: string | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        posthog?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            TRACKING_ID?: string | undefined;
                            API_HOST?: string | undefined;
                        } | undefined;
                        qr_code?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "routing-forms"?: any;
                        salesforce?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            roundRobinLeadSkip?: boolean | undefined;
                            skipContactCreation?: boolean | undefined;
                        } | undefined;
                        shimmervideo?: {} | undefined;
                        stripe?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        tandemvideo?: {} | undefined;
                        "booking-pages-tag"?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "event-type-app-card"?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        twipla?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        umami?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                            SCRIPT_URL?: string | undefined;
                        } | undefined;
                        vital?: {} | undefined;
                        webex?: {} | undefined;
                        wordpress?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zapier?: {} | undefined;
                        "zoho-bigin"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zohocalendar?: {} | undefined;
                        zohocrm?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zoomvideo?: {} | undefined;
                    } | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?: {
                        all?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                        confirmation?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    managedEventConfig?: {
                        unlockedFields?: {
                            length?: true | undefined;
                            destinationCalendar?: true | undefined;
                            profile?: true | undefined;
                            team?: true | undefined;
                            schedule?: true | undefined;
                            availability?: true | undefined;
                            hashedLink?: true | undefined;
                            secondaryEmail?: true | undefined;
                            userId?: true | undefined;
                            title?: true | undefined;
                            description?: true | undefined;
                            customInputs?: true | undefined;
                            metadata?: true | undefined;
                            timeZone?: true | undefined;
                            slug?: true | undefined;
                            position?: true | undefined;
                            locations?: true | undefined;
                            offsetStart?: true | undefined;
                            hidden?: true | undefined;
                            profileId?: true | undefined;
                            teamId?: true | undefined;
                            eventName?: true | undefined;
                            parentId?: true | undefined;
                            bookingFields?: true | undefined;
                            periodType?: true | undefined;
                            periodStartDate?: true | undefined;
                            periodEndDate?: true | undefined;
                            periodDays?: true | undefined;
                            periodCountCalendarDays?: true | undefined;
                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                            requiresConfirmation?: true | undefined;
                            requiresConfirmationWillBlockSlot?: true | undefined;
                            requiresBookerEmailVerification?: true | undefined;
                            recurringEvent?: true | undefined;
                            disableGuests?: true | undefined;
                            hideCalendarNotes?: true | undefined;
                            minimumBookingNotice?: true | undefined;
                            beforeEventBuffer?: true | undefined;
                            afterEventBuffer?: true | undefined;
                            seatsPerTimeSlot?: true | undefined;
                            onlyShowFirstAvailableSlot?: true | undefined;
                            seatsShowAttendees?: true | undefined;
                            seatsShowAvailabilityCount?: true | undefined;
                            schedulingType?: true | undefined;
                            scheduleId?: true | undefined;
                            price?: true | undefined;
                            currency?: true | undefined;
                            slotInterval?: true | undefined;
                            successRedirectUrl?: true | undefined;
                            forwardParamsSuccessRedirect?: true | undefined;
                            bookingLimits?: true | undefined;
                            durationLimits?: true | undefined;
                            isInstantEvent?: true | undefined;
                            instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                            instantMeetingScheduleId?: true | undefined;
                            assignAllTeamMembers?: true | undefined;
                            useEventTypeDestinationCalendarEmail?: true | undefined;
                            isRRWeightsEnabled?: true | undefined;
                            eventTypeColor?: true | undefined;
                            rescheduleWithSameRoundRobinHost?: true | undefined;
                            secondaryEmailId?: true | undefined;
                            hosts?: true | undefined;
                            users?: true | undefined;
                            owner?: true | undefined;
                            bookings?: true | undefined;
                            webhooks?: true | undefined;
                            parent?: true | undefined;
                            children?: true | undefined;
                            workflows?: true | undefined;
                            instantMeetingSchedule?: true | undefined;
                            aiPhoneCallConfig?: true | undefined;
                            _count?: true | undefined;
                        } | undefined;
                    } | undefined;
                    requiresConfirmationThreshold?: {
                        time: number;
                        unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                    } | undefined;
                    config?: {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                    } | undefined;
                    bookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                } | null | undefined;
                locations?: {
                    type: string;
                    address?: string | undefined;
                    link?: string | undefined;
                    displayLocationPublicly?: boolean | undefined;
                    hostPhoneNumber?: string | undefined;
                    credentialId?: number | undefined;
                    teamName?: string | undefined;
                }[] | undefined;
                hidden?: boolean | undefined;
                teamId?: number | null | undefined;
                disableGuests?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | undefined;
                slotInterval?: number | null | undefined;
            };
            output: {
                eventType: {
                    length: number;
                    id: number;
                    userId: number | null;
                    title: string;
                    description: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                };
            };
        }>;
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id: number;
                users?: number[] | undefined;
            };
            output: {
                eventType: {
                    schedule: number | null;
                    instantMeetingSchedule: number | null;
                    scheduleName: string | null;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    bookingLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                    durationLimits: Partial<Record<"PER_DAY" | "PER_WEEK" | "PER_MONTH" | "PER_YEAR", number | undefined>> | null;
                    eventTypeColor: {
                        lightEventTypeColor: string;
                        darkEventTypeColor: string;
                    } | null;
                    locations: import("@calcom/app-store/locations").LocationObject[];
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    };
                    customInputs: {
                        type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                        id: number;
                        eventTypeId: number;
                        label: string;
                        required: boolean;
                        placeholder: string;
                        options?: {
                            type: string;
                            label: string;
                        }[] | null | undefined;
                        hasToBeCreated?: boolean | undefined;
                    }[];
                    users: {
                        name: string | null;
                        id: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    }[];
                    bookerUrl: string;
                    children: {
                        owner: {
                            avatar: string;
                            email: string;
                            name: string;
                            username: string;
                            membership: import(".prisma/client").$Enums.MembershipRole;
                            id: number;
                            avatarUrl: string | null;
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                        created: boolean;
                        slug: string;
                        hidden: boolean;
                    }[];
                    length: number;
                    destinationCalendar: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        credentialId: number | null;
                        integration: string;
                        externalId: string;
                        primaryEmail: string | null;
                    } | null;
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        parentId: number | null;
                        parent: {
                            organizationSettings: {
                                lockEventTypeCreationForUsers: boolean;
                            } | null;
                            slug: string | null;
                        } | null;
                        members: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                locale: string | null;
                                eventTypes: {
                                    slug: string;
                                }[];
                                username: string | null;
                                avatarUrl: string | null;
                                defaultScheduleId: number | null;
                            };
                            role: import(".prisma/client").$Enums.MembershipRole;
                            accepted: boolean;
                        }[];
                    } | null;
                    hashedLink: {
                        id: number;
                        eventTypeId: number;
                        link: string;
                    } | null;
                    id: number;
                    userId: number | null;
                    title: string;
                    description: string | null;
                    timeZone: string | null;
                    slug: string;
                    offsetStart: number;
                    hidden: boolean;
                    teamId: number | null;
                    eventName: string | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresBookerEmailVerification: boolean;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                    hosts: {
                        userId: number;
                        isFixed: boolean;
                        priority: number | null;
                        weight: number | null;
                        weightAdjustment: number | null;
                    }[];
                    owner: {
                        id: number;
                    } | null;
                    webhooks: {
                        id: string;
                        eventTypeId: number | null;
                        secret: string | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        active: boolean;
                        eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                    }[];
                    parent: {
                        id: number;
                        teamId: number | null;
                    } | null;
                    workflows: ({
                        workflow: {
                            team: {
                                name: string;
                                id: number;
                                slug: string | null;
                                members: {
                                    id: number;
                                    userId: number;
                                    teamId: number;
                                    role: import(".prisma/client").$Enums.MembershipRole;
                                    disableImpersonation: boolean;
                                    accepted: boolean;
                                }[];
                            } | null;
                            name: string;
                            id: number;
                            userId: number | null;
                            teamId: number | null;
                            steps: {
                                id: number;
                                template: import(".prisma/client").$Enums.WorkflowTemplates;
                                stepNumber: number;
                                action: import(".prisma/client").$Enums.WorkflowActions;
                                workflowId: number;
                                sendTo: string | null;
                                reminderBody: string | null;
                                emailSubject: string | null;
                                numberRequired: boolean | null;
                                sender: string | null;
                                numberVerificationPending: boolean;
                                includeCalendarEvent: boolean;
                            }[];
                            time: number | null;
                            trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                            timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                            activeOn: {
                                eventType: {
                                    id: number;
                                    title: string;
                                    parentId: number | null;
                                    _count: {
                                        children: number;
                                    };
                                };
                            }[];
                        };
                    } & {
                        id: number;
                        eventTypeId: number;
                        workflowId: number;
                    })[];
                    aiPhoneCallConfig: {
                        id: number;
                        eventTypeId: number;
                        enabled: boolean;
                        templateType: string;
                        schedulerName: string | null;
                        generalPrompt: string | null;
                        yourPhoneNumber: string;
                        numberToCall: string;
                        guestName: string | null;
                        guestEmail: string | null;
                        guestCompany: string | null;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                } & {
                    users: ({
                        name: string | null;
                        id: number;
                        email: string;
                        locale: string | null;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    } & {
                        avatar: string;
                    })[];
                    periodStartDate: string | null;
                    periodEndDate: string | null;
                    bookingFields: {
                        type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                        name: string;
                        label?: string | undefined;
                        options?: {
                            label: string;
                            value: string;
                        }[] | undefined;
                        maxLength?: number | undefined;
                        defaultLabel?: string | undefined;
                        defaultPlaceholder?: string | undefined;
                        labelAsSafeHtml?: string | undefined;
                        placeholder?: string | undefined;
                        required?: boolean | undefined;
                        getOptionsAt?: string | undefined;
                        optionsInputs?: Record<string, {
                            type: "text" | "phone" | "address";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                        }> | undefined;
                        minLength?: number | undefined;
                        variant?: string | undefined;
                        variantsConfig?: {
                            variants: Record<string, {
                                fields: {
                                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                    name: string;
                                    label?: string | undefined;
                                    maxLength?: number | undefined;
                                    labelAsSafeHtml?: string | undefined;
                                    placeholder?: string | undefined;
                                    required?: boolean | undefined;
                                    minLength?: number | undefined;
                                }[];
                            }>;
                        } | undefined;
                        views?: {
                            label: string;
                            id: string;
                            description?: string | undefined;
                        }[] | undefined;
                        hideWhenJustOneOption?: boolean | undefined;
                        hidden?: boolean | undefined;
                        editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                        sources?: {
                            label: string;
                            type: string;
                            id: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                        }[] | undefined;
                        disableOnPrefill?: boolean | undefined;
                    }[] & import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                };
                locationOptions: {
                    label: string;
                    options: {
                        label: string;
                        value: string;
                        disabled?: boolean | undefined;
                        icon?: string | undefined;
                        slug?: string | undefined;
                        credentialId?: number | undefined;
                    }[];
                }[];
                destinationCalendar: {
                    id: number;
                    userId: number | null;
                    eventTypeId: number | null;
                    credentialId: number | null;
                    integration: string;
                    externalId: string;
                    primaryEmail: string | null;
                } | null;
                team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                        organizationSettings: {
                            lockEventTypeCreationForUsers: boolean;
                        } | null;
                        slug: string | null;
                    } | null;
                    members: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            locale: string | null;
                            eventTypes: {
                                slug: string;
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                            defaultScheduleId: number | null;
                        };
                        role: import(".prisma/client").$Enums.MembershipRole;
                        accepted: boolean;
                    }[];
                } | null;
                teamMembers: {
                    profileId: number | null;
                    eventTypes: string[];
                    membership: import(".prisma/client").$Enums.MembershipRole;
                    name: string | null;
                    id: number;
                    email: string;
                    locale: string | null;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    avatar: string;
                }[];
                currentUserMembership: {
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                        locale: string | null;
                        eventTypes: {
                            slug: string;
                        }[];
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                    };
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                } | null;
                isUserOrganizationAdmin: boolean;
            };
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                users?: (number[] & (string | number)[]) | undefined;
                length?: number | undefined;
                destinationCalendar?: {
                    integration: string;
                    externalId: string;
                } | null | undefined;
                schedule?: number | null | undefined;
                hashedLink?: string | undefined;
                userId?: number | null | undefined;
                title?: string | undefined;
                description?: string | null | undefined;
                customInputs?: {
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    id: number;
                    eventTypeId: number;
                    label: string;
                    required: boolean;
                    placeholder: string;
                    options?: {
                        type: string;
                        label: string;
                    }[] | null | undefined;
                    hasToBeCreated?: boolean | undefined;
                }[] | undefined;
                metadata?: {
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    apps?: {
                        alby?: {
                            price: number;
                            currency: string;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                        } | undefined;
                        basecamp3?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        campsite?: {} | undefined;
                        closecom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        dailyvideo?: {} | undefined;
                        fathom?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        feishucalendar?: {} | undefined;
                        ga4?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        giphy?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            thankYouPage?: string | undefined;
                        } | undefined;
                        googlecalendar?: {} | undefined;
                        googlevideo?: {} | undefined;
                        gtm?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        hubspot?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        intercom?: {} | undefined;
                        jelly?: {} | undefined;
                        jitsivideo?: {} | undefined;
                        larkcalendar?: {} | undefined;
                        make?: {} | undefined;
                        matomo?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            MATOMO_URL?: string | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        metapixel?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        "mock-payment-app"?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        office365calendar?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        office365video?: {
                            client_id: string;
                            client_secret: string;
                        } | undefined;
                        paypal?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        "pipedrive-crm"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        plausible?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            PLAUSIBLE_URL?: string | undefined;
                            trackingId?: string | undefined;
                        } | undefined;
                        posthog?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            TRACKING_ID?: string | undefined;
                            API_HOST?: string | undefined;
                        } | undefined;
                        qr_code?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "routing-forms"?: any;
                        salesforce?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            roundRobinLeadSkip?: boolean | undefined;
                            skipContactCreation?: boolean | undefined;
                        } | undefined;
                        shimmervideo?: {} | undefined;
                        stripe?: {
                            price: number;
                            currency: string;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            paymentOption?: string | undefined;
                            enabled?: boolean | undefined;
                        } | undefined;
                        tandemvideo?: {} | undefined;
                        "booking-pages-tag"?: {
                            trackingId: string;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        "event-type-app-card"?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        twipla?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                        } | undefined;
                        umami?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                            SITE_ID?: string | undefined;
                            SCRIPT_URL?: string | undefined;
                        } | undefined;
                        vital?: {} | undefined;
                        webex?: {} | undefined;
                        wordpress?: {
                            isSunrise: boolean;
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zapier?: {} | undefined;
                        "zoho-bigin"?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zohocalendar?: {} | undefined;
                        zohocrm?: {
                            enabled?: boolean | undefined;
                            credentialId?: number | undefined;
                            appCategories?: string[] | undefined;
                        } | undefined;
                        zoomvideo?: {} | undefined;
                    } | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?: {
                        all?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                        confirmation?: {
                            host?: boolean | undefined;
                            attendee?: boolean | undefined;
                        } | undefined;
                    } | undefined;
                    managedEventConfig?: {
                        unlockedFields?: {
                            length?: true | undefined;
                            destinationCalendar?: true | undefined;
                            profile?: true | undefined;
                            team?: true | undefined;
                            schedule?: true | undefined;
                            availability?: true | undefined;
                            hashedLink?: true | undefined;
                            secondaryEmail?: true | undefined;
                            userId?: true | undefined;
                            title?: true | undefined;
                            description?: true | undefined;
                            customInputs?: true | undefined;
                            metadata?: true | undefined;
                            timeZone?: true | undefined;
                            slug?: true | undefined;
                            position?: true | undefined;
                            locations?: true | undefined;
                            offsetStart?: true | undefined;
                            hidden?: true | undefined;
                            profileId?: true | undefined;
                            teamId?: true | undefined;
                            eventName?: true | undefined;
                            parentId?: true | undefined;
                            bookingFields?: true | undefined;
                            periodType?: true | undefined;
                            periodStartDate?: true | undefined;
                            periodEndDate?: true | undefined;
                            periodDays?: true | undefined;
                            periodCountCalendarDays?: true | undefined;
                            lockTimeZoneToggleOnBookingPage?: true | undefined;
                            requiresConfirmation?: true | undefined;
                            requiresConfirmationWillBlockSlot?: true | undefined;
                            requiresBookerEmailVerification?: true | undefined;
                            recurringEvent?: true | undefined;
                            disableGuests?: true | undefined;
                            hideCalendarNotes?: true | undefined;
                            minimumBookingNotice?: true | undefined;
                            beforeEventBuffer?: true | undefined;
                            afterEventBuffer?: true | undefined;
                            seatsPerTimeSlot?: true | undefined;
                            onlyShowFirstAvailableSlot?: true | undefined;
                            seatsShowAttendees?: true | undefined;
                            seatsShowAvailabilityCount?: true | undefined;
                            schedulingType?: true | undefined;
                            scheduleId?: true | undefined;
                            price?: true | undefined;
                            currency?: true | undefined;
                            slotInterval?: true | undefined;
                            successRedirectUrl?: true | undefined;
                            forwardParamsSuccessRedirect?: true | undefined;
                            bookingLimits?: true | undefined;
                            durationLimits?: true | undefined;
                            isInstantEvent?: true | undefined;
                            instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                            instantMeetingScheduleId?: true | undefined;
                            assignAllTeamMembers?: true | undefined;
                            useEventTypeDestinationCalendarEmail?: true | undefined;
                            isRRWeightsEnabled?: true | undefined;
                            eventTypeColor?: true | undefined;
                            rescheduleWithSameRoundRobinHost?: true | undefined;
                            secondaryEmailId?: true | undefined;
                            hosts?: true | undefined;
                            users?: true | undefined;
                            owner?: true | undefined;
                            bookings?: true | undefined;
                            webhooks?: true | undefined;
                            parent?: true | undefined;
                            children?: true | undefined;
                            workflows?: true | undefined;
                            instantMeetingSchedule?: true | undefined;
                            aiPhoneCallConfig?: true | undefined;
                            _count?: true | undefined;
                        } | undefined;
                    } | undefined;
                    requiresConfirmationThreshold?: {
                        time: number;
                        unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                    } | undefined;
                    config?: {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                    } | undefined;
                    bookerLayouts?: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null | undefined;
                } | null | undefined;
                timeZone?: string | null | undefined;
                slug?: string | undefined;
                position?: number | undefined;
                locations?: {
                    type: string;
                    address?: string | undefined;
                    link?: string | undefined;
                    displayLocationPublicly?: boolean | undefined;
                    hostPhoneNumber?: string | undefined;
                    credentialId?: number | undefined;
                    teamName?: string | undefined;
                }[] | undefined;
                offsetStart?: number | undefined;
                hidden?: boolean | undefined;
                profileId?: number | null | undefined;
                teamId?: number | null | undefined;
                eventName?: string | null | undefined;
                parentId?: number | null | undefined;
                bookingFields?: {
                    type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                    name: string;
                    label?: string | undefined;
                    options?: {
                        label: string;
                        value: string;
                    }[] | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    placeholder?: string | undefined;
                    required?: boolean | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?: Record<string, {
                        type: "text" | "phone" | "address";
                        required?: boolean | undefined;
                        placeholder?: string | undefined;
                    }> | undefined;
                    minLength?: number | undefined;
                    variant?: string | undefined;
                    variantsConfig?: {
                        variants: Record<string, {
                            fields: {
                                type: "number" | "boolean" | "name" | "email" | "select" | "url" | "text" | "textarea" | "phone" | "address" | "multiemail" | "multiselect" | "checkbox" | "radio" | "radioInput";
                                name: string;
                                label?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                placeholder?: string | undefined;
                                required?: boolean | undefined;
                                minLength?: number | undefined;
                            }[];
                        }>;
                    } | undefined;
                    views?: {
                        label: string;
                        id: string;
                        description?: string | undefined;
                    }[] | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?: "user" | "system-but-optional" | "system" | "system-but-hidden" | "user-readonly" | undefined;
                    sources?: {
                        label: string;
                        type: string;
                        id: string;
                        editUrl?: string | undefined;
                        fieldRequired?: boolean | undefined;
                    }[] | undefined;
                    disableOnPrefill?: boolean | undefined;
                }[] | undefined;
                periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                periodStartDate?: Date | null | undefined;
                periodEndDate?: Date | null | undefined;
                periodDays?: number | null | undefined;
                periodCountCalendarDays?: boolean | null | undefined;
                lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                requiresConfirmation?: boolean | undefined;
                requiresConfirmationWillBlockSlot?: boolean | undefined;
                requiresBookerEmailVerification?: boolean | undefined;
                recurringEvent?: {
                    count: number;
                    interval: number;
                    freq: import("@calcom/prisma/zod-utils").Frequency;
                    dtstart?: Date | undefined;
                    until?: Date | undefined;
                    tzid?: string | undefined;
                } | null | undefined;
                disableGuests?: boolean | undefined;
                hideCalendarNotes?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                seatsPerTimeSlot?: number | null | undefined;
                onlyShowFirstAvailableSlot?: boolean | undefined;
                seatsShowAttendees?: boolean | null | undefined;
                seatsShowAvailabilityCount?: boolean | null | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | null | undefined;
                price?: number | undefined;
                currency?: string | undefined;
                slotInterval?: number | null | undefined;
                successRedirectUrl?: string | null | undefined;
                forwardParamsSuccessRedirect?: boolean | null | undefined;
                bookingLimits?: {
                    PER_DAY?: number | undefined;
                    PER_WEEK?: number | undefined;
                    PER_MONTH?: number | undefined;
                    PER_YEAR?: number | undefined;
                } | null | undefined;
                durationLimits?: {
                    PER_DAY?: number | undefined;
                    PER_WEEK?: number | undefined;
                    PER_MONTH?: number | undefined;
                    PER_YEAR?: number | undefined;
                } | null | undefined;
                isInstantEvent?: boolean | undefined;
                instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
                instantMeetingScheduleId?: number | null | undefined;
                assignAllTeamMembers?: boolean | undefined;
                useEventTypeDestinationCalendarEmail?: boolean | undefined;
                isRRWeightsEnabled?: boolean | undefined;
                eventTypeColor?: {
                    lightEventTypeColor: string;
                    darkEventTypeColor: string;
                } | null | undefined;
                rescheduleWithSameRoundRobinHost?: boolean | undefined;
                secondaryEmailId?: number | null | undefined;
                hosts?: {
                    userId: number;
                    profileId?: number | null | undefined;
                    isFixed?: boolean | undefined;
                    priority?: number | null | undefined;
                    weight?: number | null | undefined;
                }[] | undefined;
                children?: {
                    hidden: boolean;
                    owner: {
                        name: string;
                        id: number;
                        email: string;
                        eventTypeSlugs: string[];
                    };
                }[] | undefined;
                instantMeetingSchedule?: number | null | undefined;
                aiPhoneCallConfig?: {
                    enabled: boolean;
                    templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                    generalPrompt: string;
                    beginMessage: string | null;
                    yourPhoneNumber?: string | undefined;
                    numberToCall?: string | undefined;
                    guestName?: string | null | undefined;
                    guestEmail?: string | null | undefined;
                    guestCompany?: string | null | undefined;
                } | undefined;
                calAiPhoneScript?: string | undefined;
            };
            output: {
                eventType: {
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        parentId: number | null;
                        parent: {
                            slug: string | null;
                        } | null;
                        members: {
                            user: {
                                name: string | null;
                                id: number;
                                email: string;
                                eventTypes: {
                                    slug: string;
                                }[];
                            };
                            role: import(".prisma/client").$Enums.MembershipRole;
                            accepted: boolean;
                        }[];
                    } | null;
                    title: string;
                    isRRWeightsEnabled: boolean;
                    children: {
                        userId: number | null;
                    }[];
                    workflows: {
                        workflowId: number;
                    }[];
                    aiPhoneCallConfig: {
                        enabled: boolean;
                        generalPrompt: string | null;
                        beginMessage: string | null;
                        llmId: string | null;
                    } | null;
                };
            };
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                users?: number[] | undefined;
            };
            output: {
                id: number;
            };
        }>;
        duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                users?: number[] | undefined;
                length: number;
                title: string;
                description: string;
                slug: string;
                teamId?: number | null | undefined;
            };
            output: {
                eventType: {
                    length: number;
                    id: number;
                    userId: number | null;
                    title: string;
                    description: string | null;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    assignAllTeamMembers: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                };
            };
        }>;
        bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                eventTypes: {
                    logo: string | undefined;
                    id: number;
                    title: string;
                    locations: import(".prisma/client").Prisma.JsonValue;
                }[];
            };
        }>;
        bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
        }>;
    }>;
    availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                schedules: {
                    isDefault: boolean;
                    availability: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                        date: Date | null;
                    }[];
                    name: string;
                    id: number;
                    timeZone: string | null;
                }[];
            };
        }>;
        user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                username: string;
                dateFrom: string;
                dateTo: string;
                eventTypeId?: string | number | undefined;
                withSource?: boolean | undefined;
            };
            output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats: {
                    uid: string;
                    startTime: Date;
                    _count: {
                        attendees: number;
                    };
                }[] | null;
                datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
            };
        }>;
        listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                limit: number;
                loggedInUsersTz: string;
                cursor?: number | null | undefined;
                teamId?: number | undefined;
            };
            output: {
                rows: ({
                    id: number;
                    organizationId: number | null;
                    name: string | null;
                    username: string | null;
                    email: string;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    defaultScheduleId: number;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    avatarUrl?: undefined;
                    profile?: undefined;
                } | {
                    id: number;
                    username: string | null;
                    email: string;
                    avatarUrl: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    organizationId: number | null;
                    name: string | null;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    defaultScheduleId: number;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                })[];
                nextCursor: number | undefined;
                meta: {
                    totalRowCount: number;
                };
            };
        }>;
        schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    scheduleId?: number | undefined;
                    isManagedEventType?: boolean | undefined;
                };
                output: {
                    id: number;
                    name: string;
                    isManaged: boolean;
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    schedule: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                        date: Date | null;
                    }[];
                    availability: {
                        end: Date;
                        userId?: number | null | undefined;
                        start: Date;
                    }[][];
                    timeZone: string;
                    dateOverrides: {
                        ranges: import("@calcom/types/schedule").TimeRange[];
                    }[];
                    isDefault: boolean;
                    isLastSchedule: boolean;
                    readOnly: boolean;
                };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    schedule?: {
                        end: Date;
                        start: Date;
                    }[][] | undefined;
                    eventTypeId?: number | undefined;
                };
                output: {
                    schedule: {
                        name: string;
                        id: number;
                        userId: number;
                        timeZone: string | null;
                    };
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    scheduleId: number;
                };
                output: void;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    scheduleId: number;
                    timeZone?: string | undefined;
                    name?: string | undefined;
                    isDefault?: boolean | undefined;
                    schedule?: {
                        end: Date;
                        start: Date;
                    }[][] | undefined;
                    dateOverrides?: {
                        end: Date;
                        start: Date;
                    }[] | undefined;
                };
                output: {
                    schedule: {
                        name: string;
                        id: number;
                        userId: number;
                    };
                    isDefault: boolean;
                    availability?: undefined;
                    timeZone?: undefined;
                    prevDefaultId?: undefined;
                    currentDefaultId?: undefined;
                } | {
                    schedule: {
                        eventType: {
                            id: number;
                            eventName: string | null;
                        }[];
                        availability: {
                            id: number;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                            date: Date | null;
                        }[];
                        name: string;
                        id: number;
                        userId: number;
                        timeZone: string | null;
                    };
                    availability: import("@calcom/types/schedule").Schedule;
                    timeZone: string;
                    isDefault: boolean;
                    prevDefaultId: number | null;
                    currentDefaultId: number | null;
                };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    scheduleId: number;
                };
                output: {
                    schedule: {
                        name: string;
                        id: number;
                        userId: number;
                        timeZone: string | null;
                    };
                };
            }>;
            getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    userId?: number | undefined;
                };
                output: {
                    hasDefaultSchedule: boolean;
                    id: number;
                    name: string;
                    isManaged: boolean;
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    schedule: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                        date: Date | null;
                    }[];
                    availability: {
                        end: Date;
                        userId?: number | null | undefined;
                        start: Date;
                    }[][];
                    timeZone: string;
                    dateOverrides: {
                        ranges: import("@calcom/types/schedule").TimeRange[];
                    }[];
                    isDefault: boolean;
                    isLastSchedule: boolean;
                    readOnly: boolean;
                } | {
                    id: number;
                    name: string;
                    availability: never[][];
                    dateOverrides: never[];
                    timeZone: string;
                    workingHours: never[];
                    isDefault: boolean;
                    hasDefaultSchedule: boolean;
                };
            }>;
            getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                    eventSlug: string;
                };
                output: {
                    id: number;
                    name: string;
                    isManaged: boolean;
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    schedule: {
                        id: number;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                        date: Date | null;
                    }[];
                    availability: {
                        end: Date;
                        userId?: number | null | undefined;
                        start: Date;
                    }[][];
                    timeZone: string;
                    dateOverrides: {
                        ranges: import("@calcom/types/schedule").TimeRange[];
                    }[];
                    isDefault: boolean;
                    isLastSchedule: boolean;
                    readOnly: boolean;
                } | {
                    id: number;
                    name: string;
                    availability: never[][];
                    dateOverrides: never[];
                    timeZone: string;
                    workingHours: never[];
                    isDefault: boolean;
                };
            }>;
            bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    eventTypeIds: number[];
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
        }>;
        calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                dateFrom: string | null;
                dateTo: string | null;
                loggedInUsersTz: string;
                calendarsToLoad: {
                    credentialId: number;
                    externalId: string;
                }[];
            };
            output: import("@calcom/types/Calendar").EventBusyDate[];
        }>;
    }>;
    teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                isOrg?: boolean | undefined;
            };
            output: {
                members: {
                    username: string | null;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    organizationId: number | null;
                    organization: any;
                    accepted: boolean;
                    disableImpersonation: boolean;
                    subteams: (string | null)[] | null;
                    bookerUrl: string;
                    connectedApps: {
                        name: any;
                        logo: any;
                        app: {
                            slug: string;
                            categories: import(".prisma/client").$Enums.AppCategories[];
                        } | null;
                        externalId: string | null;
                    }[] | null;
                    name: string | null;
                    id: number;
                    email: string;
                    bio: string | null;
                    teams: {
                        team: {
                            id: number;
                            slug: string | null;
                        };
                    }[];
                    avatarUrl: string | null;
                    nonProfileUsername: string | null;
                }[];
                safeBio: string;
                membership: {
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                };
                inviteToken: {
                    token: string;
                    identifier: string;
                    expires: Date;
                    expiresInDays: number | null;
                } | undefined;
                metadata: {
                    requestedSlug?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                };
                eventTypes: {
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    users: ({
                        name: string | null;
                        id: number;
                        email: string;
                        bio: string | null;
                        credentials: {
                            app: {
                                slug: string;
                                categories: import(".prisma/client").$Enums.AppCategories[];
                            } | null;
                            destinationCalendars: {
                                externalId: string;
                            }[];
                        }[];
                        teams: {
                            team: {
                                id: number;
                                slug: string | null;
                            };
                        }[];
                        username: string | null;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                    length: number;
                    id: number;
                    title: string;
                    description: string | null;
                    slug: string;
                    hidden: boolean;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    hosts: {
                        user: {
                            name: string | null;
                            id: number;
                            email: string;
                            bio: string | null;
                            credentials: {
                                app: {
                                    slug: string;
                                    categories: import(".prisma/client").$Enums.AppCategories[];
                                } | null;
                                destinationCalendars: {
                                    externalId: string;
                                }[];
                            }[];
                            teams: {
                                team: {
                                    id: number;
                                    slug: string | null;
                                };
                            }[];
                            username: string | null;
                            avatarUrl: string | null;
                        };
                    }[];
                }[] | null;
                logo?: string | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    logoUrl: string | null;
                    isPrivate: boolean;
                    isOrganization: boolean;
                } | null;
                children: {
                    name: string;
                    slug: string | null;
                }[];
                logoUrl: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                isOrganization: boolean;
            };
        }>;
        getMinimal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                isOrg?: boolean | undefined;
            };
            output: {
                membership: {
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                };
                inviteToken: {
                    token: string;
                    identifier: string;
                    expires: Date;
                    expiresInDays: number | null;
                } | undefined;
                metadata: {
                    requestedSlug?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                };
                logo?: string | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    logoUrl: string | null;
                    isPrivate: boolean;
                    isOrganization: boolean;
                } | null;
                children: {
                    name: string;
                    slug: string | null;
                }[];
                logoUrl: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                isOrganization: boolean;
            };
        }>;
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                includeOrgs?: boolean | undefined;
            } | undefined;
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken: {
                    id: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    secondaryEmailId: number | null;
                    token: string;
                    identifier: string;
                    expires: Date;
                    expiresInDays: number | null;
                } | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
            }[];
        }>;
        listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken: {
                    id: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    secondaryEmailId: number | null;
                    token: string;
                    identifier: string;
                    expires: Date;
                    expiresInDays: number | null;
                } | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
            }[];
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name: string;
                slug: string;
                logo?: string | null | undefined;
            };
            output: {
                url: string;
                message: string;
                team: null;
            } | {
                url: string;
                message: string;
                team: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            };
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                bio?: string | undefined;
                name?: string | undefined;
                logo?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                isPrivate?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
            };
            output: {
                logoUrl: string | null;
                name: string;
                bio: string | null;
                slug: string | null;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
            } | undefined;
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
            };
            output: void;
        }>;
        removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamIds: number[];
                memberIds: number[];
                isOrg?: boolean | undefined;
            };
            output: void;
        }>;
        inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
                language: string;
                usernameOrEmail: (string | (string | {
                    email: string;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                })[]) & (string | (string | {
                    email: string;
                    role: "ADMIN" | "MEMBER" | "OWNER";
                })[] | undefined);
                role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
            };
            output: {
                usernameOrEmail: string | string[];
                numUsersInvited: number;
            };
        }>;
        acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
                accept: boolean;
            };
            output: void;
        }>;
        changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
                role: "ADMIN" | "MEMBER" | "OWNER";
                memberId: number;
            };
            output: void;
        }>;
        getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                dateFrom: string;
                dateTo: string;
                memberId: number;
                timezone: string;
            };
            output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats: {
                    uid: string;
                    startTime: Date;
                    _count: {
                        attendees: number;
                    };
                }[] | null;
                datesOutOfOffice: import("@calcom/core/getUserAvailability").IOutOfOfficeData;
            };
        }>;
        getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                memberId: number;
            };
            output: {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            } | null;
        }>;
        updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
                disableImpersonation: boolean;
                memberId: number;
            };
            output: {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            };
        }>;
        publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
            };
            output: {
                url: string;
                message: string;
            };
        }>;
        getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
                team: {
                    children: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    }[];
                } & {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            } & {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            })[];
        }>;
        listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamIds?: number[] | undefined;
            };
            output: ({
                name: string | null;
                id: number;
                username: string | null;
                avatarUrl: string | null;
            } & {
                accepted: boolean;
            } & {
                nonProfileUsername: string | null;
                profile: import("@calcom/types/UserProfile").UserProfile;
            })[];
        }>;
        lazyLoadMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                limit?: number | undefined;
                searchTerm?: string | undefined;
                cursor?: number | null | undefined;
            };
            output: {
                members: {
                    username: string | null;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    organizationId: number | null;
                    organization: any;
                    accepted: boolean;
                    disableImpersonation: boolean;
                    bookerUrl: string;
                    name: string | null;
                    id: number;
                    email: string;
                    bio: string | null;
                    avatarUrl: string | null;
                    nonProfileUsername: string | null;
                }[];
                nextCursor: number | undefined;
            };
        }>;
        getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                userIds: number[];
            };
            output: Record<number, {
                name: string | null;
                logo: string | null;
                externalId: string | null;
                app: {
                    slug: string;
                    categories: import("@calcom/prisma/enums").AppCategories[];
                } | null;
            }[]>;
        }>;
        hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                hasTeamPlan: boolean;
            };
        }>;
        listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            }[];
        }>;
        createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
                token?: string | undefined;
            };
            output: {
                token: string;
                inviteLink: string;
            };
        }>;
        setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
                expiresInDays?: number | undefined;
            };
            output: void;
        }>;
        deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: void;
        }>;
        inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                token: string;
            };
            output: string;
        }>;
        hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                memberId: number;
            };
            output: boolean;
        }>;
        resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
                teamId: number;
                language: string;
                isOrg?: boolean | undefined;
            };
            output: {
                email: string;
                teamId: number;
                language: string;
                isOrg: boolean;
            };
        }>;
        roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: number;
                teamId: number;
            };
            output: void;
        }>;
        checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                value: string;
                teamId: number;
            };
            output: boolean;
        }>;
    }>;
    timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                CalComVersion: string;
            };
            output: {
                city: string;
                timezone: string;
                pop: number;
            }[];
        }>;
    }>;
    organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name: string;
                slug: string;
                orgOwnerEmail: string;
                language?: string | undefined;
                seats?: number | undefined;
                pricePerSeat?: number | undefined;
                isPlatform?: boolean | undefined;
                billingPeriod?: import("./organizations/create.schema").BillingPeriod | undefined;
            };
            output: {
                userId: number;
                email: string;
                organizationId: number;
                upId: string;
            };
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name?: string | undefined;
                orgId?: string | number | undefined;
                bio?: string | undefined;
                logoUrl?: string | null | undefined;
                calVideoLogo?: string | null | undefined;
                banner?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                timeFormat?: number | undefined;
                metadata?: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | undefined;
                lockEventTypeCreation?: boolean | undefined;
                lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                adminGetsNoSlotsNotification?: boolean | undefined;
            };
            output: {
                update: boolean;
                userId: number;
                data: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            };
        }>;
        verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                code: string;
                email: string;
            };
            output: true;
        }>;
        createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                orgId: number;
                teamNames: string[];
                moveTeams: {
                    id: number;
                    newSlug: string | null;
                    shouldMove: boolean;
                }[];
            };
            output: {
                duplicatedSlugs: string[];
            };
        }>;
        listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                timeFormat: number | null;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                canAdminImpersonate: boolean;
                organizationSettings: {
                    lockEventTypeCreationForUsers: boolean | undefined;
                    adminGetsNoSlotsNotification: boolean | undefined;
                };
                user: {
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                };
            };
        }>;
        checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
                team: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            } & {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            })[];
        }>;
        publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                url: string;
                message: string;
            };
        }>;
        setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                newPassword: string;
            };
            output: {
                update: boolean;
            };
        }>;
        getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamIdToExclude?: number | undefined;
                accepted?: boolean | undefined;
                distinctUser?: boolean | undefined;
            };
            output: {
                user: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    completedOnboarding: boolean;
                };
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            }[];
        }>;
        listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | undefined;
            };
            output: {
                canUserGetMembers: boolean;
                rows: never[];
                meta: {
                    totalRowCount: number;
                };
                nextCursor?: undefined;
            } | {
                rows: {
                    id: number;
                    username: string | null;
                    email: string;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                    disableImpersonation: boolean;
                    completedOnboarding: boolean;
                    avatarUrl: string | null;
                    teams: ({
                        id: number;
                        name: string;
                        slug: string | null;
                    } | undefined)[];
                }[];
                nextCursor: number | undefined;
                meta: {
                    totalRowCount: number;
                };
                canUserGetMembers?: undefined;
            };
        }>;
        getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                slug: string;
                fullDomain: string;
                domainSuffix: string;
                name: string;
                logoUrl: string | null;
                isPlatform: boolean;
            } | null;
        }>;
        getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                userId?: number | undefined;
            };
            output: {
                teams: {
                    accepted: boolean;
                    name: string;
                    id: number;
                }[];
                role: import(".prisma/client").$Enums.MembershipRole;
                name: string | null;
                id: number;
                email: string;
                timeZone: string;
                bio: string | null;
                schedules: {
                    name: string;
                    id: number;
                }[];
                username: string | null;
                avatarUrl: string | null;
            };
        }>;
        updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
                timeZone: string;
                role: "ADMIN" | "MEMBER" | "OWNER";
                username?: string | undefined;
                bio?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                avatar?: string | undefined;
                attributeOptions?: {
                    userId: number;
                    attributes: {
                        id: string;
                        options?: {
                            value: string;
                            label?: string | undefined;
                        }[] | undefined;
                        value?: string | undefined;
                    }[];
                } | undefined;
            };
            output: {
                success: boolean;
            };
        }>;
        getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                name: string;
                id: number;
            }[];
        }>;
        addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userIds: number[];
                teamIds: number[];
            };
            output: {
                success: boolean;
                invitedTotalUsers: number;
            };
        }>;
        addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userIds: number[];
                teamIds: number[];
                eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
        }>;
        removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userIds: number[];
                eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
        }>;
        bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userIds: number[];
            };
            output: {
                success: boolean;
                usersDeleted: number;
            };
        }>;
        listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
                limit: number;
                query?: string | undefined;
                offset?: number | undefined;
                cursor?: number | null | undefined;
            };
            output: {
                rows: {
                    bookerUrl: string;
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                    } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                    id: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[];
                nextCursor: number | null | undefined;
            };
        }>;
        getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number;
            };
            output: {
                safeBio: string;
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                slug: string | null;
                parent: {
                    id: number;
                    slug: string | null;
                } | null;
                logoUrl: string | null;
                bio: string | null;
                isPrivate: boolean;
            };
        }>;
        listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                name: string;
                id: number;
                createdAt: Date;
                metadata: import(".prisma/client").Prisma.JsonValue;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                timeFormat: number | null;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
            }[];
        }>;
        deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number;
            };
            output: void;
        }>;
        adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                organizationSettings: {
                    id: number;
                    organizationId: number;
                    isOrganizationConfigured: boolean;
                    isOrganizationVerified: boolean;
                    orgAutoAcceptEmail: string;
                    lockEventTypeCreationForUsers: boolean;
                    adminGetsNoSlotsNotification: boolean;
                    isAdminReviewed: boolean;
                    isAdminAPIEnabled: boolean;
                } | null;
                name: string;
                id: number;
                slug: string | null;
                members: {
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                    };
                }[];
            }[];
        }>;
        adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id: number;
            };
            output: {
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                organizationSettings: {
                    isOrganizationConfigured: boolean;
                    isOrganizationVerified: boolean;
                    orgAutoAcceptEmail: string;
                } | null;
                name: string;
                id: number;
                slug: string | null;
                isOrganization: boolean;
                members: {
                    user: {
                        name: string | null;
                        id: number;
                        email: string;
                    };
                }[];
            };
        }>;
        adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
                name?: string | undefined;
                slug?: string | null | undefined;
                organizationSettings?: {
                    isOrganizationVerified?: boolean | undefined;
                    isOrganizationConfigured?: boolean | undefined;
                    isAdminReviewed?: boolean | undefined;
                    orgAutoAcceptEmail?: string | undefined;
                    isAdminAPIEnabled?: boolean | undefined;
                } | undefined;
            };
            output: {
                name: string;
                id: number;
                createdAt: Date;
                metadata: import(".prisma/client").Prisma.JsonValue;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                bio: string | null;
                hideBranding: boolean;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                bannerUrl: string | null;
                timeFormat: number | null;
                weekStart: string;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
            };
        }>;
        adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                orgId: number;
            };
            output: {
                ok: boolean;
                message: string;
            };
        }>;
        adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                orgId: number;
            };
            output: {
                ok: boolean;
                message: string;
            };
        }>;
        createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                eventTypeId: number;
                templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                yourPhoneNumber: string;
                numberToCall: string;
                calApiKey: string;
                enabled?: boolean | undefined;
                schedulerName?: string | null | undefined;
                guestName?: string | undefined;
                guestEmail?: string | undefined;
                guestCompany?: string | undefined;
                beginMessage?: string | undefined;
                generalPrompt?: string | undefined;
            };
            output: import("zod").objectOutputType<{
                call_id: import("zod").ZodString;
                agent_id: import("zod").ZodString;
            }, import("zod").ZodTypeAny, "passthrough">;
        }>;
    }>;
    webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                appId?: string | undefined;
                eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
            } | undefined;
            output: {
                id: string;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
            }[];
        }>;
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                webhookId?: string | undefined;
            };
            output: {
                id: string;
                userId: number | null;
                teamId: number | null;
                secret: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
            };
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[];
                appId?: string | null | undefined;
                secret?: string | null | undefined;
                platform?: boolean | undefined;
            };
            output: {
                id: string;
                userId: number | null;
                teamId: number | null;
                eventTypeId: number | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                createdAt: Date;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                appId: string | null;
                secret: string | null;
                platform: boolean;
            };
        }>;
        edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                payloadTemplate: string | null;
                subscriberUrl?: string | undefined;
                eventTriggers?: ("BOOKING_CREATED" | "BOOKING_PAYMENT_INITIATED" | "BOOKING_PAID" | "BOOKING_RESCHEDULED" | "BOOKING_REQUESTED" | "BOOKING_CANCELLED" | "BOOKING_REJECTED" | "BOOKING_NO_SHOW_UPDATED" | "FORM_SUBMITTED" | "MEETING_ENDED" | "MEETING_STARTED" | "RECORDING_READY" | "INSTANT_MEETING" | "RECORDING_TRANSCRIPTION_GENERATED" | "OOO_CREATED")[] | undefined;
                active?: boolean | undefined;
                appId?: string | null | undefined;
                secret?: string | null | undefined;
            };
            output: {
                id: string;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
            } | null;
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
            };
            output: {
                id: string;
            };
        }>;
        testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                type: string;
                url: string;
                secret?: string | undefined;
                payloadTemplate?: string | null | undefined;
            };
            output: {
                message?: string | undefined;
                ok: boolean;
                status: number;
            };
        }>;
        getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
            } | undefined;
            output: {
                webhookGroups: {
                    teamId?: number | null | undefined;
                    profile: {
                        slug: string | null;
                        name: string | null;
                        image?: string | undefined;
                    };
                    metadata?: {
                        readOnly: boolean;
                    } | undefined;
                    webhooks: {
                        id: string;
                        userId: number | null;
                        teamId: number | null;
                        eventTypeId: number | null;
                        platformOAuthClientId: string | null;
                        subscriberUrl: string;
                        payloadTemplate: string | null;
                        createdAt: Date;
                        active: boolean;
                        eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                        appId: string | null;
                        secret: string | null;
                        platform: boolean;
                    }[];
                }[];
                profiles: {
                    readOnly?: boolean | undefined;
                    slug: string | null;
                    name: string | null;
                    image?: string | undefined;
                    teamId: number | null | undefined;
                }[];
            };
        }>;
    }>;
    apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: string;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                note: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
            }[];
        }>;
        findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                appId?: string | undefined;
                teamId?: number | undefined;
            };
            output: {
                id: string;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                note: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
            }[];
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                note?: string | null | undefined;
                expiresAt?: Date | null | undefined;
                neverExpires?: boolean | undefined;
                appId?: string | null | undefined;
                teamId?: number | undefined;
            };
            output: string;
        }>;
        edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
                note?: string | null | undefined;
                expiresAt?: Date | undefined;
            };
            output: {
                id: string;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                note: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
            };
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
                eventTypeId?: number | undefined;
            };
            output: {
                id: string;
            };
        }>;
    }>;
    slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startTime: string;
                endTime: string;
                eventTypeId?: number | undefined;
                eventTypeSlug?: string | undefined;
                timeZone?: string | undefined;
                usernameList?: string[] | undefined;
                debug?: boolean | undefined;
                duration?: string | undefined;
                rescheduleUid?: string | null | undefined;
                isTeamEvent?: boolean | undefined;
                orgSlug?: string | undefined;
                teamMemberEmail?: string | null | undefined;
            };
            output: import("./slots/util").IGetAvailableSlots;
        }>;
        reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                eventTypeId: number;
                slotUtcStartDate: string;
                slotUtcEndDate: string;
                bookingUid?: string | undefined;
            };
            output: {
                uid: string;
            };
        }>;
        removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                uid: string | null;
            };
            output: void;
        }>;
    }>;
    workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
                userId?: number | undefined;
            } | undefined;
            output: {
                workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
            };
        }>;
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id: number;
            };
            output: {
                team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    isOrganization: boolean;
                    members: {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                } | null;
                name: string;
                id: number;
                userId: number | null;
                teamId: number | null;
                steps: {
                    id: number;
                    template: import(".prisma/client").$Enums.WorkflowTemplates;
                    stepNumber: number;
                    action: import(".prisma/client").$Enums.WorkflowActions;
                    workflowId: number;
                    sendTo: string | null;
                    reminderBody: string | null;
                    emailSubject: string | null;
                    numberRequired: boolean | null;
                    sender: string | null;
                    numberVerificationPending: boolean;
                    includeCalendarEvent: boolean;
                }[];
                time: number | null;
                isActiveOnAll: boolean;
                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                activeOn: {
                    eventType: {
                        length: number;
                        id: number;
                        userId: number | null;
                        title: string;
                        description: string | null;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresBookerEmailVerification: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        assignAllTeamMembers: boolean;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                    };
                }[];
                activeOnTeams: {
                    team: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    };
                }[];
            } | null;
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                workflow: {
                    id: number;
                    position: number;
                    name: string;
                    userId: number | null;
                    teamId: number | null;
                    isActiveOnAll: boolean;
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    time: number | null;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                };
            };
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: number;
            };
            output: {
                id: number;
            };
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name: string;
                id: number;
                steps: {
                    id: number;
                    template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                    stepNumber: number;
                    action: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                    workflowId: number;
                    sendTo: string | null;
                    reminderBody: string | null;
                    emailSubject: string | null;
                    numberRequired: boolean | null;
                    sender: string | null;
                    includeCalendarEvent: boolean;
                    senderName: string | null;
                }[];
                time: number | null;
                trigger: "BEFORE_EVENT" | "EVENT_CANCELLED" | "NEW_EVENT" | "AFTER_EVENT" | "RESCHEDULE_EVENT";
                timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                activeOn: number[];
                isActiveOnAll?: boolean | undefined;
            };
            output: {
                workflow: ({
                    team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        members: {
                            id: number;
                            userId: number;
                            teamId: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            disableImpersonation: boolean;
                            accepted: boolean;
                        }[];
                    } | null;
                    steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        stepNumber: number;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                    }[];
                    activeOn: {
                        eventType: {
                            length: number;
                            id: number;
                            userId: number | null;
                            title: string;
                            description: string | null;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string | null;
                            slug: string;
                            position: number;
                            locations: import(".prisma/client").Prisma.JsonValue;
                            offsetStart: number;
                            hidden: boolean;
                            profileId: number | null;
                            teamId: number | null;
                            eventName: string | null;
                            parentId: number | null;
                            bookingFields: import(".prisma/client").Prisma.JsonValue;
                            periodType: import(".prisma/client").$Enums.PeriodType;
                            periodStartDate: Date | null;
                            periodEndDate: Date | null;
                            periodDays: number | null;
                            periodCountCalendarDays: boolean | null;
                            lockTimeZoneToggleOnBookingPage: boolean;
                            requiresConfirmation: boolean;
                            requiresConfirmationWillBlockSlot: boolean;
                            requiresBookerEmailVerification: boolean;
                            recurringEvent: import(".prisma/client").Prisma.JsonValue;
                            disableGuests: boolean;
                            hideCalendarNotes: boolean;
                            minimumBookingNotice: number;
                            beforeEventBuffer: number;
                            afterEventBuffer: number;
                            seatsPerTimeSlot: number | null;
                            onlyShowFirstAvailableSlot: boolean;
                            seatsShowAttendees: boolean | null;
                            seatsShowAvailabilityCount: boolean | null;
                            schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                            scheduleId: number | null;
                            price: number;
                            currency: string;
                            slotInterval: number | null;
                            successRedirectUrl: string | null;
                            forwardParamsSuccessRedirect: boolean | null;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue;
                            durationLimits: import(".prisma/client").Prisma.JsonValue;
                            isInstantEvent: boolean;
                            instantMeetingExpiryTimeOffsetInSeconds: number;
                            instantMeetingScheduleId: number | null;
                            assignAllTeamMembers: boolean;
                            useEventTypeDestinationCalendarEmail: boolean;
                            isRRWeightsEnabled: boolean;
                            eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                            rescheduleWithSameRoundRobinHost: boolean;
                            secondaryEmailId: number | null;
                        };
                    }[];
                    activeOnTeams: {
                        team: {
                            name: string;
                            id: number;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        };
                    }[];
                } & {
                    name: string;
                    id: number;
                    userId: number | null;
                    position: number;
                    teamId: number | null;
                    time: number | null;
                    isActiveOnAll: boolean;
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                }) | null;
            };
        }>;
        activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                eventTypeId: number;
                workflowId: number;
            };
            output: void;
        }>;
        sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                phoneNumber: string;
            };
            output: void;
        }>;
        verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                code: string;
                phoneNumber: string;
                teamId?: number | undefined;
            };
            output: boolean;
        }>;
        getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: {
                id: number;
                userId: number | null;
                teamId: number | null;
                phoneNumber: string;
            }[];
        }>;
        getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | undefined;
            };
            output: string[];
        }>;
        verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                code: string;
                email: string;
                teamId?: number | undefined;
            };
            output: true;
        }>;
        getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                label: string;
                value: "EMAIL_HOST" | "EMAIL_ATTENDEE" | "SMS_ATTENDEE" | "SMS_NUMBER" | "EMAIL_ADDRESS" | "WHATSAPP_ATTENDEE" | "WHATSAPP_NUMBER";
                needsTeamsUpgrade: boolean;
            }[];
        }>;
        filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                filters?: {
                    teamIds?: number[] | undefined;
                    userIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                } | undefined;
            } | null | undefined;
            output: {
                filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                totalCount: number;
            } | undefined;
        }>;
        getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                eventType: {
                    id: number;
                    metadata: {
                        smartContractAddress?: string | undefined;
                        blockchainId?: number | undefined;
                        multipleDuration?: number[] | undefined;
                        giphyThankYouPage?: string | undefined;
                        apps?: {
                            alby?: {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                            } | undefined;
                            basecamp3?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            campsite?: {} | undefined;
                            closecom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            giphy?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                            } | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            hubspot?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            metapixel?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            "mock-payment-app"?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            office365calendar?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            office365video?: {
                                client_id: string;
                                client_secret: string;
                            } | undefined;
                            paypal?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            "pipedrive-crm"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            plausible?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                            } | undefined;
                            posthog?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                            } | undefined;
                            qr_code?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "routing-forms"?: any;
                            salesforce?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                            } | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?: {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                            } | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?: {
                                trackingId: string;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            "event-type-app-card"?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            twipla?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                            } | undefined;
                            umami?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                            } | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?: {
                                isSunrise: boolean;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?: {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                            } | undefined;
                            zoomvideo?: {} | undefined;
                        } | undefined;
                        additionalNotesRequired?: boolean | undefined;
                        disableSuccessPage?: boolean | undefined;
                        disableStandardEmails?: {
                            all?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                            confirmation?: {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                            } | undefined;
                        } | undefined;
                        managedEventConfig?: {
                            unlockedFields?: {
                                length?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                title?: true | undefined;
                                description?: true | undefined;
                                customInputs?: true | undefined;
                                metadata?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                users?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                children?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                _count?: true | undefined;
                            } | undefined;
                        } | undefined;
                        requiresConfirmationThreshold?: {
                            time: number;
                            unit: "days" | "milliseconds" | "seconds" | "minutes" | "hours" | "months" | "years" | "dates";
                        } | undefined;
                        config?: {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                        } | undefined;
                        bookerLayouts?: {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        } | null | undefined;
                    } | null;
                    teamId?: number | null | undefined;
                    parent?: {
                        id: number | null;
                        teamId: number | null;
                    } | null | undefined;
                    userId?: number | null | undefined;
                };
            };
            output: import("@calcom/ee/workflows/lib/types").Workflow[];
        }>;
    }>;
    saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number | null;
            };
            output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number | null;
                encodedRawMetadata: string;
            };
            output: import("@boxyhq/saml-jackson").SAMLSSORecord;
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number | null;
            };
            output: void;
        }>;
        updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                teamId: number | null;
                clientId: string;
                clientSecret: string;
                wellKnownUrl: string;
            };
            output: import("@boxyhq/saml-jackson").OIDCSSORecord;
        }>;
    }>;
    dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name: string;
                organizationId: number | null;
                provider: string;
            };
            output: import("@boxyhq/saml-jackson").Directory;
        }>;
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                organizationId: number | null;
            };
            output: import("@boxyhq/saml-jackson").Directory | null;
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                organizationId: number | null;
                directoryId: string;
            };
            output: null;
        }>;
        teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                    teamGroupMapping: {
                        id: number;
                        name: string;
                        slug: string | null;
                        directoryId: string;
                        groupNames: string[];
                    }[];
                };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    name: string;
                    teamId: number;
                    directoryId: string;
                };
                output: {
                    newGroupName: string;
                };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    teamId: number;
                    groupName: string;
                };
                output: {
                    deletedGroupName: string;
                };
            }>;
        }>;
    }>;
    insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T_2 = unknown>(string: string) => T_2;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I_1, O_1 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_1, O_1>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                memberUserId?: number | undefined;
                userId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                empty: boolean;
                created: {
                    count: number;
                    deltaPrevious: number;
                };
                completed: {
                    count: number;
                    deltaPrevious: number;
                };
                rescheduled: {
                    count: number;
                    deltaPrevious: number;
                };
                cancelled: {
                    count: number;
                    deltaPrevious: number;
                };
                rating: {
                    count: number;
                    deltaPrevious: number;
                };
                no_show: {
                    count: number;
                    deltaPrevious: number;
                };
                csat: {
                    count: number;
                    deltaPrevious: number;
                };
                previousRange: {
                    startDate: string;
                    endDate: string;
                };
            };
        }>;
        eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                timeView: "day" | "month" | "year" | "week";
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                memberUserId?: number | undefined;
                userId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                Month: string;
                Created: number;
                Completed: number;
                Rescheduled: number;
                Cancelled: number;
                "No-Show (Host)": number;
            }[];
        }>;
        popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                memberUserId?: number | undefined;
                teamId?: number | null | undefined;
                userId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: ({
                eventTypeId?: undefined;
                eventTypeName?: undefined;
                count?: undefined;
            } | {
                eventTypeId: number | null;
                eventTypeName: string;
                count: number;
            })[];
        }>;
        averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                memberUserId?: number | undefined;
                teamId?: number | null | undefined;
                userId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                Date: string;
                Average: number;
            }[];
        }>;
        membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                count: number;
            }[];
        }>;
        membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                count: number;
            }[];
        }>;
        teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
        }>;
        userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId: number | null;
                isAll: boolean | null;
            };
            output: {
                id: number;
                name: string | null;
                email: string;
                username: string | null;
                avatarUrl: string | null;
            }[];
        }>;
        eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                title: string;
                id: number;
                slug: string;
                teamId: number | null;
                team: {
                    name: string;
                } | null;
            }[];
        }>;
        recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                rating: number | null;
                feedback: string | null;
            }[];
        }>;
        membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                count: number;
            }[];
        }>;
        membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
            }[];
        }>;
        membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                eventTypeId?: number | undefined;
                isAll?: boolean | undefined;
            };
            output: {
                userId: number | null;
                user: Omit<{
                    id: number;
                    name: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                }, "avatarUrl"> & {
                    avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
            }[];
        }>;
        rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
            };
            output: {
                data: string;
                filename: string;
            };
        }>;
    }>;
    payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                bookingId: number;
            };
            output: {
                id: number;
                uid: string;
                appId: string | null;
                bookingId: number;
                amount: number;
                fee: number;
                currency: string;
                success: boolean;
                refunded: boolean;
                data: import(".prisma/client").Prisma.JsonValue;
                externalId: string;
                paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
            };
        }>;
    }>;
    appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T_3 = unknown>(string: string) => T_3;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1_2 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_2;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I_2, O_2 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_2, O_2>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../../createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
                stringify: (object: any) => string;
                parse: <T_4 = unknown>(string: string) => T_4;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1_3 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_3;
                registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
                registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
                registerCustom: <I_3, O_3 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_3, O_3>, "name">, name: string) => void;
                allowErrorProps: (...props: string[]) => void;
            };
        }>, {
            response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                    formFillerId: string;
                    formId: string;
                    response: Record<string, {
                        value: (string | number | string[]) & (string | number | string[] | undefined);
                        label: string;
                    }>;
                };
                output: {
                    id: number;
                    createdAt: Date;
                    formFillerId: string;
                    formId: string;
                    response: import(".prisma/client").Prisma.JsonValue;
                };
            }>;
        }>;
        forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                filters?: {
                    teamIds?: number[] | undefined;
                    userIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                } | undefined;
            } | null | undefined;
            output: {
                filtered: {
                    form: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                        team: ({
                            members: {
                                id: number;
                                userId: number;
                                teamId: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                disableImpersonation: boolean;
                                accepted: boolean;
                            }[];
                        } & {
                            id: number;
                            name: string;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            theme: string | null;
                            createdAt: Date;
                            timeZone: string;
                            slug: string | null;
                            parentId: number | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            timeFormat: number | null;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                        }) | null;
                        _count: {
                            responses: number;
                        };
                    } & {
                        id: string;
                        name: string;
                        description: string | null;
                        routes: import(".prisma/client").Prisma.JsonValue;
                        fields: import(".prisma/client").Prisma.JsonValue;
                        position: number;
                        disabled: boolean;
                        userId: number;
                        createdAt: Date;
                        updatedAt: Date;
                        teamId: number | null;
                        settings: import(".prisma/client").Prisma.JsonValue;
                    }>;
                    readOnly: boolean;
                }[];
                totalCount: number;
            };
        }>;
        formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id: string;
            };
            output: import("@calcom/app-store/routing-forms/types/types").SerializableForm<{
                team: {
                    name: string;
                    slug: string | null;
                } | null;
                _count: {
                    responses: number;
                };
            } & {
                id: string;
                name: string;
                description: string | null;
                routes: import(".prisma/client").Prisma.JsonValue;
                fields: import(".prisma/client").Prisma.JsonValue;
                position: number;
                disabled: boolean;
                userId: number;
                createdAt: Date;
                updatedAt: Date;
                teamId: number | null;
                settings: import(".prisma/client").Prisma.JsonValue;
            }> | null;
        }>;
        formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
                name: string;
                description?: string | null | undefined;
                disabled?: boolean | undefined;
                fields?: ({
                    type: string;
                    label: string;
                    id: string;
                    identifier?: string | undefined;
                    placeholder?: string | undefined;
                    selectText?: string | undefined;
                    required?: boolean | undefined;
                    deleted?: boolean | undefined;
                    options?: {
                        label: string;
                        id: string | null;
                    }[] | undefined;
                } | {
                    type: string;
                    label: string;
                    id: string;
                    routerId: string;
                    options?: {
                        label: string;
                        id: string | null;
                    }[] | undefined;
                    identifier?: string | undefined;
                    placeholder?: string | undefined;
                    selectText?: string | undefined;
                    required?: boolean | undefined;
                    deleted?: boolean | undefined;
                })[] | undefined;
                routes?: ({
                    id: string;
                    queryValue: {
                        type: "group" | "switch_group";
                        id?: string | undefined;
                        children1?: any;
                        properties?: any;
                    };
                    action: {
                        type: "customPageMessage" | "externalRedirectUrl" | "eventTypeRedirectUrl";
                        value: string;
                    };
                    isFallback?: boolean | undefined;
                } | {
                    id: string;
                    isRouter: true;
                })[] | null | undefined;
                addFallback?: boolean | undefined;
                duplicateFrom?: string | null | undefined;
                teamId?: number | null | undefined;
                shouldConnect?: boolean | undefined;
                settings?: {
                    emailOwnerOnSubmission: boolean;
                    sendUpdatesTo?: number[] | undefined;
                    sendToAll?: boolean | undefined;
                } | null | undefined;
            };
            output: {
                id: string;
                name: string;
                description: string | null;
                routes: import(".prisma/client").Prisma.JsonValue;
                fields: import(".prisma/client").Prisma.JsonValue;
                position: number;
                disabled: boolean;
                userId: number;
                createdAt: Date;
                updatedAt: Date;
                teamId: number | null;
                settings: import(".prisma/client").Prisma.JsonValue;
            };
        }>;
        deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
        }>;
        report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                formId: string;
                jsonLogicQuery: {
                    logic: Record<string, any> | null;
                };
                cursor?: number | null | undefined;
            };
            output: {
                headers: string[];
                responses: string[][];
                nextCursor: number | null;
            };
        }>;
    }>;
    appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T_5 = unknown>(string: string) => T_5;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1_4 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_4;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I_4, O_4 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_4, O_4>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: any;
        }>;
        projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                projectId: string;
            };
            output: any;
        }>;
    }>;
    features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T_6 = unknown>(string: string) => T_6;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1_5 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_5;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I_5, O_5 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_5, O_5>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                slug: string;
                createdAt: Date | null;
                updatedAt: Date | null;
                enabled: boolean;
                lastUsedAt: Date | null;
                stale: boolean | null;
                updatedBy: number | null;
            }[];
        }>;
        map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: Partial<import("@calcom/features/flags/config").AppFlags>;
        }>;
    }>;
    appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                category: string;
            };
            output: ({
                name: string;
                slug: string;
                logo: string;
                title: string | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                description: string;
                keys: import(".prisma/client").Prisma.JsonObject | null;
                dirName: string;
                enabled: boolean;
                isTemplate: boolean | undefined;
            } | {
                name: string;
                slug: string;
                logo: string;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title: string | undefined;
                description: string;
                enabled: boolean;
                dirName: string;
                keys: Record<string, string> | null;
                isTemplate?: undefined;
            })[];
        }>;
        toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                slug: string;
                enabled: boolean;
            };
            output: boolean;
        }>;
        saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                type: string;
                slug: string;
                dirName: string;
                keys?: unknown;
                fromEnabled?: boolean | undefined;
            };
            output: void;
        }>;
        checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: boolean;
        }>;
        setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                slug: string;
            };
            output: void;
        }>;
        updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                key: {} & {
                    [k: string]: unknown;
                };
                credentialId: number;
            };
            output: boolean;
        }>;
        queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: string[] | undefined;
            output: {
                name: string;
                slug: string;
                installed: boolean;
            }[] | undefined;
        }>;
        checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                slug: string;
            };
            output: boolean;
        }>;
    }>;
    users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T_7 = unknown>(string: string) => T_7;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1_6 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1_6;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I_6, O_6 extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I_6, O_6>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                userId: number;
            };
            output: {
                user: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    organizationId: number | null;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                };
            };
        }>;
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                metadata: import(".prisma/client").Prisma.JsonValue;
                theme: string | null;
                id: number;
                name: string | null;
                email: string;
                organizationId: number | null;
                timeZone: string;
                username: string | null;
                locale: string | null;
                startTime: number;
                endTime: number;
                bio: string | null;
                hideBranding: boolean;
                brandColor: string | null;
                darkBrandColor: string | null;
                timeFormat: number | null;
                weekStart: string;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                emailVerified: Date | null;
                avatarUrl: string | null;
                bufferTime: number;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                disableImpersonation: boolean;
                locked: boolean;
                movedToProfileId: number | null;
                isPlatformManaged: boolean;
            }[];
        }>;
        add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                email: string;
                timeZone: string;
                weekStart: string;
                identityProvider: "CAL" | "GOOGLE" | "SAML";
                role: "USER" | "ADMIN";
                theme?: string | null | undefined;
                name?: string | null | undefined;
                username?: string | null | undefined;
                locale?: string | null | undefined;
                bio?: string | null | undefined;
                timeFormat?: number | null | undefined;
                avatarUrl?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                allowDynamicBooking?: boolean | null | undefined;
            };
            output: {
                user: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    organizationId: number | null;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                };
                message: string;
            };
        }>;
        update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                theme?: string | null | undefined;
                name?: string | null | undefined;
                email?: string | undefined;
                timeZone?: string | undefined;
                username?: string | null | undefined;
                locale?: string | null | undefined;
                bio?: string | null | undefined;
                timeFormat?: number | null | undefined;
                weekStart?: string | undefined;
                avatarUrl?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
                allowDynamicBooking?: boolean | null | undefined;
                role?: "USER" | "ADMIN" | undefined;
            };
            output: {
                user: {
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    id: number;
                    name: string | null;
                    email: string;
                    organizationId: number | null;
                    timeZone: string;
                    username: string | null;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    bio: string | null;
                    hideBranding: boolean;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    emailVerified: Date | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    disableImpersonation: boolean;
                    locked: boolean;
                    movedToProfileId: number | null;
                    isPlatformManaged: boolean;
                };
                message: string;
            };
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
            };
            output: {
                message: string;
            };
        }>;
    }>;
    oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                clientId: string;
            };
            output: {
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
            } | null;
        }>;
        addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                name: string;
                logo: string;
                redirectUri: string;
            };
            output: {
                clientSecret: string;
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
            };
        }>;
        generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                clientId: string;
                scopes: string[];
                teamSlug?: string | undefined;
            };
            output: {
                client: {
                    name: string;
                    clientId: string;
                    redirectUri: string;
                };
                authorizationCode: string;
            };
        }>;
    }>;
    googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                id: number | undefined;
            };
        }>;
        getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: string[];
        }>;
        removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
                deleted: number;
            };
        }>;
    }>;
    admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | null | undefined;
            };
            output: {
                rows: {
                    name: string | null;
                    id: number;
                    email: string;
                    timeZone: string;
                    username: string | null;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    locked: boolean;
                }[];
                nextCursor: number | undefined;
                meta: {
                    totalRowCount: number;
                };
            };
        }>;
        sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
            };
            output: {
                success: boolean;
            };
        }>;
        lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
                locked: boolean;
            };
            output: {
                success: boolean;
                userId: number;
                locked: boolean;
            };
        }>;
        toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                slug: string;
                enabled: boolean;
            };
            output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                createdAt: Date | null;
                updatedAt: Date | null;
                slug: string;
                enabled: boolean;
                lastUsedAt: Date | null;
                stale: boolean | null;
                updatedBy: number | null;
            };
        }>;
        removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
            };
            output: {
                success: boolean;
                userId: number;
            };
        }>;
        getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
                users: {
                    locked: {
                        name: string | null;
                        id: number;
                        email: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        username: string | null;
                        avatarUrl: string | null;
                    }[];
                    reviewNeeded: {
                        name: string | null;
                        id: number;
                        email: string;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        username: string | null;
                        avatarUrl: string | null;
                    }[];
                };
                teams: {
                    locked: {
                        name: string;
                        id: number;
                        slug: string | null;
                        logoUrl: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    }[];
                    reviewNeeded: {
                        name: string;
                        id: number;
                        slug: string | null;
                        logoUrl: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    }[];
                };
            };
        }>;
        setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId?: number | undefined;
                username?: string | undefined;
                teamId?: number | undefined;
                teamSlug?: string | undefined;
                lock?: boolean | undefined;
            };
            output: {
                name: string | null;
                locked: boolean | undefined;
            };
        }>;
        createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                billingPeriod: "MONTHLY" | "ANNUALLY";
                billingType: "PER_BOOKING" | "PER_USER";
                entityCount: number;
                entityPrice: number;
                overages: number;
                billingEmail: string;
            };
            output: {
                stripeCheckoutUrl: string;
            };
        }>;
    }>;
    attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../../createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (v: import("superjson/dist/types").Class, options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined) => void;
            registerSymbol: (v: Symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(transformer: Omit<import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>, "name">, name: string) => void;
            allowErrorProps: (...props: string[]) => void;
        };
    }>, {
        list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
                options: {
                    value: string;
                    id: string;
                    slug: string;
                    attributeId: string;
                }[];
            } & {
                type: import(".prisma/client").$Enums.AttributeType;
                name: string;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                usersCanEditRelation: boolean;
            })[];
        }>;
        get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                id: string;
            };
            output: {
                options: {
                    value: string;
                    id?: string | undefined;
                    assignedUsers?: number | undefined;
                }[];
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                name: string;
                id: string;
            };
        }>;
        getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
                userId: number;
            };
            output: {
                id: string;
                name: string;
                type: import("@calcom/prisma/enums").AttributeType;
                options: {
                    id: string;
                    slug: string;
                    value: string;
                }[];
            }[];
        }>;
        create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                options: {
                    value: string;
                }[];
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                name: string;
            };
            output: {
                id: string;
                teamId: number;
                type: import(".prisma/client").$Enums.AttributeType;
                name: string;
                slug: string;
                enabled: boolean;
                usersCanEditRelation: boolean;
                createdAt: Date;
                updatedAt: Date;
            };
        }>;
        edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                options: {
                    value: string;
                    id?: string | undefined;
                }[];
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                name: string;
                attributeId: string;
            };
            output: {
                id: string;
            };
        }>;
        delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                id: string;
            };
            output: {
                type: import(".prisma/client").$Enums.AttributeType;
                name: string;
                id: string;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                usersCanEditRelation: boolean;
            };
        }>;
        toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                attributeId: string;
            };
            output: {
                enabled: boolean;
                id: string;
            };
        }>;
        assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
                userId: number;
                attributes: {
                    id: string;
                    options?: {
                        value: string;
                        label?: string | undefined;
                    }[] | undefined;
                    value?: string | undefined;
                }[];
            };
            output: {
                success: boolean;
                message: string;
            };
        }>;
    }>;
} & {
    me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            includePasswordAdded?: boolean | undefined;
        } | undefined;
        output: {
            passwordAdded?: boolean | undefined;
            secondaryEmails: {
                id: number;
                email: string;
                emailVerified: Date | null;
            }[];
            sumOfBookings: number | undefined;
            sumOfCalendars: number | undefined;
            sumOfTeams: number | undefined;
            sumOfEventTypes: number | undefined;
            isPremium: boolean | undefined;
            sumOfTeamEventTypes: number;
            organizationId: null;
            organization: {
                id: number;
                isPlatform: boolean;
                slug: string;
                isOrgAdmin: boolean;
            };
            username: string | null;
            profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
            profiles: never[];
            id: number;
            name: string | null;
            email: string;
            emailMd5: string;
            emailVerified: Date | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            locale: string;
            timeFormat: number | null;
            timeZone: string;
            avatar: string;
            avatarUrl: string | null;
            createdDate: Date;
            trialEndsAt: Date | null;
            defaultScheduleId: number | null;
            completedOnboarding: boolean;
            twoFactorEnabled: boolean;
            disableImpersonation: boolean;
            identityProvider: import(".prisma/client").$Enums.IdentityProvider;
            identityProviderEmail: string;
            brandColor: string | null;
            darkBrandColor: string | null;
            bio: string | null;
            weekStart: string;
            theme: string | null;
            appTheme: string | null;
            hideBranding: boolean;
            metadata: import(".prisma/client").Prisma.JsonValue;
            defaultBookerLayouts: {
                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
            } | null;
            allowDynamicBooking: boolean | null;
            allowSEOIndexing: boolean | null;
            receiveMonthlyDigestEmail: boolean | null;
        } | {
            passwordAdded?: boolean | undefined;
            secondaryEmails: {
                id: number;
                email: string;
                emailVerified: Date | null;
            }[];
            sumOfBookings: number | undefined;
            sumOfCalendars: number | undefined;
            sumOfTeams: number | undefined;
            sumOfEventTypes: number | undefined;
            isPremium: boolean | undefined;
            sumOfTeamEventTypes: number;
            organizationId: number | null;
            organization: {
                id: number | null;
                isOrgAdmin: boolean;
                metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?: {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                    } | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                requestedSlug: string | null;
                organizationSettings?: {
                    lockEventTypeCreationForUsers: boolean;
                } | null | undefined;
                name?: string | undefined;
                slug?: string | null | undefined;
                logoUrl?: string | null | undefined;
                calVideoLogo?: string | null | undefined;
                isPrivate?: boolean | undefined;
                bannerUrl?: string | null | undefined;
                isPlatform?: boolean | undefined;
                members?: {
                    id: number;
                    userId: number;
                    teamId: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    disableImpersonation: boolean;
                    accepted: boolean;
                }[] | undefined;
            };
            username: string | null;
            profile: import("@calcom/types/UserProfile").UserAsPersonalProfile | {
                name: string | null;
                avatarUrl: string | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                user: {
                    name: string | null;
                    id: number;
                    startTime: number;
                    endTime: number;
                    email: string;
                    locale: string | null;
                    username: string | null;
                    avatarUrl: string | null;
                    bufferTime: number;
                    defaultScheduleId: number | null;
                    isPlatformManaged: boolean;
                };
                organization: {
                    organizationSettings: {
                        lockEventTypeCreationForUsers: boolean;
                    } | null;
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    isPrivate: boolean;
                    bannerUrl: string | null;
                    isPlatform: boolean;
                    members: {
                        id: number;
                        userId: number;
                        teamId: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        disableImpersonation: boolean;
                        accepted: boolean;
                    }[];
                } & Omit<Pick<{
                    id: number;
                    name: string;
                    slug: string | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    parentId: number | null;
                    timeFormat: number | null;
                    timeZone: string;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                }, "name" | "id" | "metadata" | "slug" | "logoUrl" | "calVideoLogo" | "bannerUrl" | "isPlatform">, "metadata"> & {
                    requestedSlug: string | null;
                    metadata: {
                        requestedSlug: string | null;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?: {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                        } | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    };
                };
                movedFromUser: {
                    id: number;
                } | null;
                id: number;
                uid: string;
                userId: number;
                createdAt: Date & string;
                updatedAt: Date & string;
                organizationId: number;
                username: string;
                upId: string;
            };
            profiles: import("@calcom/types/UserProfile").UserProfile[];
            id: number;
            name: string | null;
            email: string;
            emailMd5: string;
            emailVerified: Date | null;
            startTime: number;
            endTime: number;
            bufferTime: number;
            locale: string;
            timeFormat: number | null;
            timeZone: string;
            avatar: string;
            avatarUrl: string | null;
            createdDate: Date;
            trialEndsAt: Date | null;
            defaultScheduleId: number | null;
            completedOnboarding: boolean;
            twoFactorEnabled: boolean;
            disableImpersonation: boolean;
            identityProvider: import(".prisma/client").$Enums.IdentityProvider;
            identityProviderEmail: string;
            brandColor: string | null;
            darkBrandColor: string | null;
            bio: string | null;
            weekStart: string;
            theme: string | null;
            appTheme: string | null;
            hideBranding: boolean;
            metadata: import(".prisma/client").Prisma.JsonValue;
            defaultBookerLayouts: {
                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
            } | null;
            allowDynamicBooking: boolean | null;
            allowSEOIndexing: boolean | null;
            receiveMonthlyDigestEmail: boolean | null;
        };
    }>;
    platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            id: number;
            username: string | null;
            email: string;
            timeFormat: number | null;
            timeZone: string;
            defaultScheduleId: number | null;
            weekStart: string;
            organizationId: number | null;
            organization: {
                isPlatform: any;
                id: number | null;
            };
        };
    }>;
    deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            password: string;
            totpCode?: string | undefined;
        };
        output: void;
    }>;
    deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: void;
        output: void;
    }>;
    connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            onboarding?: boolean | undefined;
        } | undefined;
        output: {
            connectedCalendars: ({
                integration: import("@calcom/types/App").App & {
                    credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                    credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                };
                credentialId: number;
                primary?: undefined;
                calendars?: undefined;
                error?: undefined;
            } | {
                integration: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                };
                credentialId: number;
                primary: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    name?: string | undefined;
                    email?: string | undefined;
                    primaryEmail?: string | undefined;
                    integrationTitle?: string | undefined;
                    userId?: number | undefined;
                    integration?: string | undefined;
                    externalId: string;
                };
                calendars: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    name?: string | undefined;
                    email?: string | undefined;
                    primaryEmail?: string | undefined;
                    integrationTitle?: string | undefined;
                    userId?: number | undefined;
                    integration?: string | undefined;
                    externalId: string;
                }[];
                error?: undefined;
            } | {
                integration: {
                    installed?: boolean | undefined;
                    type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                    title?: string | undefined;
                    name: string;
                    description: string;
                    variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                    slug: string;
                    category?: string | undefined;
                    categories: import(".prisma/client").$Enums.AppCategories[];
                    extendsFeature?: "EventType" | "User" | undefined;
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string | undefined;
                    verified?: boolean | undefined;
                    trending?: boolean | undefined;
                    rating?: number | undefined;
                    reviews?: number | undefined;
                    isGlobal?: boolean | undefined;
                    simplePath?: string | undefined;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue | undefined;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                    price?: number | undefined;
                    commission?: number | undefined;
                    licenseRequired?: boolean | undefined;
                    teamsPlanRequired?: {
                        upgradeUrl: string;
                    } | undefined;
                    appData?: import("@calcom/types/App").AppData | undefined;
                    paid?: import("@calcom/types/App").PaidAppData | undefined;
                    dirName?: string | undefined;
                    isTemplate?: boolean | undefined;
                    __template?: string | undefined;
                    dependencies?: string[] | undefined;
                    concurrentMeetings?: boolean | undefined;
                    createdAt?: string | undefined;
                    isOAuth?: boolean | undefined;
                    locationOption: {
                        label: string;
                        value: string;
                        icon?: string | undefined;
                        disabled?: boolean | undefined;
                    } | null;
                };
                credentialId: number;
                error: {
                    message: string;
                };
                primary?: undefined;
                calendars?: undefined;
            })[];
            destinationCalendar: {
                primary?: boolean | undefined;
                name?: string | undefined;
                readOnly?: boolean | undefined;
                email?: string | undefined;
                primaryEmail: string | null;
                credentialId: number | null;
                integrationTitle?: string | undefined;
                userId: number | null;
                integration: string;
                externalId: string;
                id: number;
                eventTypeId: number | null;
            };
        };
    }>;
    setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            integration: string;
            externalId: string;
            eventTypeId?: number | null | undefined;
            bookingId?: number | null | undefined;
        };
        output: void;
    }>;
    integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            variant?: string | undefined;
            exclude?: string[] | undefined;
            onlyInstalled?: boolean | undefined;
            includeTeamInstalledApps?: boolean | undefined;
            extendsFeature?: "EventType" | undefined;
            teamId?: number | null | undefined;
            sortByMostPopular?: boolean | undefined;
            categories?: ("other" | "payment" | "calendar" | "messaging" | "video" | "web3" | "automation" | "analytics" | "conferencing" | "crm")[] | undefined;
            appId?: string | undefined;
        };
        output: {
            items: {
                dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                userCredentialIds: number[];
                invalidCredentialIds: number[];
                teams: ({
                    teamId: number;
                    name: string;
                    logoUrl: string | null;
                    credentialId: number;
                    isAdmin: boolean;
                } | null)[];
                isInstalled: boolean | undefined;
                isSetupAlready: boolean | undefined;
                credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                installed?: boolean | undefined;
                type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
                title?: string | undefined;
                name: string;
                description: string;
                variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
                slug: string;
                category?: string | undefined;
                categories: import(".prisma/client").$Enums.AppCategories[];
                extendsFeature?: "EventType" | "User" | undefined;
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string | undefined;
                verified?: boolean | undefined;
                trending?: boolean | undefined;
                rating?: number | undefined;
                reviews?: number | undefined;
                isGlobal?: boolean | undefined;
                simplePath?: string | undefined;
                email: string;
                feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
                price?: number | undefined;
                commission?: number | undefined;
                licenseRequired?: boolean | undefined;
                teamsPlanRequired?: {
                    upgradeUrl: string;
                } | undefined;
                appData?: import("@calcom/types/App").AppData | undefined;
                paid?: import("@calcom/types/App").PaidAppData | undefined;
                dirName?: string | undefined;
                isTemplate?: boolean | undefined;
                __template?: string | undefined;
                dependencies?: string[] | undefined;
                concurrentMeetings?: boolean | undefined;
                createdAt?: string | undefined;
                isOAuth?: boolean | undefined;
                locationOption: {
                    label: string;
                    value: string;
                    icon?: string | undefined;
                    disabled?: boolean | undefined;
                } | null;
                enabled: boolean;
            }[];
        };
    }>;
    appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            appId: string;
        };
        output: {
            installed?: boolean | undefined;
            type: `${string}_other` | `${string}_calendar` | `${string}_messaging` | `${string}_payment` | `${string}_video` | `${string}_automation` | `${string}_analytics` | `${string}_crm` | `${string}_other_calendar`;
            title?: string | undefined;
            name: string;
            description: string;
            variant: "other" | "payment" | "calendar" | "video" | "automation" | "conferencing" | "crm" | "other_calendar";
            slug: string;
            category?: string | undefined;
            categories: import(".prisma/client").$Enums.AppCategories[];
            extendsFeature?: "EventType" | "User" | undefined;
            logo: string;
            publisher: string;
            url: string;
            docsUrl?: string | undefined;
            verified?: boolean | undefined;
            trending?: boolean | undefined;
            rating?: number | undefined;
            reviews?: number | undefined;
            isGlobal?: boolean | undefined;
            simplePath?: string | undefined;
            email: string;
            key?: import(".prisma/client").Prisma.JsonValue | undefined;
            feeType?: "monthly" | "usage-based" | "one-time" | "free" | undefined;
            price?: number | undefined;
            commission?: number | undefined;
            licenseRequired?: boolean | undefined;
            teamsPlanRequired?: {
                upgradeUrl: string;
            } | undefined;
            appData?: import("@calcom/types/App").AppData | undefined;
            paid?: import("@calcom/types/App").PaidAppData | undefined;
            dirName?: string | undefined;
            isTemplate?: boolean | undefined;
            __template?: string | undefined;
            dependencies?: string[] | undefined;
            concurrentMeetings?: boolean | undefined;
            createdAt?: string | undefined;
            isOAuth?: boolean | undefined;
            locationOption: {
                label: string;
                value: string;
                icon?: string | undefined;
                disabled?: boolean | undefined;
            } | null;
            isInstalled: number;
        };
    }>;
    appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            appType: string;
        };
        output: {
            credentials: {
                type: string;
                id: number;
                userId: number | null;
                teamId: number | null;
                subscriptionId: string | null;
                billingCycleStart: number | null;
                key: import(".prisma/client").Prisma.JsonValue;
                appId: string | null;
                paymentStatus: string | null;
                invalid: boolean | null;
            }[];
            userAdminTeams: number[];
        };
    }>;
    stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            isPremium: boolean;
            username: string | null;
        };
    }>;
    updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            username?: string | undefined;
            name?: string | undefined;
            email?: string | undefined;
            bio?: string | undefined;
            avatarUrl?: string | null | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?: {
                proPaidForByTeamId?: number | undefined;
                stripeCustomerId?: string | undefined;
                vitalSettings?: {
                    connected?: boolean | undefined;
                    selectedParam?: string | undefined;
                    sleepValue?: number | undefined;
                } | undefined;
                isPremium?: boolean | undefined;
                sessionTimeout?: number | undefined;
                defaultConferencingApp?: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
                defaultBookerLayouts?: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null | undefined;
                emailChangeWaitingForVerification?: string | undefined;
                migratedToOrgFrom?: {
                    username?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    revertTime?: string | undefined;
                } | undefined;
            } | null | undefined;
            travelSchedules?: {
                timeZone: string;
                startDate: Date;
                id?: number | undefined;
                endDate?: Date | undefined;
            }[] | undefined;
            secondaryEmails?: {
                id: number;
                email: string;
                isDeleted?: boolean | undefined;
            }[] | undefined;
        };
        output: {
            email: string | undefined;
            avatarUrl: string | null;
            hasEmailBeenChanged: boolean | "" | undefined;
            sendEmailVerification: boolean;
            username?: string | undefined;
            name?: string | undefined;
            bio?: string | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?: {
                proPaidForByTeamId?: number | undefined;
                stripeCustomerId?: string | undefined;
                vitalSettings?: {
                    connected?: boolean | undefined;
                    selectedParam?: string | undefined;
                    sleepValue?: number | undefined;
                } | undefined;
                isPremium?: boolean | undefined;
                sessionTimeout?: number | undefined;
                defaultConferencingApp?: {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                } | undefined;
                defaultBookerLayouts?: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null | undefined;
                emailChangeWaitingForVerification?: string | undefined;
                migratedToOrgFrom?: {
                    username?: string | null | undefined;
                    lastMigrationTime?: string | undefined;
                    reverted?: boolean | undefined;
                    revertTime?: string | undefined;
                } | undefined;
            } | null | undefined;
            travelSchedules?: {
                timeZone: string;
                startDate: Date;
                id?: number | undefined;
                endDate?: Date | undefined;
            }[] | undefined;
            secondaryEmails?: {
                id: number;
                email: string;
                isDeleted: boolean;
            }[] | undefined;
        };
    }>;
    unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: void;
        output: {
            message: string;
        };
    }>;
    eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            ids: number[];
        };
        output: void;
    }>;
    routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            ids: string[];
        };
        output: void;
    }>;
    workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            ids: number[];
        };
        output: void;
    }>;
    submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            rating: string;
            comment: string;
        };
        output: void;
    }>;
    locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            teamId?: number | undefined;
        };
        output: {
            label: string;
            options: {
                label: string;
                value: string;
                disabled?: boolean | undefined;
                icon?: string | undefined;
                slug?: string | undefined;
                credentialId?: number | undefined;
            }[];
        }[];
    }>;
    deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            id: number;
            externalId?: string | undefined;
            teamId?: number | undefined;
        };
        output: void;
    }>;
    bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: number;
    }>;
    getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            roomName: string;
        };
        output: {
            data: import("zod").objectOutputType<{
                id: import("zod").ZodString;
                room_name: import("zod").ZodString;
                start_ts: import("zod").ZodNumber;
                status: import("zod").ZodString;
                max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                duration: import("zod").ZodNumber;
                share_token: import("zod").ZodString;
            }, import("zod").ZodTypeAny, "passthrough">[];
            total_count: number;
        } | {} | undefined;
    }>;
    getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            teamUpgradeBanner: ({
                team: {
                    children: {
                        name: string;
                        id: number;
                        createdAt: Date;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        bio: string | null;
                        hideBranding: boolean;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        theme: string | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        bannerUrl: string | null;
                        timeFormat: number | null;
                        weekStart: string;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                    }[];
                } & {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            } & {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            })[];
            orgUpgradeBanner: ({
                team: {
                    name: string;
                    id: number;
                    createdAt: Date;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    bio: string | null;
                    hideBranding: boolean;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bannerUrl: string | null;
                    timeFormat: number | null;
                    weekStart: string;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                };
            } & {
                id: number;
                userId: number;
                teamId: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
            })[];
            verifyEmailBanner: boolean;
            calendarCredentialBanner: boolean;
            invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
        };
    }>;
    getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            recordingId: string;
        };
        output: {
            download_link: string;
        } | undefined;
    }>;
    getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
        } | undefined;
    }>;
    updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
        };
        output: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
        };
    }>;
    shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            id: number;
            email: string;
            isVerified: boolean;
        };
    }>;
    teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
            includeOrg?: boolean | undefined;
        } | undefined;
        output: ({
            teamId: number;
            name: string;
            slug: string | null;
            image: string;
            role: import(".prisma/client").$Enums.MembershipRole;
            readOnly: boolean;
        } | {
            teamId: null;
            name: string | null;
            slug: string | null;
            image: string;
            readOnly: boolean;
        })[];
    }>;
    connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            token: string;
        };
        output: {
            isBookingAlreadyAcceptedBySomeoneElse: boolean;
            meetingUrl: string;
        };
    }>;
    outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            dateRange: {
                startDate: Date;
                endDate: Date;
            };
            offset: number;
            toTeamUserId: number | null;
            reasonId: number;
            uuid?: string | null | undefined;
            notes?: string | null | undefined;
        };
        output: {} | undefined;
    }>;
    outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            id: number;
            end: Date;
            notes: string | null;
            start: Date;
            reason: {
                id: number;
                userId: number | null;
                reason: string;
                emoji: string;
            } | null;
            uuid: string;
            toUserId: number | null;
            toUser: {
                username: string | null;
            } | null;
        }[];
    }>;
    outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            outOfOfficeUid: string;
        };
        output: {};
    }>;
    addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            email: string;
        };
        output: {
            data: {
                id: number;
                userId: number;
                email: string;
                emailVerified: Date | null;
            };
            message: string;
        };
    }>;
    getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            id: number;
            timeZone: string;
            startDate: Date;
            endDate: Date | null;
        }[];
    }>;
    outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
            id: number;
            userId: number | null;
            enabled: boolean;
            reason: string;
            emoji: string;
        }[];
    }>;
    addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            subscription: string;
        };
        output: {
            message: string;
        };
    }>;
    removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            subscription: string;
        };
        output: {
            message: string;
        };
    }>;
    markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
            bookingUid: string;
            attendees?: {
                email: string;
                noShow: boolean;
            }[] | undefined;
            noShowHost?: boolean | undefined;
        };
        output: {
            attendees: {
                email: string;
                noShow: boolean;
            }[];
            noShowHost: boolean;
            message: string;
        };
    }>;
};
