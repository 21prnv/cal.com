console.log("-----------INSIDE LOADING APPROUTER");
const appRouter = {} as import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
  import("@trpc/server/unstable-core-do-not-import").RootConfig<{
    ctx: import("../server/createContext").InnerContext;
    meta: object;
    errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
    transformer: {
      stringify: (object: any) => string;
      parse: <T = unknown>(string: string) => T;
      serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
      deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
      registerClass: (
        v: import("superjson/dist/types").Class,
        options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
      ) => void;
      registerSymbol: (v: symbol, identifier?: string | undefined) => void;
      registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
        transformer: Omit<
          import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
          "name"
        >,
        name: string
      ) => void;
      allowErrorProps: (...props: string[]) => void;
    };
  }>,
  {
    viewer: import("@trpc/server/unstable-core-do-not-import").Router<{
      _config: import("@trpc/server/unstable-core-do-not-import").RootConfig<{
        ctx: import("../server/createContext").InnerContext;
        meta: object;
        errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
        transformer: {
          stringify: (object: any) => string;
          parse: <T = unknown>(string: string) => T;
          serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
          deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
          registerClass: (
            v: import("superjson/dist/types").Class,
            options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
          ) => void;
          registerSymbol: (v: symbol, identifier?: string | undefined) => void;
          registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
            transformer: Omit<
              import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
              "name"
            >,
            name: string
          ) => void;
          allowErrorProps: (...props: string[]) => void;
        };
      }>;
      router: true;
      procedures: {
        loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includePasswordAdded?: boolean | undefined;
                  }
                | undefined;
              output:
                | {
                    isTeamAdminOrOwner: boolean;
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                      id: number;
                      email: string;
                      emailVerified: Date | null;
                    }[];
                    isPremium: boolean | undefined;
                    organizationId: null;
                    organization: {
                      id: number;
                      isPlatform: boolean;
                      slug: string;
                      isOrgAdmin: boolean;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                    profiles: never[];
                    organizationSettings?: undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                  }
                | {
                    isTeamAdminOrOwner: boolean;
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                      id: number;
                      email: string;
                      emailVerified: Date | null;
                    }[];
                    isPremium: boolean | undefined;
                    organizationId: number | null;
                    organization: {
                      id: number | null;
                      isOrgAdmin: boolean;
                      metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?:
                          | {
                              teamSlug?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              lastRevertTime?: string | undefined;
                            }
                          | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                      } | null;
                      requestedSlug: string | null;
                      name?: string | undefined;
                      organizationSettings?:
                        | {
                            allowSEOIndexing: boolean;
                            lockEventTypeCreationForUsers: boolean;
                          }
                        | null
                        | undefined;
                      slug?: string | null | undefined;
                      logoUrl?: string | null | undefined;
                      isPrivate?: boolean | undefined;
                      bannerUrl?: string | null | undefined;
                      isPlatform?: boolean | undefined;
                    };
                    username: string | null;
                    profile:
                      | import("@calcom/types/UserProfile").UserAsPersonalProfile
                      | {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        }
                      | {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          user: {
                            name: string | null;
                            id: number;
                            locale: string | null;
                            startTime: number;
                            endTime: number;
                            email: string;
                            username: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            defaultScheduleId: number | null;
                            isPlatformManaged: boolean;
                          };
                          organization: {
                            name: string;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            organizationSettings: {
                              allowSEOIndexing: boolean;
                              lockEventTypeCreationForUsers: boolean;
                            } | null;
                            slug: string | null;
                            logoUrl: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            members: {
                              id: number;
                              role: import(".prisma/client").$Enums.MembershipRole;
                              userId: number;
                              teamId: number;
                              disableImpersonation: boolean;
                              accepted: boolean;
                            }[];
                          } & Omit<
                            Pick<
                              {
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue | null;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                includeManagedEventsInLimits: boolean;
                              },
                              "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                            >,
                            "metadata"
                          > & {
                              requestedSlug: string | null;
                              metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?:
                                  | {
                                      teamSlug?: string | null | undefined;
                                      lastMigrationTime?: string | undefined;
                                      reverted?: boolean | undefined;
                                      lastRevertTime?: string | undefined;
                                    }
                                  | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                              };
                            };
                          movedFromUser: {
                            id: number;
                          } | null;
                          id: number;
                          uid: string;
                          userId: number;
                          createdAt: Date & string;
                          updatedAt: Date & string;
                          username: string;
                          organizationId: number;
                          upId: string;
                        }
                      | ({
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                      | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        });
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    organizationSettings:
                      | {
                          allowSEOIndexing: boolean;
                          lockEventTypeCreationForUsers: boolean;
                        }
                      | null
                      | undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                  };
            }>;
            myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                sumOfTeamEventTypes: number | undefined;
              };
            }>;
            platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                username: string | null;
                email: string;
                timeFormat: number | null;
                timeZone: string;
                defaultScheduleId: number | null;
                weekStart: string;
                organizationId: number | null;
                organization: {
                  isPlatform: any;
                  id: number | null;
                };
              };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                password: string;
                totpCode?: string | undefined;
              };
              output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    eventTypeId: number | null;
                    onboarding?: boolean | undefined;
                  }
                | undefined;
              output: {
                connectedCalendars: (
                  | {
                      integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null;
                      error?: undefined;
                      primary?: undefined;
                      calendars?: undefined;
                    }
                  | {
                      integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      error: {
                        message: string;
                      };
                      delegationCredentialId?: undefined;
                      primary?: undefined;
                      calendars?: undefined;
                    }
                  | {
                      integration: {
                        installed?: boolean;
                        type:
                          | `${string}_calendar`
                          | `${string}_messaging`
                          | `${string}_payment`
                          | `${string}_video`
                          | `${string}_other`
                          | `${string}_automation`
                          | `${string}_analytics`
                          | `${string}_crm`
                          | `${string}_other_calendar`;
                        title?: string;
                        name: string;
                        description: string;
                        variant:
                          | "calendar"
                          | "payment"
                          | "conferencing"
                          | "video"
                          | "other"
                          | "other_calendar"
                          | "automation"
                          | "crm";
                        slug: string;
                        category?: string;
                        categories: import(".prisma/client").AppCategories[];
                        extendsFeature?: "EventType" | "User";
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string;
                        verified?: boolean;
                        trending?: boolean;
                        rating?: number;
                        reviews?: number;
                        isGlobal?: boolean;
                        simplePath?: string;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free";
                        price?: number;
                        commission?: number;
                        licenseRequired?: boolean;
                        teamsPlanRequired?: {
                          upgradeUrl: string;
                        };
                        appData?: import("@calcom/types/App").AppData;
                        paid?: import("@calcom/types/App").PaidAppData;
                        dirName?: string;
                        isTemplate?: boolean;
                        __template?: string;
                        dependencies?: string[];
                        concurrentMeetings?: boolean;
                        createdAt?: string;
                        isOAuth?: boolean;
                        delegationCredential?: {
                          workspacePlatformSlug: string;
                        };
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null;
                      primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        delegationCredentialId: string | null;
                        name?: string;
                        email?: string;
                        primaryEmail?: string;
                        integrationTitle?: string;
                        id?: string | undefined;
                        error?: string | null | undefined;
                        userId?: number | undefined;
                        eventTypeId?: number | null | undefined;
                        integration?: string | undefined;
                        domainWideDelegationCredentialId?: string | null | undefined;
                        googleChannelId?: string | null | undefined;
                        googleChannelKind?: string | null | undefined;
                        googleChannelResourceId?: string | null | undefined;
                        googleChannelResourceUri?: string | null | undefined;
                        googleChannelExpiration?: string | null | undefined;
                        externalId: string;
                      };
                      calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        delegationCredentialId: string | null;
                        name?: string;
                        email?: string;
                        primaryEmail?: string;
                        integrationTitle?: string;
                        id?: string | undefined;
                        error?: string | null | undefined;
                        userId?: number | undefined;
                        eventTypeId?: number | null | undefined;
                        integration?: string | undefined;
                        domainWideDelegationCredentialId?: string | null | undefined;
                        googleChannelId?: string | null | undefined;
                        googleChannelKind?: string | null | undefined;
                        googleChannelResourceId?: string | null | undefined;
                        googleChannelResourceUri?: string | null | undefined;
                        googleChannelExpiration?: string | null | undefined;
                        externalId: string;
                      }[];
                      error?: undefined;
                    }
                  | {
                      integration: {
                        installed?: boolean;
                        type:
                          | `${string}_calendar`
                          | `${string}_messaging`
                          | `${string}_payment`
                          | `${string}_video`
                          | `${string}_other`
                          | `${string}_automation`
                          | `${string}_analytics`
                          | `${string}_crm`
                          | `${string}_other_calendar`;
                        title?: string;
                        name: string;
                        description: string;
                        variant:
                          | "calendar"
                          | "payment"
                          | "conferencing"
                          | "video"
                          | "other"
                          | "other_calendar"
                          | "automation"
                          | "crm";
                        slug: string;
                        category?: string;
                        categories: import(".prisma/client").AppCategories[];
                        extendsFeature?: "EventType" | "User";
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string;
                        verified?: boolean;
                        trending?: boolean;
                        rating?: number;
                        reviews?: number;
                        isGlobal?: boolean;
                        simplePath?: string;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free";
                        price?: number;
                        commission?: number;
                        licenseRequired?: boolean;
                        teamsPlanRequired?: {
                          upgradeUrl: string;
                        };
                        appData?: import("@calcom/types/App").AppData;
                        paid?: import("@calcom/types/App").PaidAppData;
                        dirName?: string;
                        isTemplate?: boolean;
                        __template?: string;
                        dependencies?: string[];
                        concurrentMeetings?: boolean;
                        createdAt?: string;
                        isOAuth?: boolean;
                        delegationCredential?: {
                          workspacePlatformSlug: string;
                        };
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null | undefined;
                      error: {
                        message: string;
                      };
                      primary?: undefined;
                      calendars?: undefined;
                    }
                )[];
                destinationCalendar: {
                  primary?: boolean;
                  name?: string;
                  readOnly?: boolean;
                  email?: string;
                  primaryEmail: string | null;
                  credentialId: number | null;
                  integrationTitle?: string;
                  id: string | number;
                  error?: string | null | undefined;
                  userId: number | null;
                  eventTypeId: number | null;
                  integration: string;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                  googleChannelId?: string | null | undefined;
                  googleChannelKind?: string | null | undefined;
                  googleChannelResourceId?: string | null | undefined;
                  googleChannelResourceUri?: string | null | undefined;
                  googleChannelExpiration?: string | null | undefined;
                  externalId: string;
                };
              };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                integration: string;
                externalId: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
              };
              output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                sortByInstalledFirst?: boolean | undefined;
                categories?:
                  | (
                      | "calendar"
                      | "messaging"
                      | "other"
                      | "payment"
                      | "video"
                      | "web3"
                      | "automation"
                      | "analytics"
                      | "conferencing"
                      | "crm"
                    )[]
                  | undefined;
                appId?: string | undefined;
              };
              output: {
                items: {
                  dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                  userCredentialIds: number[];
                  invalidCredentialIds: number[];
                  teams: ({
                    teamId: number;
                    name: string;
                    logoUrl: string | null;
                    credentialId: number;
                    isAdmin: boolean;
                  } | null)[];
                  isInstalled: boolean | undefined;
                  isSetupAlready: boolean | undefined;
                  credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                  installed?: boolean;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  title?: string;
                  name: string;
                  description: string;
                  variant:
                    | "calendar"
                    | "payment"
                    | "conferencing"
                    | "video"
                    | "other"
                    | "other_calendar"
                    | "automation"
                    | "crm";
                  slug: string;
                  category?: string;
                  categories: import(".prisma/client").AppCategories[];
                  extendsFeature?: "EventType" | "User";
                  logo: string;
                  publisher: string;
                  url: string;
                  docsUrl?: string;
                  verified?: boolean;
                  trending?: boolean;
                  rating?: number;
                  reviews?: number;
                  isGlobal?: boolean;
                  simplePath?: string;
                  email: string;
                  feeType?: "monthly" | "usage-based" | "one-time" | "free";
                  price?: number;
                  commission?: number;
                  licenseRequired?: boolean;
                  teamsPlanRequired?: {
                    upgradeUrl: string;
                  };
                  appData?: import("@calcom/types/App").AppData;
                  paid?: import("@calcom/types/App").PaidAppData;
                  dirName?: string;
                  isTemplate?: boolean;
                  __template?: string;
                  dependencies?: string[];
                  concurrentMeetings?: boolean;
                  createdAt?: string;
                  isOAuth?: boolean;
                  delegationCredential?: {
                    workspacePlatformSlug: string;
                  };
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  enabled: boolean;
                }[];
              };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appId: string;
              };
              output: {
                installed?: boolean;
                type:
                  | `${string}_calendar`
                  | `${string}_messaging`
                  | `${string}_payment`
                  | `${string}_video`
                  | `${string}_other`
                  | `${string}_automation`
                  | `${string}_analytics`
                  | `${string}_crm`
                  | `${string}_other_calendar`;
                title?: string;
                name: string;
                description: string;
                variant:
                  | "calendar"
                  | "payment"
                  | "conferencing"
                  | "video"
                  | "other"
                  | "other_calendar"
                  | "automation"
                  | "crm";
                slug: string;
                category?: string;
                categories: import(".prisma/client").AppCategories[];
                extendsFeature?: "EventType" | "User";
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string;
                verified?: boolean;
                trending?: boolean;
                rating?: number;
                reviews?: number;
                isGlobal?: boolean;
                simplePath?: string;
                email: string;
                key?: import(".prisma/client").Prisma.JsonValue;
                feeType?: "monthly" | "usage-based" | "one-time" | "free";
                price?: number;
                commission?: number;
                licenseRequired?: boolean;
                teamsPlanRequired?: {
                  upgradeUrl: string;
                };
                appData?: import("@calcom/types/App").AppData;
                paid?: import("@calcom/types/App").PaidAppData;
                dirName?: string;
                isTemplate?: boolean;
                __template?: string;
                dependencies?: string[];
                concurrentMeetings?: boolean;
                createdAt?: string;
                isOAuth?: boolean;
                delegationCredential?: {
                  workspacePlatformSlug: string;
                };
                locationOption: import("@calcom/app-store/utils").LocationOption | null;
                isInstalled: number;
              };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appType: string;
              };
              output: {
                credentials: (
                  | {
                      id: number;
                      delegatedToId: string;
                      userId: number;
                      user: {
                        email: string;
                      };
                      key: {
                        access_token: string;
                      };
                      invalid: boolean;
                      teamId: null;
                      team: null;
                      delegatedTo: {
                        serviceAccountKey: import("zod").objectOutputType<
                          {
                            private_key: import("zod").ZodString;
                            client_email: import("zod").ZodOptional<import("zod").ZodString>;
                            client_id: import("zod").ZodString;
                            tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                          },
                          import("zod").ZodTypeAny,
                          "passthrough"
                        >;
                      } | null;
                      type:
                        | `${string}_calendar`
                        | `${string}_messaging`
                        | `${string}_payment`
                        | `${string}_video`
                        | `${string}_other`
                        | `${string}_automation`
                        | `${string}_analytics`
                        | `${string}_crm`
                        | `${string}_other_calendar`;
                      appId: string;
                    }
                  | ({
                      user: {
                        name: string | null;
                      } | null;
                      team: {
                        name: string;
                      } | null;
                    } & {
                      key: import(".prisma/client").Prisma.JsonValue;
                      id: number;
                      type: string;
                      userId: number | null;
                      teamId: number | null;
                      subscriptionId: string | null;
                      billingCycleStart: number | null;
                      appId: string | null;
                      paymentStatus: string | null;
                      invalid: boolean | null;
                    })
                )[];
                userAdminTeams: number[];
              };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                isPremium: boolean;
                username: string | null;
              };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?:
                  | {
                      proPaidForByTeamId?: number | undefined;
                      stripeCustomerId?: string | undefined;
                      vitalSettings?:
                        | {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                          }
                        | undefined;
                      isPremium?: boolean | undefined;
                      sessionTimeout?: number | undefined;
                      defaultConferencingApp?:
                        | {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                          }
                        | undefined;
                      defaultBookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      emailChangeWaitingForVerification?: string | undefined;
                      migratedToOrgFrom?:
                        | {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                          }
                        | undefined;
                    }
                  | null
                  | undefined;
                travelSchedules?:
                  | {
                      startDate: Date;
                      timeZone: string;
                      id?: number | undefined;
                      endDate?: Date | undefined;
                    }[]
                  | undefined;
                secondaryEmails?:
                  | {
                      id: number;
                      email: string;
                      isDeleted?: boolean | undefined;
                    }[]
                  | undefined;
              };
              output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?:
                  | {
                      proPaidForByTeamId?: number | undefined;
                      stripeCustomerId?: string | undefined;
                      vitalSettings?:
                        | {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                          }
                        | undefined;
                      isPremium?: boolean | undefined;
                      sessionTimeout?: number | undefined;
                      defaultConferencingApp?:
                        | {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                          }
                        | undefined;
                      defaultBookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      emailChangeWaitingForVerification?: string | undefined;
                      migratedToOrgFrom?:
                        | {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                          }
                        | undefined;
                    }
                  | null
                  | undefined;
                travelSchedules?:
                  | {
                      startDate: Date;
                      timeZone: string;
                      id?: number | undefined;
                      endDate?: Date | undefined;
                    }[]
                  | undefined;
                secondaryEmails?:
                  | {
                      id: number;
                      email: string;
                      isDeleted: boolean;
                    }[]
                  | undefined;
              };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                message: string;
              };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: number[];
              };
              output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: string[];
              };
              output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: number[];
              };
              output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                rating: string;
                comment: string;
              };
              output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                label: string;
                options: {
                  label: string;
                  value: string;
                  disabled?: boolean;
                  icon?: string;
                  slug?: string;
                  credentialId?: number;
                }[];
              }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
              };
              output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                roomName: string;
              };
              output:
                | {
                    data: import("zod").objectOutputType<
                      {
                        id: import("zod").ZodString;
                        room_name: import("zod").ZodString;
                        start_ts: import("zod").ZodNumber;
                        status: import("zod").ZodString;
                        max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                        duration: import("zod").ZodNumber;
                        share_token: import("zod").ZodString;
                      },
                      import("zod").ZodTypeAny,
                      "passthrough"
                    >[];
                    total_count: number;
                  }
                | {}
                | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                teamUpgradeBanner: ({
                  team: {
                    children: {
                      name: string;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      createdAt: Date;
                      timeZone: string;
                      slug: string | null;
                      parentId: number | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      bio: string | null;
                      weekStart: string;
                      hideBranding: boolean;
                      theme: string | null;
                      timeFormat: number | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      smsLockState: import(".prisma/client").$Enums.SMSLockState;
                      smsLockReviewedByAdmin: boolean;
                      logoUrl: string | null;
                      calVideoLogo: string | null;
                      appLogo: string | null;
                      appIconLogo: string | null;
                      isPrivate: boolean;
                      hideBookATeamMember: boolean;
                      bannerUrl: string | null;
                      isOrganization: boolean;
                      pendingPayment: boolean;
                      isPlatform: boolean;
                      createdByOAuthClientId: string | null;
                      includeManagedEventsInLimits: boolean;
                    }[];
                  } & {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                } & {
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  userId: number;
                  teamId: number;
                  disableImpersonation: boolean;
                  accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                  team: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                } & {
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  userId: number;
                  teamId: number;
                  disableImpersonation: boolean;
                  accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
              };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                recordingId: string;
              };
              output:
                | {
                    download_link: string;
                  }
                | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output:
                | {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                  }
                | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              };
              output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                email: string;
                isVerified: boolean;
              };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includeOrg?: boolean | undefined;
                  }
                | undefined;
              output: (
                | {
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    readOnly: boolean;
                  }
                | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                  }
              )[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
              };
              output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
              };
            }>;
            outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                offset: number;
                dateRange: {
                  startDate: Date;
                  endDate: Date;
                };
                toTeamUserId: number | null;
                reasonId: number;
                uuid?: string | null | undefined;
                forUserId?: number | null | undefined;
                notes?: string | null | undefined;
              };
              output: {} | undefined;
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                fetchTeamMembersEntries?: boolean | undefined;
                searchTerm?: string | undefined;
              };
              output: {
                rows: {
                  user: {
                    name: string | null;
                    id: number;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    creationSource: import(".prisma/client").$Enums.CreationSource | null;
                    email: string;
                    timeZone: string;
                    username: string | null;
                    emailVerified: Date | null;
                    bio: string | null;
                    avatarUrl: string | null;
                    weekStart: string;
                    bufferTime: number;
                    hideBranding: boolean;
                    theme: string | null;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    lastActiveAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    timeFormat: number | null;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    disableImpersonation: boolean;
                    locked: boolean;
                    isPlatformManaged: boolean;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    referralLinkId: string | null;
                    organizationId: number | null;
                    movedToProfileId: number | null;
                  };
                  id: number;
                  end: Date;
                  start: Date;
                  uuid: string;
                  notes: string | null;
                  toUser: {
                    name: string | null;
                    email: string;
                    username: string | null;
                  } | null;
                  reason: {
                    id: number;
                    userId: number | null;
                    reason: string;
                    emoji: string;
                  } | null;
                  toUserId: number | null;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                outOfOfficeUid: string;
                userId?: number | null | undefined;
              };
              output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
              };
              output: {
                data: {
                  id: number;
                  userId: number;
                  email: string;
                  emailVerified: Date | null;
                };
                message: string;
              };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                startDate: Date;
                endDate: Date | null;
                timeZone: string;
              }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                userId: number | null;
                enabled: boolean;
                reason: string;
                emoji: string;
              }[];
            }>;
            addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                subscription: string;
              };
              output: {
                message: string;
              };
            }>;
            removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                subscription: string;
              };
              output: {
                message: string;
              };
            }>;
            markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingUid: string;
                attendees?:
                  | {
                      email: string;
                      noShow: boolean;
                    }[]
                  | undefined;
                noShowHost?: boolean | undefined;
              };
              output: {
                attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
                noShowHost: boolean;
                message: string;
              };
            }>;
          }
        >;
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("next-auth").Session | null;
            }>;
            i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                locale: string;
                CalComVersion: string;
              };
              output: {
                i18n: import("next-i18next").SSRConfig;
                locale: string;
              };
            }>;
            countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                countryCode: string;
              };
            }>;
            submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                rating: number;
                bookingUid: string;
                comment?: string | undefined;
              };
              output: void;
            }>;
            markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                noShowHost: boolean;
                bookingUid: string;
              };
              output: {
                attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
                noShowHost: boolean;
                message: string;
              };
            }>;
            samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
              };
              output: {
                tenant: string;
                product: string;
              };
            }>;
            stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                stripeCustomerId?: string | undefined;
                checkoutSessionId?: string | undefined;
              };
              output:
                | {
                    valid: boolean;
                    hasPaymentFailed?: undefined;
                    isPremiumUsername?: undefined;
                    customer?: undefined;
                  }
                | {
                    valid: boolean;
                    hasPaymentFailed: boolean;
                    isPremiumUsername: boolean;
                    customer: {
                      username: string;
                      email: string;
                      stripeCustomerId: string;
                    };
                  };
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | null | undefined;
                    teamMemberEmail?: string | null | undefined;
                    routedTeamMemberIds?: number[] | null | undefined;
                    skipContactOwner?: boolean | null | undefined;
                    _enableTroubleshooter?: boolean | undefined;
                    _bypassCalendarBusyTimes?: boolean | undefined;
                    _shouldServeCache?: boolean | undefined;
                    routingFormResponseId?: number | undefined;
                    email?: string | null | undefined;
                  };
                  output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                    _isDryRun?: boolean | undefined;
                  };
                  output: {
                    uid: string;
                  };
                }>;
                isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    eventTypeId: number;
                    slots: {
                      utcStartIso: string;
                      utcEndIso: string;
                    }[];
                  };
                  output: {
                    slots: {
                      status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                      utcStartIso: string;
                      utcEndIso: string;
                    }[];
                  };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    uid: string | null;
                  };
                  output: void;
                }>;
              }
            >;
            event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                username: string;
                eventSlug: string;
                org: string | null;
                isTeamEvent?: boolean | undefined;
                fromRedirectOfNonOrgLink?: boolean | undefined;
              };
              output:
                | {
                    bookingFields: {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[] &
                      import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    subsetOfUsers: (
                      | {
                          metadata: undefined;
                          bookerUrl: string;
                          profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                          name: string | null;
                          id: number;
                          locale: string | null;
                          startTime: number;
                          endTime: number;
                          email: string;
                          timeZone: string;
                          username: string | null;
                          emailVerified: Date | null;
                          bio: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          bufferTime: number;
                          hideBranding: boolean;
                          theme: string | null;
                          createdDate: Date;
                          trialEndsAt: Date | null;
                          lastActiveAt: Date | null;
                          completedOnboarding: boolean;
                          timeFormat: number | null;
                          twoFactorSecret: string | null;
                          twoFactorEnabled: boolean;
                          backupCodes: string | null;
                          identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                          identityProviderId: string | null;
                          invitedTo: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          allowDynamicBooking: boolean | null;
                          allowSEOIndexing: boolean | null;
                          receiveMonthlyDigestEmail: boolean | null;
                          verified: boolean | null;
                          disableImpersonation: boolean;
                          locked: boolean;
                          isPlatformManaged: boolean;
                          movedToProfileId: number | null;
                          teams: {
                            id: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                          }[];
                        }
                      | {
                          metadata: undefined;
                          bookerUrl: string;
                          profile: {
                            organization: Omit<
                              {
                                name: string;
                                id: number;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                organizationSettings: {
                                  allowSEOIndexing: boolean;
                                  orgProfileRedirectsToVerifiedDomain: boolean;
                                } | null;
                                slug: string | null;
                                logoUrl: string | null;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                              } & Omit<
                                Pick<
                                  {
                                    id: number;
                                    name: string;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    bio: string | null;
                                    hideBranding: boolean;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    createdAt: Date;
                                    metadata: import(".prisma/client").Prisma.JsonValue | null;
                                    theme: string | null;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    bannerUrl: string | null;
                                    parentId: number | null;
                                    timeFormat: number | null;
                                    timeZone: string;
                                    weekStart: string;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                    createdByOAuthClientId: string | null;
                                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                    smsLockReviewedByAdmin: boolean;
                                    bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                    includeManagedEventsInLimits: boolean;
                                  },
                                  "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                                >,
                                "metadata"
                              > & {
                                  requestedSlug: string | null;
                                  metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?:
                                      | {
                                          teamSlug?: string | null | undefined;
                                          lastMigrationTime?: string | undefined;
                                          reverted?: boolean | undefined;
                                          lastRevertTime?: string | undefined;
                                        }
                                      | undefined;
                                    billingPeriod?:
                                      | import("@calcom/prisma/zod-utils").BillingPeriod
                                      | undefined;
                                  };
                                },
                              "metadata"
                            > & {
                              requestedSlug: string | null;
                              metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?:
                                  | {
                                      teamSlug?: string | null | undefined;
                                      lastMigrationTime?: string | undefined;
                                      reverted?: boolean | undefined;
                                      lastRevertTime?: string | undefined;
                                    }
                                  | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                              };
                            };
                            id: number;
                            uid: string;
                            userId: number;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            username: string;
                            organizationId: number;
                            upId: string;
                          };
                          name: string | null;
                          id: number;
                          locale: string | null;
                          startTime: number;
                          endTime: number;
                          email: string;
                          timeZone: string;
                          username: string | null;
                          emailVerified: Date | null;
                          bio: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          bufferTime: number;
                          hideBranding: boolean;
                          theme: string | null;
                          createdDate: Date;
                          trialEndsAt: Date | null;
                          lastActiveAt: Date | null;
                          completedOnboarding: boolean;
                          timeFormat: number | null;
                          twoFactorSecret: string | null;
                          twoFactorEnabled: boolean;
                          backupCodes: string | null;
                          identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                          identityProviderId: string | null;
                          invitedTo: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          allowDynamicBooking: boolean | null;
                          allowSEOIndexing: boolean | null;
                          receiveMonthlyDigestEmail: boolean | null;
                          verified: boolean | null;
                          disableImpersonation: boolean;
                          locked: boolean;
                          isPlatformManaged: boolean;
                          movedToProfileId: number | null;
                          teams: {
                            id: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                          }[];
                        }
                    )[];
                    users:
                      | (
                          | {
                              metadata: undefined;
                              bookerUrl: string;
                              profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                              name: string | null;
                              id: number;
                              locale: string | null;
                              startTime: number;
                              endTime: number;
                              email: string;
                              timeZone: string;
                              username: string | null;
                              emailVerified: Date | null;
                              bio: string | null;
                              avatarUrl: string | null;
                              weekStart: string;
                              bufferTime: number;
                              hideBranding: boolean;
                              theme: string | null;
                              createdDate: Date;
                              trialEndsAt: Date | null;
                              lastActiveAt: Date | null;
                              completedOnboarding: boolean;
                              timeFormat: number | null;
                              twoFactorSecret: string | null;
                              twoFactorEnabled: boolean;
                              backupCodes: string | null;
                              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                              identityProviderId: string | null;
                              invitedTo: number | null;
                              brandColor: string | null;
                              darkBrandColor: string | null;
                              allowDynamicBooking: boolean | null;
                              allowSEOIndexing: boolean | null;
                              receiveMonthlyDigestEmail: boolean | null;
                              verified: boolean | null;
                              disableImpersonation: boolean;
                              locked: boolean;
                              isPlatformManaged: boolean;
                              movedToProfileId: number | null;
                              teams: {
                                id: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                              }[];
                            }
                          | {
                              metadata: undefined;
                              bookerUrl: string;
                              profile: {
                                organization: Omit<
                                  {
                                    name: string;
                                    id: number;
                                    metadata: import(".prisma/client").Prisma.JsonValue;
                                    organizationSettings: {
                                      allowSEOIndexing: boolean;
                                      orgProfileRedirectsToVerifiedDomain: boolean;
                                    } | null;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    bannerUrl: string | null;
                                    isPlatform: boolean;
                                  } & Omit<
                                    Pick<
                                      {
                                        id: number;
                                        name: string;
                                        slug: string | null;
                                        logoUrl: string | null;
                                        calVideoLogo: string | null;
                                        appLogo: string | null;
                                        appIconLogo: string | null;
                                        bio: string | null;
                                        hideBranding: boolean;
                                        isPrivate: boolean;
                                        hideBookATeamMember: boolean;
                                        createdAt: Date;
                                        metadata: import(".prisma/client").Prisma.JsonValue | null;
                                        theme: string | null;
                                        brandColor: string | null;
                                        darkBrandColor: string | null;
                                        bannerUrl: string | null;
                                        parentId: number | null;
                                        timeFormat: number | null;
                                        timeZone: string;
                                        weekStart: string;
                                        isOrganization: boolean;
                                        pendingPayment: boolean;
                                        isPlatform: boolean;
                                        createdByOAuthClientId: string | null;
                                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                        smsLockReviewedByAdmin: boolean;
                                        bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                        includeManagedEventsInLimits: boolean;
                                      },
                                      | "name"
                                      | "id"
                                      | "metadata"
                                      | "slug"
                                      | "logoUrl"
                                      | "bannerUrl"
                                      | "isPlatform"
                                    >,
                                    "metadata"
                                  > & {
                                      requestedSlug: string | null;
                                      metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?:
                                          | {
                                              teamSlug?: string | null | undefined;
                                              lastMigrationTime?: string | undefined;
                                              reverted?: boolean | undefined;
                                              lastRevertTime?: string | undefined;
                                            }
                                          | undefined;
                                        billingPeriod?:
                                          | import("@calcom/prisma/zod-utils").BillingPeriod
                                          | undefined;
                                      };
                                    },
                                  "metadata"
                                > & {
                                  requestedSlug: string | null;
                                  metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?:
                                      | {
                                          teamSlug?: string | null | undefined;
                                          lastMigrationTime?: string | undefined;
                                          reverted?: boolean | undefined;
                                          lastRevertTime?: string | undefined;
                                        }
                                      | undefined;
                                    billingPeriod?:
                                      | import("@calcom/prisma/zod-utils").BillingPeriod
                                      | undefined;
                                  };
                                };
                                id: number;
                                uid: string;
                                userId: number;
                                createdAt: Date & string;
                                updatedAt: Date & string;
                                username: string;
                                organizationId: number;
                                upId: string;
                              };
                              name: string | null;
                              id: number;
                              locale: string | null;
                              startTime: number;
                              endTime: number;
                              email: string;
                              timeZone: string;
                              username: string | null;
                              emailVerified: Date | null;
                              bio: string | null;
                              avatarUrl: string | null;
                              weekStart: string;
                              bufferTime: number;
                              hideBranding: boolean;
                              theme: string | null;
                              createdDate: Date;
                              trialEndsAt: Date | null;
                              lastActiveAt: Date | null;
                              completedOnboarding: boolean;
                              timeFormat: number | null;
                              twoFactorSecret: string | null;
                              twoFactorEnabled: boolean;
                              backupCodes: string | null;
                              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                              identityProviderId: string | null;
                              invitedTo: number | null;
                              brandColor: string | null;
                              darkBrandColor: string | null;
                              allowDynamicBooking: boolean | null;
                              allowSEOIndexing: boolean | null;
                              receiveMonthlyDigestEmail: boolean | null;
                              verified: boolean | null;
                              disableImpersonation: boolean;
                              locked: boolean;
                              isPlatformManaged: boolean;
                              movedToProfileId: number | null;
                              teams: {
                                id: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                              }[];
                            }
                        )[]
                      | undefined;
                    locations: (Pick<
                      Partial<import("@calcom/app-store/locations").LocationObject>,
                      "link" | "address"
                    > &
                      Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    profile: {
                      image?: string | undefined;
                      name?: string | undefined;
                      username?: string | null | undefined;
                      weekStart: string;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      theme: null;
                      bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      } | null;
                    };
                    entity: {
                      considerUnpublished: boolean;
                      fromRedirectOfNonOrgLink: boolean;
                      orgSlug: string | null;
                      name: string | null;
                      teamSlug: null;
                      logoUrl: null;
                    };
                    isInstantEvent: boolean;
                    instantMeetingParameters: never[];
                    showInstantEventConnectNowModal: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    fieldTranslations: never[];
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?:
                        | {
                            alby?:
                              | {
                                  price: number;
                                  currency: string;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                }
                              | undefined;
                            basecamp3?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            campsite?: {} | undefined;
                            closecom?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            giphy?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  thankYouPage?: string | undefined;
                                }
                              | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            hitpay?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            hubspot?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            insihts?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  MATOMO_URL?: string | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            metapixel?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            "mock-payment-app"?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            nextcloudtalk?: {} | undefined;
                            office365calendar?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            office365video?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            paypal?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            "pipedrive-crm"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            plausible?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  PLAUSIBLE_URL?: string | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            posthog?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  TRACKING_ID?: string | undefined;
                                  API_HOST?: string | undefined;
                                }
                              | undefined;
                            qr_code?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "routing-forms"?: any;
                            salesforce?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  roundRobinLeadSkip?: boolean | undefined;
                                  roundRobinSkipCheckRecordOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                  skipContactCreation?: boolean | undefined;
                                  createEventOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  createNewContactUnderAccount?: boolean | undefined;
                                  createLeadIfAccountNull?: boolean | undefined;
                                  onBookingWriteToEventObject?: boolean | undefined;
                                  onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                  createEventOnLeadCheckForContact?: boolean | undefined;
                                  onBookingChangeRecordOwner?: boolean | undefined;
                                  onBookingChangeRecordOwnerName?: string | undefined;
                                  sendNoShowAttendeeData?: boolean | undefined;
                                  sendNoShowAttendeeDataField?: string | undefined;
                                  onBookingWriteToRecord?: boolean | undefined;
                                  onBookingWriteToRecordFields?:
                                    | Record<
                                        string,
                                        {
                                          value: string;
                                          fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                          whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                        }
                                      >
                                    | undefined;
                                  ignoreGuests?: boolean | undefined;
                                }
                              | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                  refundDaysCount?: number | undefined;
                                  refundCountCalendarDays?: boolean | undefined;
                                }
                              | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "event-type-app-card"?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            twipla?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            umami?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zoomvideo?: {} | undefined;
                          }
                        | undefined;
                    } | null;
                    isDynamic: boolean;
                    periodCountCalendarDays: boolean;
                    periodStartDate: null;
                    periodEndDate: null;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    periodType: "UNLIMITED";
                    periodDays: null;
                    slotInterval: null;
                    offsetStart: number;
                    customInputs: {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[];
                    disableGuests: boolean;
                    minimumBookingNotice: number;
                    schedule: null;
                    timeZone: null;
                    successRedirectUrl: string;
                    forwardParamsSuccessRedirect: boolean;
                    teamId: null;
                    scheduleId: null;
                    availability: never[];
                    price: number;
                    currency: string;
                    schedulingType: "COLLECTIVE";
                    seatsPerTimeSlot: null;
                    seatsShowAttendees: null;
                    seatsShowAvailabilityCount: null;
                    onlyShowFirstAvailableSlot: boolean;
                    allowReschedulingPastBookings: boolean;
                    id: number;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    recurringEvent: null;
                    destinationCalendar: null;
                    team: null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    bookingLimits: null;
                    durationLimits: null;
                    hidden: boolean;
                    userId: number;
                    parentId: null;
                    parent: null;
                    owner: null;
                    workflows: never[];
                    hosts: never[];
                    subsetOfHosts: never[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: null;
                    isRRWeightsEnabled: boolean;
                    rescheduleWithSameRoundRobinHost: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: null;
                    secondaryEmail: null;
                    maxLeadThreshold: null;
                    useEventLevelSelectedCalendars: boolean;
                    length: number;
                    slug: string;
                    title: string;
                    eventName: string;
                    description: string;
                    descriptionAsSafeHTML: string;
                    position: number;
                  }
                | {
                    bookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    description: string;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?:
                        | {
                            alby?:
                              | {
                                  price: number;
                                  currency: string;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                }
                              | undefined;
                            basecamp3?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            campsite?: {} | undefined;
                            closecom?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            giphy?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  thankYouPage?: string | undefined;
                                }
                              | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            hitpay?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            hubspot?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            insihts?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  MATOMO_URL?: string | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            metapixel?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            "mock-payment-app"?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            nextcloudtalk?: {} | undefined;
                            office365calendar?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            office365video?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            paypal?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            "pipedrive-crm"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            plausible?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  PLAUSIBLE_URL?: string | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            posthog?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  TRACKING_ID?: string | undefined;
                                  API_HOST?: string | undefined;
                                }
                              | undefined;
                            qr_code?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "routing-forms"?: any;
                            salesforce?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  roundRobinLeadSkip?: boolean | undefined;
                                  roundRobinSkipCheckRecordOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                  skipContactCreation?: boolean | undefined;
                                  createEventOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  createNewContactUnderAccount?: boolean | undefined;
                                  createLeadIfAccountNull?: boolean | undefined;
                                  onBookingWriteToEventObject?: boolean | undefined;
                                  onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                  createEventOnLeadCheckForContact?: boolean | undefined;
                                  onBookingChangeRecordOwner?: boolean | undefined;
                                  onBookingChangeRecordOwnerName?: string | undefined;
                                  sendNoShowAttendeeData?: boolean | undefined;
                                  sendNoShowAttendeeDataField?: string | undefined;
                                  onBookingWriteToRecord?: boolean | undefined;
                                  onBookingWriteToRecordFields?:
                                    | Record<
                                        string,
                                        {
                                          value: string;
                                          fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                          whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                        }
                                      >
                                    | undefined;
                                  ignoreGuests?: boolean | undefined;
                                }
                              | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                  refundDaysCount?: number | undefined;
                                  refundCountCalendarDays?: boolean | undefined;
                                }
                              | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "event-type-app-card"?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            twipla?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            umami?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zoomvideo?: {} | undefined;
                          }
                        | undefined;
                    } | null;
                    customInputs: {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[];
                    locations: (Pick<
                      Partial<import("@calcom/app-store/locations").LocationObject>,
                      "link" | "address"
                    > &
                      Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    bookingFields: {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[] &
                      import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    profile: {
                      username: string | null | undefined;
                      name: string | null;
                      weekStart: string;
                      image: string;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      theme: string | null;
                      bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      } | null;
                    };
                    subsetOfUsers: {
                      username: string | null;
                      name: string | null;
                      weekStart: string;
                      organizationId: any;
                      avatarUrl: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                      bookerUrl: string;
                    }[];
                    users:
                      | {
                          username: string | null;
                          name: string | null;
                          weekStart: string;
                          organizationId: any;
                          avatarUrl: string | null;
                          profile: import("@calcom/types/UserProfile").UserProfile;
                          bookerUrl: string;
                        }[]
                      | undefined;
                    entity: {
                      logoUrl?: string | undefined;
                      name: any;
                      fromRedirectOfNonOrgLink: boolean;
                      considerUnpublished: boolean;
                      orgSlug: string | null;
                      teamSlug: string | null;
                    };
                    isDynamic: boolean;
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    instantMeetingParameters: string[];
                    aiPhoneCallConfig: {
                      id: number;
                      eventTypeId: number;
                      enabled: boolean;
                      templateType: string;
                      schedulerName: string | null;
                      generalPrompt: string | null;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      guestName: string | null;
                      guestEmail: string | null;
                      guestCompany: string | null;
                      beginMessage: string | null;
                      llmId: string | null;
                    } | null;
                    assignAllTeamMembers: boolean;
                    owner:
                      | ({
                          name: string | null;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          username: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          theme: string | null;
                          defaultScheduleId: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          organization: {
                            name: string;
                            id: number;
                            slug: string | null;
                            bannerUrl: string | null;
                          } | null;
                        } & {
                          nonProfileUsername: string | null;
                          profile: import("@calcom/types/UserProfile").UserProfile;
                        })
                      | null;
                    subsetOfHosts: {
                      user: {
                        name: string | null;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        username: string | null;
                        avatarUrl: string | null;
                        weekStart: string;
                        theme: string | null;
                        defaultScheduleId: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        organization: {
                          name: string;
                          id: number;
                          slug: string | null;
                          bannerUrl: string | null;
                        } | null;
                      } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                      };
                    }[];
                    hosts:
                      | {
                          user: {
                            name: string | null;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            username: string | null;
                            avatarUrl: string | null;
                            weekStart: string;
                            theme: string | null;
                            defaultScheduleId: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            organization: {
                              name: string;
                              id: number;
                              slug: string | null;
                              bannerUrl: string | null;
                            } | null;
                          } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                          };
                        }[]
                      | undefined;
                    id: number;
                    length: number;
                    title: string;
                    team: {
                      name: string;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      slug: string | null;
                      parentId: number | null;
                      parent: {
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        bannerUrl: string | null;
                      } | null;
                      theme: string | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      logoUrl: string | null;
                      isPrivate: boolean;
                    } | null;
                    schedule: {
                      id: number;
                      timeZone: string | null;
                    } | null;
                    slug: string;
                    hidden: boolean;
                    teamId: number | null;
                    eventName: string | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    disableGuests: boolean;
                    seatsPerTimeSlot: number | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    rescheduleWithSameRoundRobinHost: boolean;
                    workflows: ({
                      workflow: {
                        steps: {
                          id: number;
                          template: import(".prisma/client").$Enums.WorkflowTemplates;
                          action: import(".prisma/client").$Enums.WorkflowActions;
                          workflowId: number;
                          stepNumber: number;
                          sendTo: string | null;
                          reminderBody: string | null;
                          emailSubject: string | null;
                          numberRequired: boolean | null;
                          sender: string | null;
                          numberVerificationPending: boolean;
                          includeCalendarEvent: boolean;
                        }[];
                      } & {
                        name: string;
                        id: number;
                        time: number | null;
                        userId: number | null;
                        position: number;
                        teamId: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                      };
                    } & {
                      id: number;
                      eventTypeId: number;
                      workflowId: number;
                    })[];
                    instantMeetingSchedule: {
                      id: number;
                      timeZone: string | null;
                    } | null;
                    fieldTranslations: {
                      field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                      targetLocale: string;
                      translatedText: string;
                    }[];
                  }
                | null;
            }>;
            ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output:
                | {
                    connectionExists: null;
                  }
                | {
                    connectionExists: boolean;
                  };
            }>;
            checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                email: string;
                userSessionEmail?: string | undefined;
              };
              output: boolean;
            }>;
          }
        >;
        auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                oldPassword: string;
                newPassword: string;
              };
              output: void;
            }>;
            verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                passwordInput: string;
              };
              output: void;
            }>;
            verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
              };
              output: true;
            }>;
            sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
                username?: string | undefined;
                language?: string | undefined;
                isVerifyingEmail?: boolean | undefined;
              };
              output: {
                ok: boolean;
                skipped: boolean;
              };
            }>;
            resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input:
                | {
                    email: string;
                  }
                | undefined;
              output: {
                ok: boolean;
                skipped: boolean;
              };
            }>;
            createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: void;
            }>;
          }
        >;
        deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                licenseKey?: string | undefined;
              };
              output: void;
            }>;
          }
        >;
        bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                filters: {
                  teamIds?: number[] | undefined;
                  userIds?: number[] | undefined;
                  status?: "past" | "upcoming" | "recurring" | "cancelled" | "unconfirmed" | undefined;
                  eventTypeIds?: number[] | undefined;
                  attendeeEmail?:
                    | string
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | undefined;
                  attendeeName?:
                    | string
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | undefined;
                  afterStartDate?: string | undefined;
                  beforeEndDate?: string | undefined;
                  afterUpdatedDate?: string | undefined;
                  beforeUpdatedDate?: string | undefined;
                };
                limit?: number | null | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                bookings: {
                  eventType: {
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    eventTypeColor: {
                      lightEventTypeColor: string;
                      darkEventTypeColor: string;
                    } | null;
                    price: number;
                    currency: string;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    } | null;
                    id?: number | undefined;
                    length?: number | undefined;
                    title?: string | undefined;
                    team?:
                      | {
                          name: string;
                          id: number;
                          slug: string | null;
                        }
                      | null
                      | undefined;
                    slug?: string | undefined;
                    eventName?: string | null | undefined;
                    disableGuests?: boolean | undefined;
                    seatsShowAttendees?: boolean | null | undefined;
                    seatsShowAvailabilityCount?: boolean | null | undefined;
                    schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                    allowReschedulingPastBookings?: boolean | undefined;
                  };
                  startTime: string;
                  endTime: string;
                  payment: {
                    currency: string;
                    paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                    success: boolean;
                    amount: number;
                  }[];
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  } | null;
                  id: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  assignmentReason: {
                    id: number;
                    createdAt: Date;
                    bookingId: number;
                    reasonEnum: import(".prisma/client").$Enums.AssignmentReasonEnum;
                    reasonString: string;
                  }[];
                  references: {
                    id: number;
                    type: string;
                    uid: string;
                    credentialId: number | null;
                    delegationCredentialId: string | null;
                    domainWideDelegationCredentialId: string | null;
                    deleted: boolean | null;
                    bookingId: number | null;
                    meetingId: string | null;
                    thirdPartyRecurringEventId: string | null;
                    meetingPassword: string | null;
                    meetingUrl: string | null;
                    externalCalendarId: string | null;
                  }[];
                  attendees: {
                    name: string;
                    id: number;
                    locale: string | null;
                    email: string;
                    timeZone: string;
                    phoneNumber: string | null;
                    noShow: boolean | null;
                    bookingId: number | null;
                  }[];
                  seatsReferences: {
                    attendee: {
                      email: string;
                    };
                    referenceUid: string;
                  }[];
                  routedFromRoutingFormReponse: {
                    id: number;
                  } | null;
                  uid: string;
                  userPrimaryEmail: string | null;
                  customInputs: import(".prisma/client").Prisma.JsonValue;
                  responses: import(".prisma/client").Prisma.JsonValue;
                  location: string | null;
                  paid: boolean;
                  rescheduled: boolean | null;
                  recurringEventId: string | null;
                  isRecorded: boolean;
                }[];
                recurringInfo: {
                  recurringEventId: string | null;
                  count: number;
                  firstDate: Date | null;
                  bookings: {
                    [key: string]: Date[];
                  };
                }[];
                nextCursor: number | null;
              };
            }>;
            requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: string;
                rescheduleReason?: string | undefined;
              };
              output: void;
            }>;
            editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                credentialId: number | null;
                newLocation: string;
              };
              output: {
                message: string;
              };
            }>;
            addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                guests: string[];
                bookingId: number;
              };
              output: {
                message: string;
              };
            }>;
            confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                confirmed: boolean;
                recurringEventId?: string | undefined;
                reason?: string | undefined;
                emailsEnabled?: boolean | undefined;
                platformClientParams?:
                  | {
                      platformClientId?: string | undefined;
                      platformRescheduleUrl?: string | null | undefined;
                      platformCancelUrl?: string | null | undefined;
                      platformBookingUrl?: string | null | undefined;
                      platformBookingLocation?: string | undefined;
                    }
                  | undefined;
              };
              output: {
                message: string;
                status: "ACCEPTED" | "REJECTED";
              };
            }>;
            getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                seatReferenceUid: string;
              };
              output: number;
            }>;
            find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingUid?: string | undefined;
              };
              output: {
                booking: {
                  id: number;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  uid: string;
                  eventTypeId: number | null;
                  startTime: Date;
                  endTime: Date;
                  paid: boolean;
                } | null;
              };
            }>;
            getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingId: number;
              };
              output: {
                booking: {
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  uid: string;
                  eventTypeId: number | null;
                  startTime: Date;
                  endTime: Date;
                  location: string | null;
                } | null;
              };
            }>;
          }
        >;
        eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                          schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                        }
                      | undefined;
                    forRoutingForms?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                allUsersAcrossAllEventTypes: Map<
                  number,
                  {
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  }
                >;
                eventTypeGroups: {
                  eventTypes: {
                    userIds: number[];
                    safeDescription: string | undefined;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    } | null;
                    children: {
                      users: ({
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                      } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                      })[];
                      id: number;
                      length: number;
                      title: string;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      description: string | null;
                      userId: number | null;
                      timeZone: string | null;
                      slug: string;
                      position: number;
                      locations: import(".prisma/client").Prisma.JsonValue;
                      offsetStart: number;
                      hidden: boolean;
                      profileId: number | null;
                      teamId: number | null;
                      useEventLevelSelectedCalendars: boolean;
                      eventName: string | null;
                      parentId: number | null;
                      bookingFields: import(".prisma/client").Prisma.JsonValue;
                      periodType: import(".prisma/client").$Enums.PeriodType;
                      periodStartDate: Date | null;
                      periodEndDate: Date | null;
                      periodDays: number | null;
                      periodCountCalendarDays: boolean | null;
                      lockTimeZoneToggleOnBookingPage: boolean;
                      requiresConfirmation: boolean;
                      requiresConfirmationWillBlockSlot: boolean;
                      requiresConfirmationForFreeEmail: boolean;
                      requiresBookerEmailVerification: boolean;
                      canSendCalVideoTranscriptionEmails: boolean;
                      autoTranslateDescriptionEnabled: boolean;
                      recurringEvent: import(".prisma/client").Prisma.JsonValue;
                      disableGuests: boolean;
                      hideCalendarNotes: boolean;
                      hideCalendarEventDetails: boolean;
                      minimumBookingNotice: number;
                      beforeEventBuffer: number;
                      afterEventBuffer: number;
                      seatsPerTimeSlot: number | null;
                      onlyShowFirstAvailableSlot: boolean;
                      seatsShowAttendees: boolean | null;
                      seatsShowAvailabilityCount: boolean | null;
                      schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                      scheduleId: number | null;
                      price: number;
                      currency: string;
                      slotInterval: number | null;
                      successRedirectUrl: string | null;
                      forwardParamsSuccessRedirect: boolean | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      durationLimits: import(".prisma/client").Prisma.JsonValue;
                      isInstantEvent: boolean;
                      instantMeetingExpiryTimeOffsetInSeconds: number;
                      instantMeetingScheduleId: number | null;
                      instantMeetingParameters: string[];
                      assignAllTeamMembers: boolean;
                      assignRRMembersUsingSegment: boolean;
                      rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                      useEventTypeDestinationCalendarEmail: boolean;
                      isRRWeightsEnabled: boolean;
                      maxLeadThreshold: number | null;
                      allowReschedulingPastBookings: boolean;
                      eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                      rescheduleWithSameRoundRobinHost: boolean;
                      secondaryEmailId: number | null;
                    }[];
                    id: number;
                    length: number;
                    title: string;
                    description: string | null;
                    hashedLink: {
                      link: string;
                      id: number;
                      eventTypeId: number;
                    }[];
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                    hosts: ({
                      user: {
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                      };
                    } & {
                      userId: number;
                      eventTypeId: number;
                      createdAt: Date;
                      scheduleId: number | null;
                      isFixed: boolean;
                      priority: number | null;
                      weight: number | null;
                      weightAdjustment: number | null;
                    })[];
                    aiPhoneCallConfig: {
                      id: number;
                      eventTypeId: number;
                      enabled: boolean;
                      templateType: string;
                      schedulerName: string | null;
                      generalPrompt: string | null;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      guestName: string | null;
                      guestEmail: string | null;
                      guestCompany: string | null;
                      beginMessage: string | null;
                      llmId: string | null;
                    } | null;
                  }[];
                  teamId?: number | null;
                  parentId?: number | null;
                  bookerUrl: string;
                  membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                  profile: {
                    slug: (string | null) | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean;
                  };
                  metadata: {
                    membershipCount: number;
                    readOnly: boolean;
                  };
                }[];
                profiles: {
                  teamId: number | null | undefined;
                  membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                  membershipCount: number;
                  readOnly: boolean;
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                }[];
              };
            }>;
            getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                          schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                        }
                      | undefined;
                    forRoutingForms?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                eventTypeGroups: {
                  teamId?: number | null;
                  parentId?: number | null;
                  bookerUrl: string;
                  membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                  profile: {
                    slug: (string | null) | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean;
                  };
                  metadata: {
                    membershipCount: number;
                    readOnly: boolean;
                  };
                }[];
                profiles: {
                  teamId: number | null | undefined;
                  membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                  membershipCount: number;
                  readOnly: boolean;
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                }[];
              };
            }>;
            getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                group: {
                  teamId?: number | null | undefined;
                  parentId?: number | null | undefined;
                };
                filters?:
                  | {
                      teamIds?: number[] | undefined;
                      upIds?: string[] | undefined;
                      schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    }
                  | undefined;
                forRoutingForms?: boolean | undefined;
                cursor?: number | null | undefined;
                limit?: number | undefined;
                searchQuery?: string | undefined;
              };
              output: {
                eventTypes: {
                  safeDescription: string | undefined;
                  users: ({
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  })[];
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  children: {
                    users: ({
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                    id: number;
                    length: number;
                    title: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    description: string | null;
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                  }[];
                  id: number;
                  length: number;
                  title: string;
                  description: string | null;
                  hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                  }[];
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                  hosts: ({
                    user: {
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    };
                  } & {
                    userId: number;
                    eventTypeId: number;
                    createdAt: Date;
                    scheduleId: number | null;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                    weightAdjustment: number | null;
                  })[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                }[];
                nextCursor: number | null | undefined;
              };
            }>;
            getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    teamId?: number | undefined;
                    isOrg?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                eventTypeOptions: {
                  value: string;
                  label: string;
                }[];
                teamOptions: {
                  value: string;
                  label: string;
                }[];
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                length: number;
                title: string;
                metadata: import(".prisma/client").Prisma.JsonValue;
                description: string | null;
                slug: string;
                hidden: boolean;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
              }[];
            }>;
            listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                title: string;
                team: {
                  name: string;
                  id: number;
                } | null;
                slug: string;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                length: number;
                title: string;
                slug: string;
                metadata?:
                  | {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    }
                  | null
                  | undefined;
                description?: string | null | undefined;
                locations?:
                  | {
                      type: string;
                      address?: string | undefined;
                      link?: string | undefined;
                      displayLocationPublicly?: boolean | undefined;
                      hostPhoneNumber?: string | undefined;
                      credentialId?: number | undefined;
                      teamName?: string | undefined;
                    }[]
                  | undefined;
                hidden?: boolean | undefined;
                teamId?: number | null | undefined;
                disableGuests?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | undefined;
                slotInterval?: number | null | undefined;
              };
              output: {
                eventType: {
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                };
              };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
              };
              output: {
                eventType: {
                  schedule: number | null;
                  instantMeetingSchedule: number | null;
                  scheduleName: string | null;
                  recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                  bookingLimits: Partial<
                    Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                  > | null;
                  durationLimits: Partial<
                    Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                  > | null;
                  eventTypeColor: {
                    lightEventTypeColor: string;
                    darkEventTypeColor: string;
                  } | null;
                  locations: import("@calcom/app-store/locations").LocationObject[];
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?:
                      | {
                          alby?:
                            | {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                              }
                            | undefined;
                          basecamp3?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          campsite?: {} | undefined;
                          closecom?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          dailyvideo?: {} | undefined;
                          fathom?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          feishucalendar?: {} | undefined;
                          ga4?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          giphy?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                              }
                            | undefined;
                          googlecalendar?: {} | undefined;
                          googlevideo?: {} | undefined;
                          gtm?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          hitpay?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          hubspot?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          insihts?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          intercom?: {} | undefined;
                          jelly?: {} | undefined;
                          jitsivideo?: {} | undefined;
                          larkcalendar?: {} | undefined;
                          make?: {} | undefined;
                          matomo?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          metapixel?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          "mock-payment-app"?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          nextcloudtalk?: {} | undefined;
                          office365calendar?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          office365video?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          paypal?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          "pipedrive-crm"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          plausible?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          posthog?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                              }
                            | undefined;
                          qr_code?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "routing-forms"?: any;
                          salesforce?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                roundRobinSkipCheckRecordOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                                createEventOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                createNewContactUnderAccount?: boolean | undefined;
                                createLeadIfAccountNull?: boolean | undefined;
                                onBookingWriteToEventObject?: boolean | undefined;
                                onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                createEventOnLeadCheckForContact?: boolean | undefined;
                                onBookingChangeRecordOwner?: boolean | undefined;
                                onBookingChangeRecordOwnerName?: string | undefined;
                                sendNoShowAttendeeData?: boolean | undefined;
                                sendNoShowAttendeeDataField?: string | undefined;
                                onBookingWriteToRecord?: boolean | undefined;
                                onBookingWriteToRecordFields?:
                                  | Record<
                                      string,
                                      {
                                        value: string;
                                        fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                        whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                      }
                                    >
                                  | undefined;
                                ignoreGuests?: boolean | undefined;
                              }
                            | undefined;
                          shimmervideo?: {} | undefined;
                          stripe?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                refundDaysCount?: number | undefined;
                                refundCountCalendarDays?: boolean | undefined;
                              }
                            | undefined;
                          tandemvideo?: {} | undefined;
                          "booking-pages-tag"?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "event-type-app-card"?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          twipla?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          umami?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          vital?: {} | undefined;
                          webex?: {} | undefined;
                          wordpress?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zapier?: {} | undefined;
                          "zoho-bigin"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zohocalendar?: {} | undefined;
                          zohocrm?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zoomvideo?: {} | undefined;
                        }
                      | undefined;
                  };
                  customInputs: {
                    id: number;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    label: string;
                    eventTypeId: number;
                    required: boolean;
                    placeholder: string;
                    options?:
                      | {
                          type: string;
                          label: string;
                        }[]
                      | null
                      | undefined;
                    hasToBeCreated?: boolean | undefined;
                  }[];
                  users: {
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                  }[];
                  bookerUrl: string;
                  children: {
                    owner: {
                      avatar: string;
                      email: string;
                      name: string;
                      username: string;
                      membership: import(".prisma/client").$Enums.MembershipRole;
                      id: number;
                      avatarUrl: string | null;
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                    created: boolean;
                    slug: string;
                    hidden: boolean;
                  }[];
                  id: number;
                  length: number;
                  title: string;
                  description: string | null;
                  destinationCalendar: {
                    id: number;
                    userId: number | null;
                    eventTypeId: number | null;
                    integration: string;
                    externalId: string;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    delegationCredentialId: string | null;
                    domainWideDelegationCredentialId: string | null;
                  } | null;
                  team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      organizationSettings: {
                        lockEventTypeCreationForUsers: boolean;
                      } | null;
                      slug: string | null;
                    } | null;
                    members: {
                      user: {
                        name: string | null;
                        id: number;
                        locale: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                        eventTypes: {
                          slug: string;
                        }[];
                      };
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                    }[];
                  } | null;
                  hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                  }[];
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  offsetStart: number;
                  hidden: boolean;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                  hosts: {
                    userId: number;
                    scheduleId: number | null;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                  }[];
                  owner: {
                    id: number;
                  } | null;
                  webhooks: {
                    id: string;
                    eventTypeId: number | null;
                    secret: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                  }[];
                  parent: {
                    id: number;
                    teamId: number | null;
                  } | null;
                  workflows: ({
                    workflow: {
                      name: string;
                      id: number;
                      time: number | null;
                      team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } | null;
                      userId: number | null;
                      teamId: number | null;
                      steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        stepNumber: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                      }[];
                      trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                      timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                      activeOn: {
                        eventType: {
                          id: number;
                          title: string;
                          parentId: number | null;
                          _count: {
                            children: number;
                          };
                        };
                      }[];
                    };
                  } & {
                    id: number;
                    eventTypeId: number;
                    workflowId: number;
                  })[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                  fieldTranslations: {
                    field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                    targetLocale: string;
                    translatedText: string;
                  }[];
                } & {
                  users: ({
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                  } & {
                    avatar: string;
                  })[];
                  periodStartDate: string | null;
                  periodEndDate: string | null;
                  bookingFields: {
                    name: string;
                    type:
                      | "number"
                      | "boolean"
                      | "phone"
                      | "name"
                      | "address"
                      | "select"
                      | "textarea"
                      | "text"
                      | "checkbox"
                      | "radio"
                      | "email"
                      | "url"
                      | "multiselect"
                      | "multiemail"
                      | "radioInput";
                    label?: string | undefined;
                    options?:
                      | {
                          label: string;
                          value: string;
                        }[]
                      | undefined;
                    required?: boolean | undefined;
                    placeholder?: string | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?:
                      | Record<
                          string,
                          {
                            type: "phone" | "address" | "text";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                          }
                        >
                      | undefined;
                    minLength?: number | undefined;
                    excludeEmails?: string | undefined;
                    requireEmails?: string | undefined;
                    variant?: string | undefined;
                    variantsConfig?:
                      | {
                          variants: Record<
                            string,
                            {
                              fields: {
                                name: string;
                                type:
                                  | "number"
                                  | "boolean"
                                  | "phone"
                                  | "name"
                                  | "address"
                                  | "select"
                                  | "textarea"
                                  | "text"
                                  | "checkbox"
                                  | "radio"
                                  | "email"
                                  | "url"
                                  | "multiselect"
                                  | "multiemail"
                                  | "radioInput";
                                label?: string | undefined;
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                minLength?: number | undefined;
                                excludeEmails?: string | undefined;
                                requireEmails?: string | undefined;
                              }[];
                            }
                          >;
                        }
                      | undefined;
                    views?:
                      | {
                          id: string;
                          label: string;
                          description?: string | undefined;
                        }[]
                      | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?:
                      | "user"
                      | "system"
                      | "system-but-optional"
                      | "system-but-hidden"
                      | "user-readonly"
                      | undefined;
                    sources?:
                      | {
                          id: string;
                          type: string;
                          label: string;
                          editUrl?: string | undefined;
                          fieldRequired?: boolean | undefined;
                        }[]
                      | undefined;
                    disableOnPrefill?: boolean | undefined;
                  }[] &
                    import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                };
                locationOptions: {
                  label: string;
                  options: {
                    label: string;
                    value: string;
                    disabled?: boolean;
                    icon?: string;
                    slug?: string;
                    credentialId?: number;
                  }[];
                }[];
                destinationCalendar: {
                  id: number;
                  userId: number | null;
                  eventTypeId: number | null;
                  integration: string;
                  externalId: string;
                  primaryEmail: string | null;
                  credentialId: number | null;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                } | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  parentId: number | null;
                  parent: {
                    organizationSettings: {
                      lockEventTypeCreationForUsers: boolean;
                    } | null;
                    slug: string | null;
                  } | null;
                  members: {
                    user: {
                      name: string | null;
                      id: number;
                      locale: string | null;
                      email: string;
                      username: string | null;
                      avatarUrl: string | null;
                      defaultScheduleId: number | null;
                      eventTypes: {
                        slug: string;
                      }[];
                    };
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                  }[];
                } | null;
                teamMembers: {
                  profileId: number | null;
                  eventTypes: string[];
                  membership: import(".prisma/client").$Enums.MembershipRole;
                  name: string | null;
                  id: number;
                  locale: string | null;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  defaultScheduleId: number | null;
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                  avatar: string;
                }[];
                currentUserMembership: {
                  user: {
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                    eventTypes: {
                      slug: string;
                    }[];
                  };
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                } | null;
                isUserOrganizationAdmin: boolean;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: (number[] & (string | number)[]) | undefined;
                children?:
                  | {
                      hidden: boolean;
                      owner: {
                        name: string;
                        id: number;
                        email: string;
                        eventTypeSlugs: string[];
                      };
                    }[]
                  | undefined;
                length?: number | undefined;
                title?: string | undefined;
                metadata?:
                  | {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    }
                  | null
                  | undefined;
                description?: string | null | undefined;
                destinationCalendar?:
                  | {
                      integration: string;
                      externalId: string;
                    }
                  | null
                  | undefined;
                schedule?: number | null | undefined;
                userId?: number | null | undefined;
                customInputs?:
                  | {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[]
                  | undefined;
                timeZone?: string | null | undefined;
                slug?: string | undefined;
                position?: number | undefined;
                locations?:
                  | {
                      type: string;
                      address?: string | undefined;
                      link?: string | undefined;
                      displayLocationPublicly?: boolean | undefined;
                      hostPhoneNumber?: string | undefined;
                      credentialId?: number | undefined;
                      teamName?: string | undefined;
                    }[]
                  | undefined;
                offsetStart?: number | undefined;
                hidden?: boolean | undefined;
                profileId?: number | null | undefined;
                teamId?: number | null | undefined;
                useEventLevelSelectedCalendars?: boolean | undefined;
                eventName?: string | null | undefined;
                parentId?: number | null | undefined;
                bookingFields?:
                  | {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[]
                  | undefined;
                periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                periodStartDate?: Date | null | undefined;
                periodEndDate?: Date | null | undefined;
                periodDays?: number | null | undefined;
                periodCountCalendarDays?: boolean | null | undefined;
                lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                requiresConfirmation?: boolean | undefined;
                requiresConfirmationWillBlockSlot?: boolean | undefined;
                requiresConfirmationForFreeEmail?: boolean | undefined;
                requiresBookerEmailVerification?: boolean | undefined;
                canSendCalVideoTranscriptionEmails?: boolean | undefined;
                autoTranslateDescriptionEnabled?: boolean | undefined;
                recurringEvent?:
                  | {
                      count: number;
                      interval: number;
                      freq: import("@calcom/prisma/zod-utils").Frequency;
                      dtstart?: Date | undefined;
                      until?: Date | undefined;
                      tzid?: string | undefined;
                    }
                  | null
                  | undefined;
                disableGuests?: boolean | undefined;
                hideCalendarNotes?: boolean | undefined;
                hideCalendarEventDetails?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                seatsPerTimeSlot?: number | null | undefined;
                onlyShowFirstAvailableSlot?: boolean | undefined;
                seatsShowAttendees?: boolean | null | undefined;
                seatsShowAvailabilityCount?: boolean | null | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | null | undefined;
                price?: number | undefined;
                currency?: string | undefined;
                slotInterval?: number | null | undefined;
                successRedirectUrl?: string | null | undefined;
                forwardParamsSuccessRedirect?: boolean | null | undefined;
                bookingLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                durationLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                isInstantEvent?: boolean | undefined;
                instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
                instantMeetingScheduleId?: number | null | undefined;
                instantMeetingParameters?: string[] | undefined;
                assignAllTeamMembers?: boolean | undefined;
                assignRRMembersUsingSegment?: boolean | undefined;
                rrSegmentQueryValue?:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | null
                  | undefined;
                useEventTypeDestinationCalendarEmail?: boolean | undefined;
                isRRWeightsEnabled?: boolean | undefined;
                maxLeadThreshold?: number | null | undefined;
                allowReschedulingPastBookings?: boolean | undefined;
                eventTypeColor?:
                  | {
                      lightEventTypeColor: string;
                      darkEventTypeColor: string;
                    }
                  | null
                  | undefined;
                rescheduleWithSameRoundRobinHost?: boolean | undefined;
                secondaryEmailId?: number | null | undefined;
                hosts?:
                  | {
                      userId: number;
                      profileId?: number | null | undefined;
                      isFixed?: boolean | undefined;
                      priority?: number | null | undefined;
                      weight?: number | null | undefined;
                      scheduleId?: number | null | undefined;
                    }[]
                  | undefined;
                instantMeetingSchedule?: number | null | undefined;
                calAiPhoneScript?: string | undefined;
                multiplePrivateLinks?: string[] | undefined;
                aiPhoneCallConfig?:
                  | {
                      enabled: boolean;
                      templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                      generalPrompt: string;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      beginMessage: string | null;
                      guestName?: string | null | undefined;
                      guestEmail?: string | null | undefined;
                      guestCompany?: string | null | undefined;
                    }
                  | undefined;
              };
              output: {
                eventType: {
                  children: {
                    userId: number | null;
                  }[];
                  title: string;
                  description: string | null;
                  team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      slug: string | null;
                    } | null;
                    members: {
                      user: {
                        name: string | null;
                        id: number;
                        email: string;
                        eventTypes: {
                          slug: string;
                        }[];
                      };
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                    }[];
                  } | null;
                  isRRWeightsEnabled: boolean;
                  hosts: {
                    userId: number;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                  }[];
                  workflows: {
                    workflowId: number;
                  }[];
                  aiPhoneCallConfig: {
                    enabled: boolean;
                    generalPrompt: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                  fieldTranslations: {
                    field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                  }[];
                };
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
              };
              output: {
                id: number;
              };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
                length: number;
                title: string;
                description: string;
                slug: string;
                teamId?: number | null | undefined;
              };
              output: {
                eventType: {
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                };
              };
            }>;
            bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                eventTypes: {
                  logo: string | undefined;
                  id: number;
                  title: string;
                  locations: import(".prisma/client").Prisma.JsonValue;
                }[];
              };
            }>;
            bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
          }
        >;
        availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                schedules: {
                  isDefault: boolean;
                  name: string;
                  id: number;
                  availability: {
                    id: number;
                    date: Date | null;
                    userId: number | null;
                    eventTypeId: number | null;
                    startTime: Date;
                    endTime: Date;
                    scheduleId: number | null;
                    days: number[];
                  }[];
                  timeZone: string | null;
                }[];
              };
            }>;
            user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                username: string;
                dateFrom: string;
                dateTo: string;
                eventTypeId?: string | number | undefined;
                withSource?: boolean | undefined;
              };
              output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats:
                  | {
                      uid: string;
                      startTime: Date;
                      _count: {
                        attendees: number;
                      };
                    }[]
                  | null;
                datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
              };
            }>;
            listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                limit: number;
                loggedInUsersTz: string;
                cursor?: number | null | undefined;
                teamId?: number | undefined;
                searchString?: string | undefined;
              };
              output: {
                rows: (
                  | {
                      id: number;
                      organizationId: number | null;
                      name: string | null;
                      username: string | null;
                      email: string;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      defaultScheduleId: number;
                      dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                      avatarUrl?: undefined;
                      profile?: undefined;
                    }
                  | {
                      id: number;
                      username: string | null;
                      email: string;
                      avatarUrl: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                      organizationId: number | null;
                      name: string | null;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      defaultScheduleId: number;
                      dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    }
                )[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                  isApartOfAnyTeam: boolean;
                };
              };
            }>;
            schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    scheduleId?: number | undefined;
                    isManagedEventType?: boolean | undefined;
                  };
                  output: {
                    id: number;
                    name: string;
                    isManaged: boolean;
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    schedule: {
                      id: number;
                      date: Date | null;
                      userId: number | null;
                      eventTypeId: number | null;
                      startTime: Date;
                      endTime: Date;
                      scheduleId: number | null;
                      days: number[];
                    }[];
                    availability: {
                      end: Date;
                      userId?: number | null;
                      start: Date;
                    }[][];
                    timeZone: string;
                    dateOverrides: {
                      ranges: import("@calcom/types/schedule").TimeRange[];
                    }[];
                    isDefault: boolean;
                    isLastSchedule: boolean;
                    readOnly: boolean;
                  };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    schedule?:
                      | {
                          end: Date;
                          start: Date;
                        }[][]
                      | undefined;
                    eventTypeId?: number | undefined;
                  };
                  output: {
                    schedule: {
                      name: string;
                      id: number;
                      userId: number;
                      timeZone: string | null;
                    };
                  };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                  };
                  output: void;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                    timeZone?: string | undefined;
                    name?: string | undefined;
                    isDefault?: boolean | undefined;
                    schedule?:
                      | {
                          end: Date;
                          start: Date;
                        }[][]
                      | undefined;
                    dateOverrides?:
                      | {
                          end: Date;
                          start: Date;
                        }[]
                      | undefined;
                  };
                  output:
                    | {
                        schedule: {
                          name: string;
                          id: number;
                          userId: number;
                        };
                        isDefault: boolean;
                        availability?: undefined;
                        timeZone?: undefined;
                        prevDefaultId?: undefined;
                        currentDefaultId?: undefined;
                      }
                    | {
                        schedule: {
                          name: string;
                          id: number;
                          eventType: {
                            id: number;
                            eventName: string | null;
                          }[];
                          availability: {
                            id: number;
                            date: Date | null;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                          }[];
                          userId: number;
                          timeZone: string | null;
                        };
                        availability: import("@calcom/types/schedule").Schedule;
                        timeZone: string;
                        isDefault: boolean;
                        prevDefaultId: number | null;
                        currentDefaultId: number | null;
                      };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                  };
                  output: {
                    schedule: {
                      name: string;
                      id: number;
                      userId: number;
                      timeZone: string | null;
                    };
                  };
                }>;
                getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    userId?: number | undefined;
                  };
                  output:
                    | {
                        hasDefaultSchedule: boolean;
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                          id: number;
                          date: Date | null;
                          userId: number | null;
                          eventTypeId: number | null;
                          startTime: Date;
                          endTime: Date;
                          scheduleId: number | null;
                          days: number[];
                        }[];
                        availability: {
                          end: Date;
                          userId?: number | null;
                          start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                          ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                      }
                    | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                        hasDefaultSchedule: boolean;
                      };
                }>;
                getAllSchedulesByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    userId: number;
                  };
                  output: {
                    schedules: {
                      isDefault: boolean;
                      readOnly: boolean;
                      name: string;
                      id: number;
                      userId: number;
                    }[];
                  };
                }>;
                getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    eventSlug: string;
                  };
                  output:
                    | {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                          id: number;
                          date: Date | null;
                          userId: number | null;
                          eventTypeId: number | null;
                          startTime: Date;
                          endTime: Date;
                          scheduleId: number | null;
                          days: number[];
                        }[];
                        availability: {
                          end: Date;
                          userId?: number | null;
                          start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                          ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                      }
                    | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                      };
                }>;
                bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    eventTypeIds: number[];
                    selectedDefaultScheduleId?: number | null | undefined;
                  };
                  output: import("@prisma/client/runtime/library").GetBatchResult;
                }>;
              }
            >;
            calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                dateFrom: string | null;
                dateTo: string | null;
                loggedInUsersTz: string;
                calendarsToLoad: {
                  externalId: string;
                  credentialId: number;
                }[];
              };
              output: import("@calcom/types/Calendar").EventBusyDate[];
            }>;
          }
        >;
        teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                isOrg?: boolean | undefined;
              };
              output: {
                membership: {
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                };
                inviteToken:
                  | {
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                metadata: {
                  requestedSlug?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                };
                bookingLimits: Partial<
                  Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                > | null;
                logo?: string | undefined;
                name: string;
                id: number;
                children: {
                  name: string;
                  slug: string | null;
                }[];
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  slug: string | null;
                  logoUrl: string | null;
                  isPrivate: boolean;
                  isOrganization: boolean;
                } | null;
                bio: string | null;
                hideBranding: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                logoUrl: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                includeManagedEventsInLimits: boolean;
                isOrganization: boolean;
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includeOrgs?: boolean | undefined;
                  }
                | undefined;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken:
                  | {
                      id: number;
                      createdAt: Date;
                      updatedAt: Date;
                      teamId: number | null;
                      secondaryEmailId: number | null;
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              }[];
            }>;
            listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken:
                  | {
                      id: number;
                      createdAt: Date;
                      updatedAt: Date;
                      teamId: number | null;
                      secondaryEmailId: number | null;
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                slug: string;
                logo?: string | null | undefined;
              };
              output:
                | {
                    url: string;
                    message: string;
                    team: null;
                  }
                | {
                    url: string;
                    message: string;
                    team: {
                      name: string;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      createdAt: Date;
                      timeZone: string;
                      slug: string | null;
                      parentId: number | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      bio: string | null;
                      weekStart: string;
                      hideBranding: boolean;
                      theme: string | null;
                      timeFormat: number | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      smsLockState: import(".prisma/client").$Enums.SMSLockState;
                      smsLockReviewedByAdmin: boolean;
                      logoUrl: string | null;
                      calVideoLogo: string | null;
                      appLogo: string | null;
                      appIconLogo: string | null;
                      isPrivate: boolean;
                      hideBookATeamMember: boolean;
                      bannerUrl: string | null;
                      isOrganization: boolean;
                      pendingPayment: boolean;
                      isPlatform: boolean;
                      createdByOAuthClientId: string | null;
                      includeManagedEventsInLimits: boolean;
                    };
                  };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                bio?: string | undefined;
                name?: string | undefined;
                logo?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                isPrivate?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                bookingLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                includeManagedEventsInLimits?: boolean | undefined;
              };
              output:
                | {
                    logoUrl: string | null;
                    name: string;
                    bio: string | null;
                    slug: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bookingLimits: import("@calcom/types/Calendar").IntervalLimit;
                    includeManagedEventsInLimits: boolean;
                  }
                | undefined;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            }>;
            removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                memberIds: number[];
                isOrg?: boolean | undefined;
              };
              output: void;
            }>;
            inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                teamId: number;
                language: string;
                usernameOrEmail: (
                  | string
                  | (
                      | string
                      | {
                          role: "ADMIN" | "MEMBER" | "OWNER";
                          email: string;
                        }
                    )[]
                ) &
                  (
                    | string
                    | (
                        | string
                        | {
                            role: "ADMIN" | "MEMBER" | "OWNER";
                            email: string;
                          }
                      )[]
                    | undefined
                  );
                role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
                isPlatform?: boolean | undefined;
              };
              output: {
                usernameOrEmail: string | string[];
                numUsersInvited: number;
              };
            }>;
            acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                accept: boolean;
              };
              output: void;
            }>;
            changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "ADMIN" | "MEMBER" | "OWNER";
                teamId: number;
                memberId: number;
              };
              output: void;
            }>;
            getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                dateFrom: string;
                dateTo: string;
                memberId: number;
                timezone: string;
              };
              output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats:
                  | {
                      uid: string;
                      startTime: Date;
                      _count: {
                        attendees: number;
                      };
                    }[]
                  | null;
                datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
              };
            }>;
            getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                memberId: number;
              };
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              } | null;
            }>;
            updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                disableImpersonation: boolean;
                memberId: number;
              };
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              };
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output:
                | {
                    url: string;
                    status: "REQUIRES_PAYMENT" | "REQUIRES_UPGRADE" | "SUCCESS";
                    message?: undefined;
                  }
                | {
                    url: string;
                    status?: undefined;
                    message?: undefined;
                  }
                | {
                    url: string;
                    message: string;
                    status?: undefined;
                  };
            }>;
            getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                team: {
                  children: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  }[];
                } & {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                limit?: number | undefined;
                searchTerm?: string | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                members: {
                  username: string | null;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                  organizationId: number | null;
                  organization: any;
                  accepted: boolean;
                  disableImpersonation: boolean;
                  bookerUrl: string;
                  teamId: number;
                  lastActiveAt: string | null;
                  name: string | null;
                  id: number;
                  email: string;
                  bio: string | null;
                  avatarUrl: string | null;
                  nonProfileUsername: string | null;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            listSimpleMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
              }[];
            }>;
            legacyListMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                cursor?: number | null | undefined;
                limit?: number | null | undefined;
                teamIds?: number[] | undefined;
                searchText?: string | undefined;
              };
              output: {
                members: ({
                  accepted: boolean;
                  membershipId: number;
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                } & {
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
                nextCursor: number | undefined;
              };
            }>;
            getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                userIds: number[];
              };
              output: Record<
                number,
                {
                  name: string | null;
                  logo: string | null;
                  externalId: string | null;
                  app: {
                    slug: string;
                    categories: import("@calcom/prisma/enums").AppCategories[];
                  } | null;
                }[]
              >;
            }>;
            hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                hasTeamPlan: boolean;
              };
            }>;
            listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              }[];
            }>;
            createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                token?: string | undefined;
              };
              output: {
                token: string;
                inviteLink: string;
              };
            }>;
            setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
                expiresInDays?: number | undefined;
              };
              output: void;
            }>;
            deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
              };
              output: void;
            }>;
            inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                token: string;
              };
              output: string;
            }>;
            hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                memberId: number;
              };
              output: boolean;
            }>;
            resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
                teamId: number;
                language: string;
                isOrg?: boolean | undefined;
              };
              output: {
                email: string;
                teamId: number;
                language: string;
                isOrg: boolean;
              };
            }>;
            roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                bookingId: number;
              };
              output: {
                bookingId: number;
                reassignedTo: {
                  id: number;
                  name: string | null;
                  email: string;
                };
              };
            }>;
            roundRobinManualReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                teamMemberId: number;
                reassignReason?: string | undefined;
              };
              output: {
                success: boolean;
              };
            }>;
            getRoundRobinHostsToReassign: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingId: number;
                exclude: "fixedHosts";
                cursor?: number | undefined;
                limit?: number | undefined;
                searchTerm?: string | undefined;
              };
              output: {
                items: {
                  id: number;
                  name: string | null;
                  email: string;
                  status: string;
                }[];
                nextCursor: number | null;
                totalCount: number;
              };
            }>;
            checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                value: string;
                teamId: number;
              };
              output: boolean;
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            getInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: number;
                cancellationReason: string | null;
              }[];
            }>;
            updateInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                presets: {
                  name: string;
                  id: number;
                  cancellationReason?: string | undefined;
                }[];
              };
              output: {
                name: string;
                id: number;
                createdAt: Date;
                cancellationReason: string | null;
                teamId: number;
              }[];
            }>;
            hasActiveTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: boolean;
            }>;
          }
        >;
        timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                CalComVersion: string;
              };
              output: {
                city: string;
                timezone: string;
                pop: number;
              }[];
            }>;
          }
        >;
        organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                slug: string;
                orgOwnerEmail: string;
                language?: string | undefined;
                seats?: number | undefined;
                pricePerSeat?: number | undefined;
                isPlatform?: boolean | undefined;
                billingPeriod?:
                  | import("../server/routers/viewer/organizations/create.schema").BillingPeriod
                  | undefined;
              };
              output: {
                userId: number;
                email: string;
                organizationId: number;
                upId: string;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name?: string | undefined;
                orgId?: string | number | undefined;
                bio?: string | undefined;
                logoUrl?: string | null | undefined;
                calVideoLogo?: string | null | undefined;
                banner?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                timeFormat?: number | undefined;
                metadata?:
                  | {
                      requestedSlug?: string | null | undefined;
                      paymentId?: string | undefined;
                      subscriptionId?: string | null | undefined;
                      subscriptionItemId?: string | null | undefined;
                      orgSeats?: number | null | undefined;
                      orgPricePerSeat?: number | null | undefined;
                      migratedToOrgFrom?:
                        | {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                          }
                        | undefined;
                      billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    }
                  | undefined;
                lockEventTypeCreation?: boolean | undefined;
                lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                adminGetsNoSlotsNotification?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                orgProfileRedirectsToVerifiedDomain?: boolean | undefined;
              };
              output: {
                update: boolean;
                userId: number;
                data: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              };
            }>;
            verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
              };
              output: true;
            }>;
            createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                orgId: number;
                teamNames: string[];
                moveTeams: {
                  id: number;
                  newSlug: string | null;
                  shouldMove: boolean;
                }[];
              };
              output: {
                duplicatedSlugs: string[];
              };
            }>;
            listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                features: {
                  delegationCredential: boolean;
                };
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
                canAdminImpersonate: boolean;
                organizationSettings: {
                  lockEventTypeCreationForUsers: boolean | undefined;
                  adminGetsNoSlotsNotification: boolean | undefined;
                  allowSEOIndexing: boolean | undefined;
                  orgProfileRedirectsToVerifiedDomain: boolean | undefined;
                  orgAutoAcceptEmail: string | undefined;
                };
                user: {
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                };
              };
            }>;
            checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                team: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                url: string;
                message: string;
              };
            }>;
            setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                newPassword: string;
              };
              output: {
                update: boolean;
              };
            }>;
            getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamIdToExclude?: number | undefined;
                accepted?: boolean | undefined;
                distinctUser?: boolean | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  completedOnboarding: boolean;
                };
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              }[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | undefined;
                expand?: "attributes"[] | undefined;
                filters?:
                  | {
                      id: string;
                      value:
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                            data: string | number;
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                            data: (string | number)[];
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                            data: {
                              operator:
                                | "endsWith"
                                | "startsWith"
                                | "equals"
                                | "notEquals"
                                | "contains"
                                | "notContains"
                                | "isEmpty"
                                | "isNotEmpty";
                              operand: string;
                            };
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                            data: {
                              operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                              operand: number;
                            };
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                            data: {
                              startDate: string | null;
                              endDate: string | null;
                              preset: string;
                            };
                          };
                    }[]
                  | undefined;
                oAuthClientId?: string | undefined;
              };
              output:
                | {
                    canUserGetMembers: boolean;
                    rows: never[];
                    meta: {
                      totalRowCount: number;
                    };
                    nextCursor?: undefined;
                  }
                | {
                    rows: {
                      id: number;
                      username: string | null;
                      email: string;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                      disableImpersonation: boolean;
                      completedOnboarding: boolean;
                      lastActiveAt: string | null;
                      avatarUrl: string | null;
                      teams: (
                        | {
                            id: number;
                            name: string;
                            slug: string | null;
                          }
                        | undefined
                      )[];
                      attributes:
                        | {
                            weight: number;
                            id: string;
                            contains: string[];
                            value: string;
                            slug: string;
                            attributeId: string;
                            isGroup: boolean;
                          }[]
                        | undefined;
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                      totalRowCount: number;
                    };
                    canUserGetMembers?: undefined;
                  };
            }>;
            getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                slug: string;
                fullDomain: string;
                domainSuffix: string;
                name: string;
                logoUrl: string | null;
                isPlatform: boolean;
              } | null;
            }>;
            getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId?: number | undefined;
              };
              output: {
                username: string | null;
                teams: {
                  accepted: boolean;
                  name: string;
                  id: number;
                }[];
                role: import(".prisma/client").$Enums.MembershipRole;
                name: string | null;
                id: number;
                email: string;
                timeZone: string;
                bio: string | null;
                avatarUrl: string | null;
                schedules: {
                  name: string;
                  id: number;
                }[];
                profiles: {
                  username: string;
                }[];
              };
            }>;
            updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "ADMIN" | "MEMBER" | "OWNER";
                userId: number;
                timeZone: string;
                username?: string | undefined;
                bio?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                avatar?: string | undefined;
                attributeOptions?:
                  | {
                      userId: number;
                      attributes: {
                        id: string;
                        options?:
                          | {
                              value: string;
                              label?: string | undefined;
                              weight?: number | undefined;
                            }[]
                          | undefined;
                        value?: string | undefined;
                      }[];
                    }
                  | undefined;
              };
              output: {
                success: boolean;
              };
            }>;
            getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
              }[];
            }>;
            addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                userIds: number[];
              };
              output: {
                success: boolean;
                invitedTotalUsers: number;
              };
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userIds: number[];
              };
              output: {
                success: boolean;
                usersDeleted: number;
              };
            }>;
            listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                limit: number;
                query?: string | undefined;
                offset?: number | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                rows: {
                  bookerUrl: string;
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  };
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  disableImpersonation: boolean;
                  accepted: boolean;
                }[];
                nextCursor: number | null | undefined;
              };
            }>;
            getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                safeBio: string;
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                slug: string | null;
                parent: {
                  id: number;
                  slug: string | null;
                } | null;
                bio: string | null;
                logoUrl: string | null;
                isPrivate: boolean;
              };
            }>;
            listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              }[];
            }>;
            deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output: void;
            }>;
            adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                organizationSettings: {
                  id: number;
                  allowSEOIndexing: boolean;
                  organizationId: number;
                  isOrganizationConfigured: boolean;
                  isOrganizationVerified: boolean;
                  orgAutoAcceptEmail: string;
                  lockEventTypeCreationForUsers: boolean;
                  adminGetsNoSlotsNotification: boolean;
                  isAdminReviewed: boolean;
                  isAdminAPIEnabled: boolean;
                  orgProfileRedirectsToVerifiedDomain: boolean;
                } | null;
                slug: string | null;
                members: {
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  };
                }[];
              }[];
            }>;
            adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
              };
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                organizationSettings: {
                  isOrganizationConfigured: boolean;
                  isOrganizationVerified: boolean;
                  orgAutoAcceptEmail: string;
                } | null;
                slug: string | null;
                isOrganization: boolean;
                members: {
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  };
                }[];
              };
            }>;
            adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                name?: string | undefined;
                slug?: string | null | undefined;
                organizationSettings?:
                  | {
                      isOrganizationVerified?: boolean | undefined;
                      isOrganizationConfigured?: boolean | undefined;
                      isAdminReviewed?: boolean | undefined;
                      orgAutoAcceptEmail?: string | undefined;
                      isAdminAPIEnabled?: boolean | undefined;
                    }
                  | undefined;
              };
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            }>;
            adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                orgId: number;
              };
              output: {
                ok: boolean;
                message: string;
              };
            }>;
            adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                orgId: number;
              };
              output: {
                ok: boolean;
                message: string;
              };
            }>;
            createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: number | undefined;
                eventTypeId: number;
                users?: number[] | undefined;
                templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                yourPhoneNumber: string;
                numberToCall: string;
                calApiKey: string;
                enabled?: boolean | undefined;
                schedulerName?: string | null | undefined;
                guestName?: string | undefined;
                guestEmail?: string | undefined;
                guestCompany?: string | undefined;
                beginMessage?: string | undefined;
                generalPrompt?: string | undefined;
              };
              output: {
                callId: string;
                agentId: string | undefined;
              };
            }>;
            getFacetedValues: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                teams: {
                  name: string;
                  id: number;
                }[];
                attributes: {
                  name: string;
                  id: string;
                  options: {
                    value: string;
                  }[];
                }[];
                roles: ("ADMIN" | "MEMBER" | "OWNER")[];
              };
            }>;
          }
        >;
        delegationCredential: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: (
                | (Omit<
                    {
                      serviceAccountClientId: string | null;
                      id: string;
                      workspacePlatform: {
                        name: string;
                        id: number;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                      serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
              )[];
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                domain: string;
                workspacePlatformSlug: string;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      workspacePlatform: {
                        name: string;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
                | undefined;
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                domain: string;
                serviceAccountKey: {
                  client_id: string;
                  private_key: string;
                  client_email?: string | undefined;
                  tenant_id?: string | undefined;
                } & {
                  [k: string]: unknown;
                };
                workspacePlatformSlug: string;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                      workspacePlatformId: number;
                      serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
                | undefined;
            }>;
            toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                enabled: boolean;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      workspacePlatform: {
                        name: string;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: {
                id: string;
              };
            }>;
            listWorkspacePlatforms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
                description: string;
                slug: string;
                enabled: boolean;
              }[];
            }>;
          }
        >;
        webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    appId?: string | undefined;
                    eventTriggers?:
                      | (
                          | "BOOKING_CREATED"
                          | "BOOKING_PAYMENT_INITIATED"
                          | "BOOKING_PAID"
                          | "BOOKING_RESCHEDULED"
                          | "BOOKING_REQUESTED"
                          | "BOOKING_CANCELLED"
                          | "BOOKING_REJECTED"
                          | "BOOKING_NO_SHOW_UPDATED"
                          | "FORM_SUBMITTED"
                          | "MEETING_ENDED"
                          | "MEETING_STARTED"
                          | "RECORDING_READY"
                          | "INSTANT_MEETING"
                          | "RECORDING_TRANSCRIPTION_GENERATED"
                          | "OOO_CREATED"
                          | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                          | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                          | "FORM_SUBMITTED_NO_EVENT"
                        )[]
                      | undefined;
                  }
                | undefined;
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              }[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                webhookId?: string | undefined;
              };
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                teamId: number | null;
                secret: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: (
                  | "BOOKING_CREATED"
                  | "BOOKING_PAYMENT_INITIATED"
                  | "BOOKING_PAID"
                  | "BOOKING_RESCHEDULED"
                  | "BOOKING_REQUESTED"
                  | "BOOKING_CANCELLED"
                  | "BOOKING_REJECTED"
                  | "BOOKING_NO_SHOW_UPDATED"
                  | "FORM_SUBMITTED"
                  | "MEETING_ENDED"
                  | "MEETING_STARTED"
                  | "RECORDING_READY"
                  | "INSTANT_MEETING"
                  | "RECORDING_TRANSCRIPTION_GENERATED"
                  | "OOO_CREATED"
                  | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                  | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                  | "FORM_SUBMITTED_NO_EVENT"
                )[];
                appId?: string | null | undefined;
                secret?: string | null | undefined;
                platform?: boolean | undefined;
                time?: number | null | undefined;
                timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
              };
              output: {
                id: string;
                userId: number | null;
                teamId: number | null;
                eventTypeId: number | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                createdAt: Date;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                appId: string | null;
                secret: string | null;
                platform: boolean;
                time: number | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                payloadTemplate: string | null;
                subscriberUrl?: string | undefined;
                eventTriggers?:
                  | (
                      | "BOOKING_CREATED"
                      | "BOOKING_PAYMENT_INITIATED"
                      | "BOOKING_PAID"
                      | "BOOKING_RESCHEDULED"
                      | "BOOKING_REQUESTED"
                      | "BOOKING_CANCELLED"
                      | "BOOKING_REJECTED"
                      | "BOOKING_NO_SHOW_UPDATED"
                      | "FORM_SUBMITTED"
                      | "MEETING_ENDED"
                      | "MEETING_STARTED"
                      | "RECORDING_READY"
                      | "INSTANT_MEETING"
                      | "RECORDING_TRANSCRIPTION_GENERATED"
                      | "OOO_CREATED"
                      | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                      | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                      | "FORM_SUBMITTED_NO_EVENT"
                    )[]
                  | undefined;
                active?: boolean | undefined;
                appId?: string | null | undefined;
                secret?: string | null | undefined;
                time?: number | null | undefined;
                timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
              };
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              } | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
              };
              output: {
                id: string;
              };
            }>;
            testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                type: string;
                url: string;
                secret?: string | undefined;
                payloadTemplate?: string | null | undefined;
              };
              output: {
                message?: string | undefined;
                ok: boolean;
                status: number;
              };
            }>;
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                  }
                | undefined;
              output: {
                webhookGroups: {
                  teamId?: number | null;
                  profile: {
                    slug: string | null;
                    name: string | null;
                    image?: string;
                  };
                  metadata?: {
                    readOnly: boolean;
                  };
                  webhooks: import(".prisma/client").Webhook[];
                }[];
                profiles: {
                  readOnly?: boolean | undefined;
                  slug: string | null;
                  name: string | null;
                  image?: string;
                  teamId: number | null | undefined;
                }[];
              };
            }>;
          }
        >;
        apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              }[];
            }>;
            findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appId?: string | undefined;
                teamId?: number | undefined;
              };
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                note?: string | null | undefined;
                expiresAt?: Date | null | undefined;
                neverExpires?: boolean | undefined;
                appId?: string | null | undefined;
                teamId?: number | undefined;
              };
              output: string;
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                note?: string | null | undefined;
                expiresAt?: Date | undefined;
              };
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
              };
              output: {
                id: string;
              };
            }>;
          }
        >;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startTime: string;
                endTime: string;
                eventTypeId?: number | undefined;
                eventTypeSlug?: string | undefined;
                timeZone?: string | undefined;
                usernameList?: string[] | undefined;
                debug?: boolean | undefined;
                duration?: string | undefined;
                rescheduleUid?: string | null | undefined;
                isTeamEvent?: boolean | undefined;
                orgSlug?: string | null | undefined;
                teamMemberEmail?: string | null | undefined;
                routedTeamMemberIds?: number[] | null | undefined;
                skipContactOwner?: boolean | null | undefined;
                _enableTroubleshooter?: boolean | undefined;
                _bypassCalendarBusyTimes?: boolean | undefined;
                _shouldServeCache?: boolean | undefined;
                routingFormResponseId?: number | undefined;
                email?: string | null | undefined;
              };
              output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeId: number;
                slotUtcStartDate: string;
                slotUtcEndDate: string;
                bookingUid?: string | undefined;
                _isDryRun?: boolean | undefined;
              };
              output: {
                uid: string;
              };
            }>;
            isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                eventTypeId: number;
                slots: {
                  utcStartIso: string;
                  utcEndIso: string;
                }[];
              };
              output: {
                slots: {
                  status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                  utcStartIso: string;
                  utcEndIso: string;
                }[];
              };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                uid: string | null;
              };
              output: void;
            }>;
          }
        >;
        workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    teamId?: number | undefined;
                    userId?: number | undefined;
                  }
                | undefined;
              output: {
                workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
              };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
              };
              output: {
                name: string;
                id: number;
                time: number | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  isOrganization: boolean;
                  members: {
                    id: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                  }[];
                } | null;
                userId: number | null;
                teamId: number | null;
                steps: {
                  id: number;
                  template: import(".prisma/client").$Enums.WorkflowTemplates;
                  action: import(".prisma/client").$Enums.WorkflowActions;
                  workflowId: number;
                  stepNumber: number;
                  sendTo: string | null;
                  reminderBody: string | null;
                  emailSubject: string | null;
                  numberRequired: boolean | null;
                  sender: string | null;
                  numberVerificationPending: boolean;
                  includeCalendarEvent: boolean;
                }[];
                isActiveOnAll: boolean;
                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                activeOn: {
                  eventType: {
                    id: number;
                    length: number;
                    title: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    description: string | null;
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                  };
                }[];
                activeOnTeams: {
                  team: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                }[];
              } | null;
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                workflow: {
                  id: number;
                  position: number;
                  name: string;
                  userId: number | null;
                  teamId: number | null;
                  isActiveOnAll: boolean;
                  trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                  time: number | null;
                  timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                };
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
              };
              output: {
                id: number;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                id: number;
                time: number | null;
                steps: {
                  id: number;
                  template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                  action:
                    | "EMAIL_HOST"
                    | "EMAIL_ATTENDEE"
                    | "SMS_ATTENDEE"
                    | "SMS_NUMBER"
                    | "EMAIL_ADDRESS"
                    | "WHATSAPP_ATTENDEE"
                    | "WHATSAPP_NUMBER";
                  workflowId: number;
                  stepNumber: number;
                  sendTo: string | null;
                  reminderBody: string | null;
                  emailSubject: string | null;
                  numberRequired: boolean | null;
                  sender: string | null;
                  includeCalendarEvent: boolean;
                  senderName: string | null;
                }[];
                trigger:
                  | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                  | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                  | "BEFORE_EVENT"
                  | "EVENT_CANCELLED"
                  | "NEW_EVENT"
                  | "AFTER_EVENT"
                  | "RESCHEDULE_EVENT";
                timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                activeOn: number[];
                isActiveOnAll?: boolean | undefined;
              };
              output: {
                workflow:
                  | ({
                      team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } | null;
                      steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        stepNumber: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                      }[];
                      activeOn: {
                        eventType: {
                          id: number;
                          length: number;
                          title: string;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          description: string | null;
                          userId: number | null;
                          timeZone: string | null;
                          slug: string;
                          position: number;
                          locations: import(".prisma/client").Prisma.JsonValue;
                          offsetStart: number;
                          hidden: boolean;
                          profileId: number | null;
                          teamId: number | null;
                          useEventLevelSelectedCalendars: boolean;
                          eventName: string | null;
                          parentId: number | null;
                          bookingFields: import(".prisma/client").Prisma.JsonValue;
                          periodType: import(".prisma/client").$Enums.PeriodType;
                          periodStartDate: Date | null;
                          periodEndDate: Date | null;
                          periodDays: number | null;
                          periodCountCalendarDays: boolean | null;
                          lockTimeZoneToggleOnBookingPage: boolean;
                          requiresConfirmation: boolean;
                          requiresConfirmationWillBlockSlot: boolean;
                          requiresConfirmationForFreeEmail: boolean;
                          requiresBookerEmailVerification: boolean;
                          canSendCalVideoTranscriptionEmails: boolean;
                          autoTranslateDescriptionEnabled: boolean;
                          recurringEvent: import(".prisma/client").Prisma.JsonValue;
                          disableGuests: boolean;
                          hideCalendarNotes: boolean;
                          hideCalendarEventDetails: boolean;
                          minimumBookingNotice: number;
                          beforeEventBuffer: number;
                          afterEventBuffer: number;
                          seatsPerTimeSlot: number | null;
                          onlyShowFirstAvailableSlot: boolean;
                          seatsShowAttendees: boolean | null;
                          seatsShowAvailabilityCount: boolean | null;
                          schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                          scheduleId: number | null;
                          price: number;
                          currency: string;
                          slotInterval: number | null;
                          successRedirectUrl: string | null;
                          forwardParamsSuccessRedirect: boolean | null;
                          bookingLimits: import(".prisma/client").Prisma.JsonValue;
                          durationLimits: import(".prisma/client").Prisma.JsonValue;
                          isInstantEvent: boolean;
                          instantMeetingExpiryTimeOffsetInSeconds: number;
                          instantMeetingScheduleId: number | null;
                          instantMeetingParameters: string[];
                          assignAllTeamMembers: boolean;
                          assignRRMembersUsingSegment: boolean;
                          rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                          useEventTypeDestinationCalendarEmail: boolean;
                          isRRWeightsEnabled: boolean;
                          maxLeadThreshold: number | null;
                          allowReschedulingPastBookings: boolean;
                          eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                          rescheduleWithSameRoundRobinHost: boolean;
                          secondaryEmailId: number | null;
                        };
                      }[];
                      activeOnTeams: {
                        team: {
                          name: string;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          createdAt: Date;
                          timeZone: string;
                          slug: string | null;
                          parentId: number | null;
                          bookingLimits: import(".prisma/client").Prisma.JsonValue;
                          bio: string | null;
                          weekStart: string;
                          hideBranding: boolean;
                          theme: string | null;
                          timeFormat: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          smsLockState: import(".prisma/client").$Enums.SMSLockState;
                          smsLockReviewedByAdmin: boolean;
                          logoUrl: string | null;
                          calVideoLogo: string | null;
                          appLogo: string | null;
                          appIconLogo: string | null;
                          isPrivate: boolean;
                          hideBookATeamMember: boolean;
                          bannerUrl: string | null;
                          isOrganization: boolean;
                          pendingPayment: boolean;
                          isPlatform: boolean;
                          createdByOAuthClientId: string | null;
                          includeManagedEventsInLimits: boolean;
                        };
                      }[];
                    } & {
                      name: string;
                      id: number;
                      time: number | null;
                      userId: number | null;
                      position: number;
                      teamId: number | null;
                      isActiveOnAll: boolean;
                      trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                      timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    })
                  | null;
              };
            }>;
            activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeId: number;
                workflowId: number;
              };
              output: void;
            }>;
            sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                phoneNumber: string;
              };
              output: void;
            }>;
            verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                phoneNumber: string;
                teamId?: number | undefined;
              };
              output: boolean;
            }>;
            getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                id: number;
                userId: number | null;
                phoneNumber: string;
                teamId: number | null;
              }[];
            }>;
            getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: string[];
            }>;
            verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
                teamId?: number | undefined;
              };
              output: true;
            }>;
            getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                label: string;
                value:
                  | "EMAIL_HOST"
                  | "EMAIL_ATTENDEE"
                  | "SMS_ATTENDEE"
                  | "SMS_NUMBER"
                  | "EMAIL_ADDRESS"
                  | "WHATSAPP_ATTENDEE"
                  | "WHATSAPP_NUMBER";
                needsTeamsUpgrade: boolean;
              }[];
            }>;
            filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          userIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              output:
                | {
                    filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                    totalCount: number;
                  }
                | undefined;
            }>;
            getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                eventType: {
                  id: number;
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  teamId?: number | null | undefined;
                  parent?:
                    | {
                        id: number | null;
                        teamId: number | null;
                      }
                    | null
                    | undefined;
                  userId?: number | null | undefined;
                };
              };
              output: import("@calcom/ee/workflows/lib/types").Workflow[];
            }>;
          }
        >;
        saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number | null;
              };
              output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
                encodedRawMetadata: string;
              };
              output: import("@boxyhq/saml-jackson").SAMLSSORecord;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
              };
              output: void;
            }>;
            updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
                clientId: string;
                clientSecret: string;
                wellKnownUrl: string;
              };
              output: import("@boxyhq/saml-jackson").OIDCSSORecord;
            }>;
          }
        >;
        dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                organizationId: number | null;
                provider: string;
              };
              output: import("@boxyhq/saml-jackson").Directory;
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                organizationId: number | null;
              };
              output: import("@boxyhq/saml-jackson").Directory | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                organizationId: number | null;
                directoryId: string;
              };
              output: null;
            }>;
            teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: void;
                  output: {
                    teamGroupMapping: {
                      id: number;
                      name: string;
                      slug: string | null;
                      directoryId: string;
                      groupNames: string[];
                    }[];
                  };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    teamId: number;
                    directoryId: string;
                  };
                  output: {
                    newGroupName: string;
                  };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    teamId: number;
                    groupName: string;
                  };
                  output: {
                    deletedGroupName: string;
                  };
                }>;
              }
            >;
          }
        >;
        insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                empty: boolean;
                created: {
                  count: number;
                  deltaPrevious: number;
                };
                completed: {
                  count: number;
                  deltaPrevious: number;
                };
                rescheduled: {
                  count: number;
                  deltaPrevious: number;
                };
                cancelled: {
                  count: number;
                  deltaPrevious: number;
                };
                rating: {
                  count: number;
                  deltaPrevious: number;
                };
                no_show: {
                  count: number;
                  deltaPrevious: number;
                };
                no_show_guest: {
                  count: number;
                  deltaPrevious: number;
                };
                csat: {
                  count: number;
                  deltaPrevious: number;
                };
                previousRange: {
                  startDate: string;
                  endDate: string;
                };
              };
            }>;
            eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                timeView: "day" | "month" | "year" | "week";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
              };
              output: {
                Month: string;
                Created: number;
                Completed: number;
                Rescheduled: number;
                Cancelled: number;
                "No-Show (Host)": number;
                "No-Show (Guest)": number;
              }[];
            }>;
            popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: (
                | {
                    eventTypeId?: undefined;
                    eventTypeName?: undefined;
                    count?: undefined;
                  }
                | {
                    eventTypeId: number | null;
                    eventTypeName: string;
                    count: number;
                  }
              )[];
            }>;
            averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                Date: string;
                Average: number;
              }[];
            }>;
            membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
            }>;
            userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean | null;
                teamId?: number | undefined;
              };
              output: {
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
              }[];
            }>;
            eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                isAll?: boolean | undefined;
              };
              output: {
                id: number;
                title: string;
                team: {
                  name: string;
                } | null;
                slug: string;
                teamId: number | null;
              }[];
            }>;
            recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                rating: number | null;
                feedback: string | null;
              }[];
            }>;
            membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
              }[];
            }>;
            membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
              }[];
            }>;
            rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                data: string;
                filename: string;
              };
            }>;
            getRoutingFormsForFilters: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
              };
              output: {
                name: string;
                id: string;
                _count: {
                  responses: number;
                };
              }[];
            }>;
            routingFormsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                total: number;
                totalWithoutBooking: number;
                totalWithBooking: number;
              };
            }>;
            routingFormResponses: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                total: number;
                data: (Omit<
                  {
                    id: number;
                    createdAt: Date;
                    bookingUid: string | null;
                    formId: string;
                    response: import(".prisma/client").Prisma.JsonValue;
                    formName: string;
                    bookingStatus: import(".prisma/client").$Enums.BookingStatus | null;
                    bookingStatusOrder: number | null;
                    bookingCreatedAt: Date | null;
                    bookingAttendees: import(".prisma/client").Prisma.JsonValue;
                    bookingUserId: number | null;
                    bookingUserName: string | null;
                    bookingUserEmail: string | null;
                    bookingUserAvatarUrl: string | null;
                    bookingAssignmentReason: string | null;
                    bookingStartTime: Date | null;
                    bookingEndTime: Date | null;
                  },
                  "response" | "bookingAttendees" | "responseLowercase"
                > & {
                  response: Record<string, import("@calcom/features/insights/lib/types").ResponseValue>;
                  responseLowercase: Record<
                    string,
                    import("@calcom/features/insights/lib/types").ResponseValue
                  >;
                  bookingAttendees?: {
                    name: string;
                    email: string;
                    timeZone: string;
                  }[];
                })[];
                nextCursor: number | undefined;
              };
            }>;
            routingFormResponsesForDownload: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                data: {
                  "Response ID": number;
                  "Form Name": string;
                  "Submitted At": string;
                  "Has Booking": boolean;
                  "Booking Status": string;
                  "Booking Created At": string;
                  "Booking Start Time": string;
                  "Booking End Time": string;
                  "Attendee Name": any;
                  "Attendee Email": any;
                  "Attendee Timezone": any;
                  "Assignment Reason": string;
                  "Routed To Name": string;
                  "Routed To Email": string;
                }[];
                nextCursor: number | undefined;
              };
            }>;
            getRoutingFormFieldOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output:
                | (
                    | {
                        id: string;
                        type: string;
                        label: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                      }
                    | {
                        id: string;
                        type: string;
                        label: string;
                        routerId: string;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                        deleted?: boolean | undefined;
                        required?: boolean | undefined;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                      }
                  )[]
                | undefined;
            }>;
            failedBookingsByField: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output: Record<
                string,
                Record<
                  string,
                  {
                    optionId: string;
                    count: number;
                    optionLabel: string;
                  }[]
                >
              >;
            }>;
            routingFormResponsesHeaders: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output: {
                id: string;
                label: string;
                type: string;
                options:
                  | {
                      id: string | null;
                      label: string;
                    }[]
                  | undefined;
              }[];
            }>;
            routedToPerPeriod: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                period: "perDay" | "perWeek" | "perMonth";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                cursor?:
                  | {
                      userCursor?: number | undefined;
                      periodCursor?: string | undefined;
                    }
                  | undefined;
                routingFormId?: string | undefined;
                limit?: number | undefined;
                searchQuery?: string | undefined;
              };
              output: {
                users: {
                  data: {
                    performance: "above_average" | "at_average" | "below_average" | "median";
                    totalBookings: number;
                    id: number;
                    name: string | null;
                    email: string;
                    avatarUrl: string | null;
                  }[];
                  nextCursor: number | undefined;
                };
                periodStats: {
                  data: {
                    userId: number;
                    period_start: Date;
                    total: number;
                  }[];
                  nextCursor: string | undefined;
                };
              };
            }>;
            routedToPerPeriodCsv: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                period: "perDay" | "perWeek" | "perMonth";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                searchQuery?: string | undefined;
                routingFormId?: string | undefined;
              };
              output: {
                data: string;
                filename: string;
              };
            }>;
            getUserRelevantTeamRoutingForms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: (Omit<
                {
                  id: string;
                  description: string | null;
                  position: number;
                  routes: {
                    [key: string]: any;
                  } | null;
                  createdAt: Date;
                  updatedAt: Date;
                  name: string;
                  fields: {
                    [key: string]: any;
                  } | null;
                  userId: number;
                  teamId: number | null;
                  disabled: boolean;
                  settings: {
                    [key: string]: any;
                  } | null;
                  updatedById: number | null;
                },
                "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
              > & {
                routes: import("@calcom/routing-forms/types/types").Routes;
                fields: import("@calcom/routing-forms/types/types").Fields;
                settings: import("zod").TypeOf<typeof import("@calcom/prisma/zod-utils").RoutingFormSettings>;
                createdAt: string;
                updatedAt: string;
                connectedForms: {
                  name: string;
                  description: string | null;
                  id: string;
                }[];
                routers: {
                  name: string;
                  description: string | null;
                  id: string;
                }[];
                teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
              })[];
            }>;
          }
        >;
        payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
              };
              output: {
                id: number;
                uid: string;
                appId: string | null;
                bookingId: number;
                amount: number;
                fee: number;
                currency: string;
                success: boolean;
                refunded: boolean;
                data: import(".prisma/client").Prisma.JsonValue;
                externalId: string;
                paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
              };
            }>;
          }
        >;
        appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          userIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              output: {
                filtered: (
                  | {
                      hasError: boolean;
                      form: Omit<
                        {
                          team: {
                            name: string;
                            id: number;
                          } | null;
                          _count: {
                            responses: number;
                          };
                        } & {
                          settings: import(".prisma/client").Prisma.JsonValue;
                          name: string;
                          id: string;
                          description: string | null;
                          userId: number;
                          createdAt: Date;
                          updatedAt: Date;
                          position: number;
                          teamId: number | null;
                          fields: import(".prisma/client").Prisma.JsonValue;
                          routes: import(".prisma/client").Prisma.JsonValue;
                          disabled: boolean;
                          updatedById: number | null;
                        },
                        "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
                      > & {
                        routes: import("@calcom/routing-forms/types/types").Routes;
                        fields: import("@calcom/routing-forms/types/types").Fields;
                        settings: import("zod").TypeOf<
                          typeof import("@calcom/prisma/zod-utils").RoutingFormSettings
                        >;
                        createdAt: string;
                        updatedAt: string;
                        connectedForms: {
                          name: string;
                          description: string | null;
                          id: string;
                        }[];
                        routers: {
                          name: string;
                          description: string | null;
                          id: string;
                        }[];
                        teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
                      };
                      readOnly: boolean;
                    }
                  | {
                      form: {
                        routes: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodRoutes>;
                        fields: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodFields>;
                        team: {
                          name: string;
                          id: number;
                        } | null;
                        _count: {
                          responses: number;
                        };
                        settings: import(".prisma/client").Prisma.JsonValue;
                        name: string;
                        id: string;
                        description: string | null;
                        userId: number;
                        createdAt: Date;
                        updatedAt: Date;
                        position: number;
                        teamId: number | null;
                        disabled: boolean;
                        updatedById: number | null;
                      };
                      readOnly: boolean;
                      hasError: boolean;
                    }
                )[];
                totalCount: number;
              };
            }>;
            formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: string;
              };
              output:
                | import("@calcom/routing-forms/types/types").SerializableForm<
                    {
                      team: {
                        name: string;
                        slug: string | null;
                      } | null;
                      _count: {
                        responses: number;
                      };
                    } & {
                      settings: import(".prisma/client").Prisma.JsonValue;
                      name: string;
                      id: string;
                      description: string | null;
                      userId: number;
                      createdAt: Date;
                      updatedAt: Date;
                      position: number;
                      teamId: number | null;
                      fields: import(".prisma/client").Prisma.JsonValue;
                      routes: import(".prisma/client").Prisma.JsonValue;
                      disabled: boolean;
                      updatedById: number | null;
                    }
                  >
                | null;
            }>;
            getResponseWithFormFields: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formResponseId: number;
              };
              output: {
                response: import("@calcom/routing-forms/types/types").FormResponse;
                form: import("@calcom/routing-forms/types/types").SerializableForm<
                  {
                    user: {
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      username: string | null;
                      theme: string | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      movedToProfileId: number | null;
                      organization: {
                        slug: string | null;
                      } | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                    team: {
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      slug: string | null;
                      parentId: number | null;
                      parent: {
                        slug: string | null;
                      } | null;
                      members: {
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                      }[];
                    } | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                    name: string;
                    id: string;
                    description: string | null;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    position: number;
                    teamId: number | null;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    disabled: boolean;
                    updatedById: number | null;
                  } & {
                    user: {
                      metadata: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?:
                          | {
                              connected?: boolean | undefined;
                              selectedParam?: string | undefined;
                              sleepValue?: number | undefined;
                            }
                          | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?:
                          | {
                              appSlug?: string | undefined;
                              appLink?: string | undefined;
                            }
                          | undefined;
                        defaultBookerLayouts?:
                          | {
                              enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                              defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            }
                          | null
                          | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?:
                          | {
                              username?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              revertTime?: string | undefined;
                            }
                          | undefined;
                      } | null;
                      movedToProfileId: number | null;
                      username: string | null;
                      nonProfileUsername: string | null;
                      profile: {
                        organization: {
                          slug: string | null;
                        } | null;
                      };
                    };
                    team: {
                      metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?:
                          | {
                              teamSlug?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              lastRevertTime?: string | undefined;
                            }
                          | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                      } | null;
                      parent?:
                        | {
                            slug: string | null;
                          }
                        | null
                        | undefined;
                    };
                    userOrigin: string;
                    teamOrigin: string;
                    nonOrgUsername: string | null;
                    nonOrgTeamslug: string | null;
                  }
                >;
              };
            }>;
            formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                id: string;
                description?: string | null | undefined;
                disabled?: boolean | undefined;
                fields?:
                  | (
                      | {
                          id: string;
                          type: string;
                          label: string;
                          identifier?: string | undefined;
                          placeholder?: string | undefined;
                          selectText?: string | undefined;
                          required?: boolean | undefined;
                          deleted?: boolean | undefined;
                          options?:
                            | {
                                id: string | null;
                                label: string;
                              }[]
                            | undefined;
                        }
                      | {
                          id: string;
                          type: string;
                          label: string;
                          routerId: string;
                          options?:
                            | {
                                id: string | null;
                                label: string;
                              }[]
                            | undefined;
                          deleted?: boolean | undefined;
                          required?: boolean | undefined;
                          identifier?: string | undefined;
                          placeholder?: string | undefined;
                          selectText?: string | undefined;
                        }
                    )[]
                  | undefined;
                routes?:
                  | (
                      | {
                          id: string;
                          queryValue:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              };
                          action: {
                            type: import("@calcom/routing-forms/zod").RouteActionType;
                            value: string;
                            eventTypeId?: number | undefined;
                          };
                          name?: string | undefined;
                          attributeIdForWeights?: string | undefined;
                          attributeRoutingConfig?:
                            | {
                                skipContactOwner?: boolean | undefined;
                                salesforce?:
                                  | {
                                      rrSkipToAccountLookupField?: boolean | undefined;
                                      rrSKipToAccountLookupFieldName?: string | undefined;
                                    }
                                  | undefined;
                              }
                            | null
                            | undefined;
                          attributesQueryValue?:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | undefined;
                          fallbackAttributesQueryValue?:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | undefined;
                          isFallback?: boolean | undefined;
                        }
                      | {
                          id: string;
                          isRouter: true;
                          name?: string | undefined;
                        }
                    )[]
                  | null
                  | undefined;
                addFallback?: boolean | undefined;
                duplicateFrom?: string | null | undefined;
                teamId?: number | null | undefined;
                shouldConnect?: boolean | undefined;
                settings?:
                  | {
                      emailOwnerOnSubmission: boolean;
                      sendUpdatesTo?: number[] | undefined;
                      sendToAll?: boolean | undefined;
                    }
                  | null
                  | undefined;
              };
              output: {
                settings: import(".prisma/client").Prisma.JsonValue;
                name: string;
                id: string;
                description: string | null;
                userId: number;
                createdAt: Date;
                updatedAt: Date;
                position: number;
                teamId: number | null;
                fields: import(".prisma/client").Prisma.JsonValue;
                routes: import(".prisma/client").Prisma.JsonValue;
                disabled: boolean;
                updatedById: number | null;
              };
            }>;
            deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formId: string;
                jsonLogicQuery: {
                  logic: Record<string, any> | null;
                };
                limit?: number | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                nextCursor: number | null;
                headers: string[];
                responses: string[][];
              };
            }>;
            getAttributesForTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                options: {
                  id: string;
                  contains: string[];
                  value: string;
                  slug: string;
                  isGroup: boolean;
                }[];
                slug: string;
                isWeightsEnabled: boolean;
              }[];
            }>;
            getIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formId: string;
              };
              output:
                | {
                    incompleteBookingActions: {
                      id: number;
                      data: import(".prisma/client").Prisma.JsonValue;
                      credentialId: number | null;
                      enabled: boolean;
                      formId: string;
                      actionType: "SALESFORCE";
                    }[];
                    credentials: ({
                      team: {
                        name: string;
                      } | null;
                    } & {
                      key: import(".prisma/client").Prisma.JsonValue;
                      id: number;
                      type: string;
                      userId: number | null;
                      teamId: number | null;
                      subscriptionId: string | null;
                      billingCycleStart: number | null;
                      appId: string | null;
                      paymentStatus: string | null;
                      invalid: boolean | null;
                    })[];
                  }
                | undefined;
            }>;
            saveIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                enabled: boolean;
                formId: string;
                actionType: "SALESFORCE";
                data?: Record<string, any> | undefined;
                credentialId?: number | undefined;
              };
              output: void;
            }>;
          }
        >;
        appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: any;
            }>;
            projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                projectId: string;
              };
              output: any;
            }>;
          }
        >;
        features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                createdAt: Date | null;
                updatedAt: Date | null;
                slug: string;
                enabled: boolean;
                updatedBy: number | null;
                lastUsedAt: Date | null;
                stale: boolean | null;
              }[];
            }>;
            map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("@calcom/features/flags/config").AppFlags;
            }>;
          }
        >;
        appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                category: string;
              };
              output: (
                | {
                    name: string;
                    slug: string;
                    logo: string;
                    title: string | undefined;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    description: string;
                    keys: import(".prisma/client").Prisma.JsonObject | null;
                    dirName: string;
                    enabled: boolean;
                    isTemplate: boolean | undefined;
                  }
                | {
                    name: string;
                    slug: string;
                    logo: string;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title: string | undefined;
                    description: string;
                    enabled: boolean;
                    dirName: string;
                    keys: Record<string, string> | null;
                    isTemplate?: undefined;
                  }
              )[];
            }>;
            toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
                enabled: boolean;
              };
              output: boolean;
            }>;
            saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                type: string;
                slug: string;
                dirName: string;
                keys?: unknown;
                fromEnabled?: boolean | undefined;
              };
              output: void;
            }>;
            checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: boolean;
            }>;
            setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
              };
              output: void;
            }>;
            updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                key: {} & {
                  [k: string]: unknown;
                };
                credentialId: number;
              };
              output: boolean;
            }>;
            queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: string[] | undefined;
              output:
                | {
                    name: string;
                    slug: string;
                    installed: boolean;
                  }[]
                | undefined;
            }>;
            checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                slug: string;
              };
              output: boolean;
            }>;
          }
        >;
        users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId: number;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              }[];
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "USER" | "ADMIN";
                email: string;
                timeZone: string;
                weekStart: string;
                identityProvider: "CAL" | "GOOGLE" | "SAML";
                name?: string | null | undefined;
                locale?: string | null | undefined;
                username?: string | null | undefined;
                bio?: string | null | undefined;
                avatarUrl?: string | null | undefined;
                theme?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                timeFormat?: number | null | undefined;
                allowDynamicBooking?: boolean | null | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
                message: string;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name?: string | null | undefined;
                role?: "USER" | "ADMIN" | undefined;
                locale?: string | null | undefined;
                email?: string | undefined;
                timeZone?: string | undefined;
                username?: string | null | undefined;
                bio?: string | null | undefined;
                avatarUrl?: string | null | undefined;
                weekStart?: string | undefined;
                theme?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                timeFormat?: number | null | undefined;
                identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
                allowDynamicBooking?: boolean | null | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
                message: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                message: string;
              };
            }>;
          }
        >;
        oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                clientId: string;
              };
              output: {
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
              } | null;
            }>;
            addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                logo: string;
                redirectUri: string;
              };
              output: {
                clientSecret: string;
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
              };
            }>;
            generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                clientId: string;
                scopes: string[];
                teamSlug?: string | undefined;
              };
              output: {
                client: {
                  name: string;
                  clientId: string;
                  redirectUri: string;
                };
                authorizationCode: string;
              };
            }>;
          }
        >;
        googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number | undefined;
              };
            }>;
            getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: string[];
            }>;
            removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                deleted: number;
              };
            }>;
          }
        >;
        admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | null | undefined;
              };
              output: {
                rows: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  locked: boolean;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                success: boolean;
              };
            }>;
            lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
                locked: boolean;
              };
              output: {
                success: boolean;
                userId: number;
                locked: boolean;
              };
            }>;
            toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
                enabled: boolean;
              };
              output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                createdAt: Date | null;
                updatedAt: Date | null;
                slug: string;
                enabled: boolean;
                updatedBy: number | null;
                lastUsedAt: Date | null;
                stale: boolean | null;
              };
            }>;
            removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                success: boolean;
                userId: number;
              };
            }>;
            getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                users: {
                  locked: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  }[];
                  reviewNeeded: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  }[];
                };
                teams: {
                  locked: {
                    name: string;
                    id: number;
                    slug: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    logoUrl: string | null;
                  }[];
                  reviewNeeded: {
                    name: string;
                    id: number;
                    slug: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    logoUrl: string | null;
                  }[];
                };
              };
            }>;
            setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId?: number | undefined;
                username?: string | undefined;
                teamId?: number | undefined;
                teamSlug?: string | undefined;
                lock?: boolean | undefined;
              };
              output: {
                name: string | null;
                locked: boolean | undefined;
              };
            }>;
            createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                billingPeriod: "MONTHLY" | "ANNUALLY";
                billingType: "PER_BOOKING" | "PER_USER";
                entityCount: number;
                entityPrice: number;
                overages: number;
                billingEmail: string;
              };
              output: {
                stripeCheckoutUrl: string;
              };
            }>;
            workspacePlatform: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: void;
                  output: (Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      slug: string;
                      enabled: boolean;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  })[];
                }>;
                add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    description: string;
                    slug: string;
                    defaultServiceAccountKey?:
                      | import("zod").objectInputType<
                          {
                            private_key: import("zod").ZodString;
                            client_email: import("zod").ZodOptional<import("zod").ZodString>;
                            client_id: import("zod").ZodString;
                            tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                          },
                          import("zod").ZodTypeAny,
                          "passthrough"
                        >
                      | undefined;
                    enabled?: boolean | undefined;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    id: number;
                    description: string;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                updateServiceAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    id: number;
                    defaultServiceAccountKey: {
                      client_id: string;
                      private_key: string;
                      client_email?: string | undefined;
                      tenant_id?: string | undefined;
                    } & {
                      [k: string]: unknown;
                    };
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    id: number;
                    enabled: boolean;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
              }
            >;
          }
        >;
        attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                options: {
                  id: string;
                  contains: string[];
                  value: string;
                  slug: string;
                  attributeId: string;
                  isGroup: boolean;
                }[];
              } & {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                isWeightsEnabled: boolean;
                usersCanEditRelation: boolean;
                isLocked: boolean;
              })[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: string;
              };
              output: {
                name: string;
                id: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  id?: string | undefined;
                  isGroup?: boolean | undefined;
                  assignedUsers?: number | undefined;
                  contains?: string[] | undefined;
                }[];
                isLocked?: boolean | undefined;
                isWeightsEnabled?: boolean | undefined;
              };
            }>;
            getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId: number;
              };
              output: {
                id: string;
                name: string;
                type: import("@calcom/prisma/enums").AttributeType;
                options: {
                  id: string;
                  slug: string;
                  value: string;
                  weight: number | null;
                  createdByDSyncId: string | null;
                }[];
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  isGroup?: boolean | undefined;
                }[];
                isLocked?: boolean | undefined;
              };
              output: {
                id: string;
                teamId: number;
                type: import(".prisma/client").$Enums.AttributeType;
                name: string;
                slug: string;
                enabled: boolean;
                usersCanEditRelation: boolean;
                createdAt: Date;
                updatedAt: Date;
                isWeightsEnabled: boolean;
                isLocked: boolean;
              };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  id?: string | undefined;
                  isGroup?: boolean | undefined;
                  contains?: string[] | undefined;
                }[];
                attributeId: string;
                isLocked?: boolean | undefined;
                isWeightsEnabled?: boolean | undefined;
              };
              output: {
                id: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                isWeightsEnabled: boolean;
                usersCanEditRelation: boolean;
                isLocked: boolean;
              };
            }>;
            toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                attributeId: string;
              };
              output: {
                enabled: boolean;
                id: string;
              };
            }>;
            assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
                attributes: {
                  id: string;
                  options?:
                    | {
                        value: string;
                        label?: string | undefined;
                        weight?: number | undefined;
                      }[]
                    | undefined;
                  value?: string | undefined;
                }[];
              };
              output: {
                success: boolean;
                message: string;
              };
            }>;
            bulkAssignAttributes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                attributes: {
                  id: string;
                  options?:
                    | {
                        value: string;
                        label?: string | undefined;
                      }[]
                    | undefined;
                  value?: string | undefined;
                }[];
                userIds: number[];
              };
              output: {
                success: boolean;
                message: string;
                results: {
                  userId: number;
                  success: boolean;
                  message?: string;
                }[];
              };
            }>;
            findTeamMembersMatchingAttributeLogic: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                attributesQueryValue:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | null;
                isPreview?: boolean | undefined;
                _enablePerf?: boolean | undefined;
                _concurrency?: number | undefined;
              };
              output:
                | {
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    result: null;
                  }
                | {
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    result: {
                      id: number;
                      name: string | null;
                      email: string;
                    }[];
                  };
            }>;
          }
        >;
        highPerf: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getTeamSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startTime: string;
                endTime: string;
                eventTypeId?: number | undefined;
                eventTypeSlug?: string | undefined;
                timeZone?: string | undefined;
                usernameList?: string[] | undefined;
                debug?: boolean | undefined;
                duration?: string | undefined;
                rescheduleUid?: string | null | undefined;
                isTeamEvent?: boolean | undefined;
                orgSlug?: string | null | undefined;
                teamMemberEmail?: string | null | undefined;
                routedTeamMemberIds?: number[] | null | undefined;
                skipContactOwner?: boolean | null | undefined;
                _enableTroubleshooter?: boolean | undefined;
                _bypassCalendarBusyTimes?: boolean | undefined;
                _shouldServeCache?: boolean | undefined;
                routingFormResponseId?: number | undefined;
                email?: string | null | undefined;
              };
              output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
            }>;
          }
        >;
        routingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            findTeamMembersMatchingAttributeLogicOfRoute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                formId: string;
                response: Record<
                  string,
                  {
                    label: string;
                    value: (string | number | string[]) & (string | number | string[] | undefined);
                  }
                >;
                route: {
                  id: string;
                  queryValue:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      };
                  action: {
                    type: import("@calcom/routing-forms/zod").RouteActionType;
                    value: string;
                    eventTypeId?: number | undefined;
                  };
                  name?: string | undefined;
                  attributeIdForWeights?: string | undefined;
                  attributeRoutingConfig?:
                    | {
                        skipContactOwner?: boolean | undefined;
                        salesforce?:
                          | {
                              rrSkipToAccountLookupField?: boolean | undefined;
                              rrSKipToAccountLookupFieldName?: string | undefined;
                            }
                          | undefined;
                      }
                    | null
                    | undefined;
                  attributesQueryValue?:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | undefined;
                  fallbackAttributesQueryValue?:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | undefined;
                  isFallback?: boolean | undefined;
                };
                isPreview?: boolean | undefined;
                _enablePerf?: boolean | undefined;
                _concurrency?: number | undefined;
              };
              output:
                | {
                    troubleshooter: null;
                    result: null;
                    contactOwnerEmail: null;
                    checkedFallback: boolean;
                    mainWarnings: never[];
                    fallbackWarnings: never[];
                    eventTypeRedirectUrl: null;
                    isUsingAttributeWeights: boolean;
                  }
                | {
                    contactOwnerEmail: string | null;
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    checkedFallback: boolean;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    eventTypeRedirectUrl: string;
                    isUsingAttributeWeights: boolean;
                    result: null;
                  }
                | {
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    contactOwnerEmail: string | null;
                    checkedFallback: boolean;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    result: {
                      users: {
                        id: number;
                        name: string | null;
                        email: string;
                      }[];
                      perUserData: {
                        bookingsCount: Record<number, number>;
                        bookingShortfalls: Record<number, number> | null;
                        calibrations: Record<number, number> | null;
                        weights: Record<number, number> | null;
                      } | null;
                    };
                    isUsingAttributeWeights: boolean;
                    eventTypeRedirectUrl: string;
                  };
            }>;
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    formFillerId: string;
                    formId: string;
                    response: Record<
                      string,
                      {
                        label: string;
                        value: (string | number | string[]) & (string | number | string[] | undefined);
                        identifier?: string | undefined;
                      }
                    >;
                    chosenRouteId?: string | undefined;
                    isPreview?: boolean | undefined;
                  };
                  output: {
                    isPreview: boolean;
                    formResponse:
                      | {
                          id: number;
                          createdAt: Date;
                          formFillerId: string;
                          formId: string;
                          response: import(".prisma/client").Prisma.JsonValue;
                          routedToBookingUid: string | null;
                          chosenRouteId: string | null;
                        }
                      | {
                          id: number;
                          formId: string;
                          response: Record<
                            string,
                            {
                              label: string;
                              value: (string | number | string[]) & (string | number | string[] | undefined);
                              identifier?: string | undefined;
                            }
                          >;
                          chosenRouteId: string | null;
                          createdAt: Date;
                          updatedAt: Date;
                        };
                    teamMembersMatchingAttributeLogic: number[] | null;
                    attributeRoutingConfig:
                      | {
                          skipContactOwner?: boolean | undefined;
                          salesforce?:
                            | {
                                rrSkipToAccountLookupField?: boolean | undefined;
                                rrSKipToAccountLookupFieldName?: string | undefined;
                              }
                            | undefined;
                        }
                      | null
                      | undefined;
                    timeTaken: Record<string, number | null>;
                  };
                }>;
              }
            >;
          }
        >;
      } & {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                includePasswordAdded?: boolean | undefined;
              }
            | undefined;
          output:
            | {
                isTeamAdminOrOwner: boolean;
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                  id: number;
                  email: string;
                  emailVerified: Date | null;
                }[];
                isPremium: boolean | undefined;
                organizationId: null;
                organization: {
                  id: number;
                  isPlatform: boolean;
                  slug: string;
                  isOrgAdmin: boolean;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                profiles: never[];
                organizationSettings?: undefined;
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                  enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                  defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
              }
            | {
                isTeamAdminOrOwner: boolean;
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                  id: number;
                  email: string;
                  emailVerified: Date | null;
                }[];
                isPremium: boolean | undefined;
                organizationId: number | null;
                organization: {
                  id: number | null;
                  isOrgAdmin: boolean;
                  metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?:
                      | {
                          teamSlug?: string | null | undefined;
                          lastMigrationTime?: string | undefined;
                          reverted?: boolean | undefined;
                          lastRevertTime?: string | undefined;
                        }
                      | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                  } | null;
                  requestedSlug: string | null;
                  name?: string | undefined;
                  organizationSettings?:
                    | {
                        allowSEOIndexing: boolean;
                        lockEventTypeCreationForUsers: boolean;
                      }
                    | null
                    | undefined;
                  slug?: string | null | undefined;
                  logoUrl?: string | null | undefined;
                  isPrivate?: boolean | undefined;
                  bannerUrl?: string | null | undefined;
                  isPlatform?: boolean | undefined;
                };
                username: string | null;
                profile:
                  | import("@calcom/types/UserProfile").UserAsPersonalProfile
                  | {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    }
                  | {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      user: {
                        name: string | null;
                        id: number;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        defaultScheduleId: number | null;
                        isPlatformManaged: boolean;
                      };
                      organization: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        organizationSettings: {
                          allowSEOIndexing: boolean;
                          lockEventTypeCreationForUsers: boolean;
                        } | null;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } & Omit<
                        Pick<
                          {
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue | null;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                            includeManagedEventsInLimits: boolean;
                          },
                          "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                        >,
                        "metadata"
                      > & {
                          requestedSlug: string | null;
                          metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?:
                              | {
                                  teamSlug?: string | null | undefined;
                                  lastMigrationTime?: string | undefined;
                                  reverted?: boolean | undefined;
                                  lastRevertTime?: string | undefined;
                                }
                              | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                          };
                        };
                      movedFromUser: {
                        id: number;
                      } | null;
                      id: number;
                      uid: string;
                      userId: number;
                      createdAt: Date & string;
                      updatedAt: Date & string;
                      username: string;
                      organizationId: number;
                      upId: string;
                    }
                  | ({
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                  | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    });
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                organizationSettings:
                  | {
                      allowSEOIndexing: boolean;
                      lockEventTypeCreationForUsers: boolean;
                    }
                  | null
                  | undefined;
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                  enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                  defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
              };
        }>;
        myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            sumOfBookings: number | undefined;
            sumOfCalendars: number | undefined;
            sumOfTeams: number | undefined;
            sumOfEventTypes: number | undefined;
            sumOfTeamEventTypes: number | undefined;
          };
        }>;
        platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            username: string | null;
            email: string;
            timeFormat: number | null;
            timeZone: string;
            defaultScheduleId: number | null;
            weekStart: string;
            organizationId: number | null;
            organization: {
              isPlatform: any;
              id: number | null;
            };
          };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            password: string;
            totpCode?: string | undefined;
          };
          output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: void;
          output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                eventTypeId: number | null;
                onboarding?: boolean | undefined;
              }
            | undefined;
          output: {
            connectedCalendars: (
              | {
                  integration: import("@calcom/types/App").App & {
                    credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                    credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null;
                  error?: undefined;
                  primary?: undefined;
                  calendars?: undefined;
                }
              | {
                  integration: import("@calcom/types/App").App & {
                    credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                    credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  error: {
                    message: string;
                  };
                  delegationCredentialId?: undefined;
                  primary?: undefined;
                  calendars?: undefined;
                }
              | {
                  integration: {
                    installed?: boolean;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title?: string;
                    name: string;
                    description: string;
                    variant:
                      | "calendar"
                      | "payment"
                      | "conferencing"
                      | "video"
                      | "other"
                      | "other_calendar"
                      | "automation"
                      | "crm";
                    slug: string;
                    category?: string;
                    categories: import(".prisma/client").AppCategories[];
                    extendsFeature?: "EventType" | "User";
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string;
                    verified?: boolean;
                    trending?: boolean;
                    rating?: number;
                    reviews?: number;
                    isGlobal?: boolean;
                    simplePath?: string;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free";
                    price?: number;
                    commission?: number;
                    licenseRequired?: boolean;
                    teamsPlanRequired?: {
                      upgradeUrl: string;
                    };
                    appData?: import("@calcom/types/App").AppData;
                    paid?: import("@calcom/types/App").PaidAppData;
                    dirName?: string;
                    isTemplate?: boolean;
                    __template?: string;
                    dependencies?: string[];
                    concurrentMeetings?: boolean;
                    createdAt?: string;
                    isOAuth?: boolean;
                    delegationCredential?: {
                      workspacePlatformSlug: string;
                    };
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null;
                  primary: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    delegationCredentialId: string | null;
                    name?: string;
                    email?: string;
                    primaryEmail?: string;
                    integrationTitle?: string;
                    id?: string | undefined;
                    error?: string | null | undefined;
                    userId?: number | undefined;
                    eventTypeId?: number | null | undefined;
                    integration?: string | undefined;
                    domainWideDelegationCredentialId?: string | null | undefined;
                    googleChannelId?: string | null | undefined;
                    googleChannelKind?: string | null | undefined;
                    googleChannelResourceId?: string | null | undefined;
                    googleChannelResourceUri?: string | null | undefined;
                    googleChannelExpiration?: string | null | undefined;
                    externalId: string;
                  };
                  calendars: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    delegationCredentialId: string | null;
                    name?: string;
                    email?: string;
                    primaryEmail?: string;
                    integrationTitle?: string;
                    id?: string | undefined;
                    error?: string | null | undefined;
                    userId?: number | undefined;
                    eventTypeId?: number | null | undefined;
                    integration?: string | undefined;
                    domainWideDelegationCredentialId?: string | null | undefined;
                    googleChannelId?: string | null | undefined;
                    googleChannelKind?: string | null | undefined;
                    googleChannelResourceId?: string | null | undefined;
                    googleChannelResourceUri?: string | null | undefined;
                    googleChannelExpiration?: string | null | undefined;
                    externalId: string;
                  }[];
                  error?: undefined;
                }
              | {
                  integration: {
                    installed?: boolean;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title?: string;
                    name: string;
                    description: string;
                    variant:
                      | "calendar"
                      | "payment"
                      | "conferencing"
                      | "video"
                      | "other"
                      | "other_calendar"
                      | "automation"
                      | "crm";
                    slug: string;
                    category?: string;
                    categories: import(".prisma/client").AppCategories[];
                    extendsFeature?: "EventType" | "User";
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string;
                    verified?: boolean;
                    trending?: boolean;
                    rating?: number;
                    reviews?: number;
                    isGlobal?: boolean;
                    simplePath?: string;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free";
                    price?: number;
                    commission?: number;
                    licenseRequired?: boolean;
                    teamsPlanRequired?: {
                      upgradeUrl: string;
                    };
                    appData?: import("@calcom/types/App").AppData;
                    paid?: import("@calcom/types/App").PaidAppData;
                    dirName?: string;
                    isTemplate?: boolean;
                    __template?: string;
                    dependencies?: string[];
                    concurrentMeetings?: boolean;
                    createdAt?: string;
                    isOAuth?: boolean;
                    delegationCredential?: {
                      workspacePlatformSlug: string;
                    };
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null | undefined;
                  error: {
                    message: string;
                  };
                  primary?: undefined;
                  calendars?: undefined;
                }
            )[];
            destinationCalendar: {
              primary?: boolean;
              name?: string;
              readOnly?: boolean;
              email?: string;
              primaryEmail: string | null;
              credentialId: number | null;
              integrationTitle?: string;
              id: string | number;
              error?: string | null | undefined;
              userId: number | null;
              eventTypeId: number | null;
              integration: string;
              delegationCredentialId: string | null;
              domainWideDelegationCredentialId: string | null;
              googleChannelId?: string | null | undefined;
              googleChannelKind?: string | null | undefined;
              googleChannelResourceId?: string | null | undefined;
              googleChannelResourceUri?: string | null | undefined;
              googleChannelExpiration?: string | null | undefined;
              externalId: string;
            };
          };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            integration: string;
            externalId: string;
            eventTypeId?: number | null | undefined;
            bookingId?: number | null | undefined;
          };
          output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            variant?: string | undefined;
            exclude?: string[] | undefined;
            onlyInstalled?: boolean | undefined;
            includeTeamInstalledApps?: boolean | undefined;
            extendsFeature?: "EventType" | undefined;
            teamId?: number | null | undefined;
            sortByMostPopular?: boolean | undefined;
            sortByInstalledFirst?: boolean | undefined;
            categories?:
              | (
                  | "calendar"
                  | "messaging"
                  | "other"
                  | "payment"
                  | "video"
                  | "web3"
                  | "automation"
                  | "analytics"
                  | "conferencing"
                  | "crm"
                )[]
              | undefined;
            appId?: string | undefined;
          };
          output: {
            items: {
              dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
              userCredentialIds: number[];
              invalidCredentialIds: number[];
              teams: ({
                teamId: number;
                name: string;
                logoUrl: string | null;
                credentialId: number;
                isAdmin: boolean;
              } | null)[];
              isInstalled: boolean | undefined;
              isSetupAlready: boolean | undefined;
              credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
              installed?: boolean;
              type:
                | `${string}_calendar`
                | `${string}_messaging`
                | `${string}_payment`
                | `${string}_video`
                | `${string}_other`
                | `${string}_automation`
                | `${string}_analytics`
                | `${string}_crm`
                | `${string}_other_calendar`;
              title?: string;
              name: string;
              description: string;
              variant:
                | "calendar"
                | "payment"
                | "conferencing"
                | "video"
                | "other"
                | "other_calendar"
                | "automation"
                | "crm";
              slug: string;
              category?: string;
              categories: import(".prisma/client").AppCategories[];
              extendsFeature?: "EventType" | "User";
              logo: string;
              publisher: string;
              url: string;
              docsUrl?: string;
              verified?: boolean;
              trending?: boolean;
              rating?: number;
              reviews?: number;
              isGlobal?: boolean;
              simplePath?: string;
              email: string;
              feeType?: "monthly" | "usage-based" | "one-time" | "free";
              price?: number;
              commission?: number;
              licenseRequired?: boolean;
              teamsPlanRequired?: {
                upgradeUrl: string;
              };
              appData?: import("@calcom/types/App").AppData;
              paid?: import("@calcom/types/App").PaidAppData;
              dirName?: string;
              isTemplate?: boolean;
              __template?: string;
              dependencies?: string[];
              concurrentMeetings?: boolean;
              createdAt?: string;
              isOAuth?: boolean;
              delegationCredential?: {
                workspacePlatformSlug: string;
              };
              locationOption: import("@calcom/app-store/utils").LocationOption | null;
              enabled: boolean;
            }[];
          };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            appId: string;
          };
          output: {
            installed?: boolean;
            type:
              | `${string}_calendar`
              | `${string}_messaging`
              | `${string}_payment`
              | `${string}_video`
              | `${string}_other`
              | `${string}_automation`
              | `${string}_analytics`
              | `${string}_crm`
              | `${string}_other_calendar`;
            title?: string;
            name: string;
            description: string;
            variant:
              | "calendar"
              | "payment"
              | "conferencing"
              | "video"
              | "other"
              | "other_calendar"
              | "automation"
              | "crm";
            slug: string;
            category?: string;
            categories: import(".prisma/client").AppCategories[];
            extendsFeature?: "EventType" | "User";
            logo: string;
            publisher: string;
            url: string;
            docsUrl?: string;
            verified?: boolean;
            trending?: boolean;
            rating?: number;
            reviews?: number;
            isGlobal?: boolean;
            simplePath?: string;
            email: string;
            key?: import(".prisma/client").Prisma.JsonValue;
            feeType?: "monthly" | "usage-based" | "one-time" | "free";
            price?: number;
            commission?: number;
            licenseRequired?: boolean;
            teamsPlanRequired?: {
              upgradeUrl: string;
            };
            appData?: import("@calcom/types/App").AppData;
            paid?: import("@calcom/types/App").PaidAppData;
            dirName?: string;
            isTemplate?: boolean;
            __template?: string;
            dependencies?: string[];
            concurrentMeetings?: boolean;
            createdAt?: string;
            isOAuth?: boolean;
            delegationCredential?: {
              workspacePlatformSlug: string;
            };
            locationOption: import("@calcom/app-store/utils").LocationOption | null;
            isInstalled: number;
          };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            appType: string;
          };
          output: {
            credentials: (
              | {
                  id: number;
                  delegatedToId: string;
                  userId: number;
                  user: {
                    email: string;
                  };
                  key: {
                    access_token: string;
                  };
                  invalid: boolean;
                  teamId: null;
                  team: null;
                  delegatedTo: {
                    serviceAccountKey: import("zod").objectOutputType<
                      {
                        private_key: import("zod").ZodString;
                        client_email: import("zod").ZodOptional<import("zod").ZodString>;
                        client_id: import("zod").ZodString;
                        tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                      },
                      import("zod").ZodTypeAny,
                      "passthrough"
                    >;
                  } | null;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  appId: string;
                }
              | ({
                  user: {
                    name: string | null;
                  } | null;
                  team: {
                    name: string;
                  } | null;
                } & {
                  key: import(".prisma/client").Prisma.JsonValue;
                  id: number;
                  type: string;
                  userId: number | null;
                  teamId: number | null;
                  subscriptionId: string | null;
                  billingCycleStart: number | null;
                  appId: string | null;
                  paymentStatus: string | null;
                  invalid: boolean | null;
                })
            )[];
            userAdminTeams: number[];
          };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            isPremium: boolean;
            username: string | null;
          };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            username?: string | undefined;
            name?: string | undefined;
            email?: string | undefined;
            bio?: string | undefined;
            avatarUrl?: string | null | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?:
              | {
                  proPaidForByTeamId?: number | undefined;
                  stripeCustomerId?: string | undefined;
                  vitalSettings?:
                    | {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                      }
                    | undefined;
                  isPremium?: boolean | undefined;
                  sessionTimeout?: number | undefined;
                  defaultConferencingApp?:
                    | {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                      }
                    | undefined;
                  defaultBookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  emailChangeWaitingForVerification?: string | undefined;
                  migratedToOrgFrom?:
                    | {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            travelSchedules?:
              | {
                  startDate: Date;
                  timeZone: string;
                  id?: number | undefined;
                  endDate?: Date | undefined;
                }[]
              | undefined;
            secondaryEmails?:
              | {
                  id: number;
                  email: string;
                  isDeleted?: boolean | undefined;
                }[]
              | undefined;
          };
          output: {
            email: string | undefined;
            avatarUrl: string | null;
            hasEmailBeenChanged: boolean | "" | undefined;
            sendEmailVerification: boolean;
            username?: string | undefined;
            name?: string | undefined;
            bio?: string | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?:
              | {
                  proPaidForByTeamId?: number | undefined;
                  stripeCustomerId?: string | undefined;
                  vitalSettings?:
                    | {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                      }
                    | undefined;
                  isPremium?: boolean | undefined;
                  sessionTimeout?: number | undefined;
                  defaultConferencingApp?:
                    | {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                      }
                    | undefined;
                  defaultBookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  emailChangeWaitingForVerification?: string | undefined;
                  migratedToOrgFrom?:
                    | {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            travelSchedules?:
              | {
                  startDate: Date;
                  timeZone: string;
                  id?: number | undefined;
                  endDate?: Date | undefined;
                }[]
              | undefined;
            secondaryEmails?:
              | {
                  id: number;
                  email: string;
                  isDeleted: boolean;
                }[]
              | undefined;
          };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: void;
          output: {
            message: string;
          };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: number[];
          };
          output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: string[];
          };
          output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: number[];
          };
          output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            rating: string;
            comment: string;
          };
          output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            teamId?: number | undefined;
          };
          output: {
            label: string;
            options: {
              label: string;
              value: string;
              disabled?: boolean;
              icon?: string;
              slug?: string;
              credentialId?: number;
            }[];
          }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            id: number;
            externalId?: string | undefined;
            teamId?: number | undefined;
          };
          output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            roomName: string;
          };
          output:
            | {
                data: import("zod").objectOutputType<
                  {
                    id: import("zod").ZodString;
                    room_name: import("zod").ZodString;
                    start_ts: import("zod").ZodNumber;
                    status: import("zod").ZodString;
                    max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                    duration: import("zod").ZodNumber;
                    share_token: import("zod").ZodString;
                  },
                  import("zod").ZodTypeAny,
                  "passthrough"
                >[];
                total_count: number;
              }
            | {}
            | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            teamUpgradeBanner: ({
              team: {
                children: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                }[];
              } & {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
            orgUpgradeBanner: ({
              team: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
            verifyEmailBanner: boolean;
            calendarCredentialBanner: boolean;
            invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
          };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            recordingId: string;
          };
          output:
            | {
                download_link: string;
              }
            | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output:
            | {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              }
            | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
          };
          output: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
          };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            email: string;
            isVerified: boolean;
          };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                includeOrg?: boolean | undefined;
              }
            | undefined;
          output: (
            | {
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import(".prisma/client").$Enums.MembershipRole;
                readOnly: boolean;
              }
            | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
              }
          )[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            token: string;
          };
          output: {
            isBookingAlreadyAcceptedBySomeoneElse: boolean;
            meetingUrl: string;
          };
        }>;
        outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            offset: number;
            dateRange: {
              startDate: Date;
              endDate: Date;
            };
            toTeamUserId: number | null;
            reasonId: number;
            uuid?: string | null | undefined;
            forUserId?: number | null | undefined;
            notes?: string | null | undefined;
          };
          output: {} | undefined;
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            limit: number;
            cursor?: number | null | undefined;
            fetchTeamMembersEntries?: boolean | undefined;
            searchTerm?: string | undefined;
          };
          output: {
            rows: {
              user: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              };
              id: number;
              end: Date;
              start: Date;
              uuid: string;
              notes: string | null;
              toUser: {
                name: string | null;
                email: string;
                username: string | null;
              } | null;
              reason: {
                id: number;
                userId: number | null;
                reason: string;
                emoji: string;
              } | null;
              toUserId: number | null;
            }[];
            nextCursor: number | undefined;
            meta: {
              totalRowCount: number;
            };
          };
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            outOfOfficeUid: string;
            userId?: number | null | undefined;
          };
          output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            email: string;
          };
          output: {
            data: {
              id: number;
              userId: number;
              email: string;
              emailVerified: Date | null;
            };
            message: string;
          };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            startDate: Date;
            endDate: Date | null;
            timeZone: string;
          }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            userId: number | null;
            enabled: boolean;
            reason: string;
            emoji: string;
          }[];
        }>;
        addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            subscription: string;
          };
          output: {
            message: string;
          };
        }>;
        removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            subscription: string;
          };
          output: {
            message: string;
          };
        }>;
        markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            bookingUid: string;
            attendees?:
              | {
                  email: string;
                  noShow: boolean;
                }[]
              | undefined;
            noShowHost?: boolean | undefined;
          };
          output: {
            attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
            noShowHost: boolean;
            message: string;
          };
        }>;
      };
      record: {
        loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includePasswordAdded?: boolean | undefined;
                  }
                | undefined;
              output:
                | {
                    isTeamAdminOrOwner: boolean;
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                      id: number;
                      email: string;
                      emailVerified: Date | null;
                    }[];
                    isPremium: boolean | undefined;
                    organizationId: null;
                    organization: {
                      id: number;
                      isPlatform: boolean;
                      slug: string;
                      isOrgAdmin: boolean;
                    };
                    username: string | null;
                    profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                    profiles: never[];
                    organizationSettings?: undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                  }
                | {
                    isTeamAdminOrOwner: boolean;
                    passwordAdded?: boolean | undefined;
                    secondaryEmails: {
                      id: number;
                      email: string;
                      emailVerified: Date | null;
                    }[];
                    isPremium: boolean | undefined;
                    organizationId: number | null;
                    organization: {
                      id: number | null;
                      isOrgAdmin: boolean;
                      metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?:
                          | {
                              teamSlug?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              lastRevertTime?: string | undefined;
                            }
                          | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                      } | null;
                      requestedSlug: string | null;
                      name?: string | undefined;
                      organizationSettings?:
                        | {
                            allowSEOIndexing: boolean;
                            lockEventTypeCreationForUsers: boolean;
                          }
                        | null
                        | undefined;
                      slug?: string | null | undefined;
                      logoUrl?: string | null | undefined;
                      isPrivate?: boolean | undefined;
                      bannerUrl?: string | null | undefined;
                      isPlatform?: boolean | undefined;
                    };
                    username: string | null;
                    profile:
                      | import("@calcom/types/UserProfile").UserAsPersonalProfile
                      | {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        }
                      | {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          user: {
                            name: string | null;
                            id: number;
                            locale: string | null;
                            startTime: number;
                            endTime: number;
                            email: string;
                            username: string | null;
                            avatarUrl: string | null;
                            bufferTime: number;
                            defaultScheduleId: number | null;
                            isPlatformManaged: boolean;
                          };
                          organization: {
                            name: string;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            organizationSettings: {
                              allowSEOIndexing: boolean;
                              lockEventTypeCreationForUsers: boolean;
                            } | null;
                            slug: string | null;
                            logoUrl: string | null;
                            isPrivate: boolean;
                            bannerUrl: string | null;
                            isPlatform: boolean;
                            members: {
                              id: number;
                              role: import(".prisma/client").$Enums.MembershipRole;
                              userId: number;
                              teamId: number;
                              disableImpersonation: boolean;
                              accepted: boolean;
                            }[];
                          } & Omit<
                            Pick<
                              {
                                id: number;
                                name: string;
                                slug: string | null;
                                logoUrl: string | null;
                                calVideoLogo: string | null;
                                appLogo: string | null;
                                appIconLogo: string | null;
                                bio: string | null;
                                hideBranding: boolean;
                                isPrivate: boolean;
                                hideBookATeamMember: boolean;
                                createdAt: Date;
                                metadata: import(".prisma/client").Prisma.JsonValue | null;
                                theme: string | null;
                                brandColor: string | null;
                                darkBrandColor: string | null;
                                bannerUrl: string | null;
                                parentId: number | null;
                                timeFormat: number | null;
                                timeZone: string;
                                weekStart: string;
                                isOrganization: boolean;
                                pendingPayment: boolean;
                                isPlatform: boolean;
                                createdByOAuthClientId: string | null;
                                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                smsLockReviewedByAdmin: boolean;
                                bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                includeManagedEventsInLimits: boolean;
                              },
                              "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                            >,
                            "metadata"
                          > & {
                              requestedSlug: string | null;
                              metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?:
                                  | {
                                      teamSlug?: string | null | undefined;
                                      lastMigrationTime?: string | undefined;
                                      reverted?: boolean | undefined;
                                      lastRevertTime?: string | undefined;
                                    }
                                  | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                              };
                            };
                          movedFromUser: {
                            id: number;
                          } | null;
                          id: number;
                          uid: string;
                          userId: number;
                          createdAt: Date & string;
                          updatedAt: Date & string;
                          username: string;
                          organizationId: number;
                          upId: string;
                        }
                      | ({
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                      | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                          name: string | null;
                          avatarUrl: string | null;
                          startTime: number;
                          endTime: number;
                          bufferTime: number;
                          username: string | null;
                          upId: string;
                          id: null;
                          organizationId: null;
                          organization: null;
                        });
                    profiles: import("@calcom/types/UserProfile").UserProfile[];
                    organizationSettings:
                      | {
                          allowSEOIndexing: boolean;
                          lockEventTypeCreationForUsers: boolean;
                        }
                      | null
                      | undefined;
                    id: number;
                    name: string | null;
                    email: string;
                    emailMd5: string;
                    emailVerified: Date | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    locale: string;
                    timeFormat: number | null;
                    timeZone: string;
                    avatar: string;
                    avatarUrl: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    twoFactorEnabled: boolean;
                    disableImpersonation: boolean;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderEmail: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bio: string | null;
                    weekStart: string;
                    theme: string | null;
                    appTheme: string | null;
                    hideBranding: boolean;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    defaultBookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                  };
            }>;
            myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                sumOfBookings: number | undefined;
                sumOfCalendars: number | undefined;
                sumOfTeams: number | undefined;
                sumOfEventTypes: number | undefined;
                sumOfTeamEventTypes: number | undefined;
              };
            }>;
            platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                username: string | null;
                email: string;
                timeFormat: number | null;
                timeZone: string;
                defaultScheduleId: number | null;
                weekStart: string;
                organizationId: number | null;
                organization: {
                  isPlatform: any;
                  id: number | null;
                };
              };
            }>;
            deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                password: string;
                totpCode?: string | undefined;
              };
              output: void;
            }>;
            deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: void;
            }>;
            connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    eventTypeId: number | null;
                    onboarding?: boolean | undefined;
                  }
                | undefined;
              output: {
                connectedCalendars: (
                  | {
                      integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null;
                      error?: undefined;
                      primary?: undefined;
                      calendars?: undefined;
                    }
                  | {
                      integration: import("@calcom/types/App").App & {
                        credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                        credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      error: {
                        message: string;
                      };
                      delegationCredentialId?: undefined;
                      primary?: undefined;
                      calendars?: undefined;
                    }
                  | {
                      integration: {
                        installed?: boolean;
                        type:
                          | `${string}_calendar`
                          | `${string}_messaging`
                          | `${string}_payment`
                          | `${string}_video`
                          | `${string}_other`
                          | `${string}_automation`
                          | `${string}_analytics`
                          | `${string}_crm`
                          | `${string}_other_calendar`;
                        title?: string;
                        name: string;
                        description: string;
                        variant:
                          | "calendar"
                          | "payment"
                          | "conferencing"
                          | "video"
                          | "other"
                          | "other_calendar"
                          | "automation"
                          | "crm";
                        slug: string;
                        category?: string;
                        categories: import(".prisma/client").AppCategories[];
                        extendsFeature?: "EventType" | "User";
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string;
                        verified?: boolean;
                        trending?: boolean;
                        rating?: number;
                        reviews?: number;
                        isGlobal?: boolean;
                        simplePath?: string;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free";
                        price?: number;
                        commission?: number;
                        licenseRequired?: boolean;
                        teamsPlanRequired?: {
                          upgradeUrl: string;
                        };
                        appData?: import("@calcom/types/App").AppData;
                        paid?: import("@calcom/types/App").PaidAppData;
                        dirName?: string;
                        isTemplate?: boolean;
                        __template?: string;
                        dependencies?: string[];
                        concurrentMeetings?: boolean;
                        createdAt?: string;
                        isOAuth?: boolean;
                        delegationCredential?: {
                          workspacePlatformSlug: string;
                        };
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null;
                      primary: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        delegationCredentialId: string | null;
                        name?: string;
                        email?: string;
                        primaryEmail?: string;
                        integrationTitle?: string;
                        id?: string | undefined;
                        error?: string | null | undefined;
                        userId?: number | undefined;
                        eventTypeId?: number | null | undefined;
                        integration?: string | undefined;
                        domainWideDelegationCredentialId?: string | null | undefined;
                        googleChannelId?: string | null | undefined;
                        googleChannelKind?: string | null | undefined;
                        googleChannelResourceId?: string | null | undefined;
                        googleChannelResourceUri?: string | null | undefined;
                        googleChannelExpiration?: string | null | undefined;
                        externalId: string;
                      };
                      calendars: {
                        readOnly: boolean;
                        primary: true | null;
                        isSelected: boolean;
                        credentialId: number;
                        delegationCredentialId: string | null;
                        name?: string;
                        email?: string;
                        primaryEmail?: string;
                        integrationTitle?: string;
                        id?: string | undefined;
                        error?: string | null | undefined;
                        userId?: number | undefined;
                        eventTypeId?: number | null | undefined;
                        integration?: string | undefined;
                        domainWideDelegationCredentialId?: string | null | undefined;
                        googleChannelId?: string | null | undefined;
                        googleChannelKind?: string | null | undefined;
                        googleChannelResourceId?: string | null | undefined;
                        googleChannelResourceUri?: string | null | undefined;
                        googleChannelExpiration?: string | null | undefined;
                        externalId: string;
                      }[];
                      error?: undefined;
                    }
                  | {
                      integration: {
                        installed?: boolean;
                        type:
                          | `${string}_calendar`
                          | `${string}_messaging`
                          | `${string}_payment`
                          | `${string}_video`
                          | `${string}_other`
                          | `${string}_automation`
                          | `${string}_analytics`
                          | `${string}_crm`
                          | `${string}_other_calendar`;
                        title?: string;
                        name: string;
                        description: string;
                        variant:
                          | "calendar"
                          | "payment"
                          | "conferencing"
                          | "video"
                          | "other"
                          | "other_calendar"
                          | "automation"
                          | "crm";
                        slug: string;
                        category?: string;
                        categories: import(".prisma/client").AppCategories[];
                        extendsFeature?: "EventType" | "User";
                        logo: string;
                        publisher: string;
                        url: string;
                        docsUrl?: string;
                        verified?: boolean;
                        trending?: boolean;
                        rating?: number;
                        reviews?: number;
                        isGlobal?: boolean;
                        simplePath?: string;
                        email: string;
                        key?: import(".prisma/client").Prisma.JsonValue;
                        feeType?: "monthly" | "usage-based" | "one-time" | "free";
                        price?: number;
                        commission?: number;
                        licenseRequired?: boolean;
                        teamsPlanRequired?: {
                          upgradeUrl: string;
                        };
                        appData?: import("@calcom/types/App").AppData;
                        paid?: import("@calcom/types/App").PaidAppData;
                        dirName?: string;
                        isTemplate?: boolean;
                        __template?: string;
                        dependencies?: string[];
                        concurrentMeetings?: boolean;
                        createdAt?: string;
                        isOAuth?: boolean;
                        delegationCredential?: {
                          workspacePlatformSlug: string;
                        };
                        locationOption: import("@calcom/app-store/utils").LocationOption | null;
                      };
                      credentialId: number;
                      delegationCredentialId: string | null | undefined;
                      error: {
                        message: string;
                      };
                      primary?: undefined;
                      calendars?: undefined;
                    }
                )[];
                destinationCalendar: {
                  primary?: boolean;
                  name?: string;
                  readOnly?: boolean;
                  email?: string;
                  primaryEmail: string | null;
                  credentialId: number | null;
                  integrationTitle?: string;
                  id: string | number;
                  error?: string | null | undefined;
                  userId: number | null;
                  eventTypeId: number | null;
                  integration: string;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                  googleChannelId?: string | null | undefined;
                  googleChannelKind?: string | null | undefined;
                  googleChannelResourceId?: string | null | undefined;
                  googleChannelResourceUri?: string | null | undefined;
                  googleChannelExpiration?: string | null | undefined;
                  externalId: string;
                };
              };
            }>;
            setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                integration: string;
                externalId: string;
                eventTypeId?: number | null | undefined;
                bookingId?: number | null | undefined;
              };
              output: void;
            }>;
            integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                variant?: string | undefined;
                exclude?: string[] | undefined;
                onlyInstalled?: boolean | undefined;
                includeTeamInstalledApps?: boolean | undefined;
                extendsFeature?: "EventType" | undefined;
                teamId?: number | null | undefined;
                sortByMostPopular?: boolean | undefined;
                sortByInstalledFirst?: boolean | undefined;
                categories?:
                  | (
                      | "calendar"
                      | "messaging"
                      | "other"
                      | "payment"
                      | "video"
                      | "web3"
                      | "automation"
                      | "analytics"
                      | "conferencing"
                      | "crm"
                    )[]
                  | undefined;
                appId?: string | undefined;
              };
              output: {
                items: {
                  dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                  userCredentialIds: number[];
                  invalidCredentialIds: number[];
                  teams: ({
                    teamId: number;
                    name: string;
                    logoUrl: string | null;
                    credentialId: number;
                    isAdmin: boolean;
                  } | null)[];
                  isInstalled: boolean | undefined;
                  isSetupAlready: boolean | undefined;
                  credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                  installed?: boolean;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  title?: string;
                  name: string;
                  description: string;
                  variant:
                    | "calendar"
                    | "payment"
                    | "conferencing"
                    | "video"
                    | "other"
                    | "other_calendar"
                    | "automation"
                    | "crm";
                  slug: string;
                  category?: string;
                  categories: import(".prisma/client").AppCategories[];
                  extendsFeature?: "EventType" | "User";
                  logo: string;
                  publisher: string;
                  url: string;
                  docsUrl?: string;
                  verified?: boolean;
                  trending?: boolean;
                  rating?: number;
                  reviews?: number;
                  isGlobal?: boolean;
                  simplePath?: string;
                  email: string;
                  feeType?: "monthly" | "usage-based" | "one-time" | "free";
                  price?: number;
                  commission?: number;
                  licenseRequired?: boolean;
                  teamsPlanRequired?: {
                    upgradeUrl: string;
                  };
                  appData?: import("@calcom/types/App").AppData;
                  paid?: import("@calcom/types/App").PaidAppData;
                  dirName?: string;
                  isTemplate?: boolean;
                  __template?: string;
                  dependencies?: string[];
                  concurrentMeetings?: boolean;
                  createdAt?: string;
                  isOAuth?: boolean;
                  delegationCredential?: {
                    workspacePlatformSlug: string;
                  };
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  enabled: boolean;
                }[];
              };
            }>;
            appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appId: string;
              };
              output: {
                installed?: boolean;
                type:
                  | `${string}_calendar`
                  | `${string}_messaging`
                  | `${string}_payment`
                  | `${string}_video`
                  | `${string}_other`
                  | `${string}_automation`
                  | `${string}_analytics`
                  | `${string}_crm`
                  | `${string}_other_calendar`;
                title?: string;
                name: string;
                description: string;
                variant:
                  | "calendar"
                  | "payment"
                  | "conferencing"
                  | "video"
                  | "other"
                  | "other_calendar"
                  | "automation"
                  | "crm";
                slug: string;
                category?: string;
                categories: import(".prisma/client").AppCategories[];
                extendsFeature?: "EventType" | "User";
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string;
                verified?: boolean;
                trending?: boolean;
                rating?: number;
                reviews?: number;
                isGlobal?: boolean;
                simplePath?: string;
                email: string;
                key?: import(".prisma/client").Prisma.JsonValue;
                feeType?: "monthly" | "usage-based" | "one-time" | "free";
                price?: number;
                commission?: number;
                licenseRequired?: boolean;
                teamsPlanRequired?: {
                  upgradeUrl: string;
                };
                appData?: import("@calcom/types/App").AppData;
                paid?: import("@calcom/types/App").PaidAppData;
                dirName?: string;
                isTemplate?: boolean;
                __template?: string;
                dependencies?: string[];
                concurrentMeetings?: boolean;
                createdAt?: string;
                isOAuth?: boolean;
                delegationCredential?: {
                  workspacePlatformSlug: string;
                };
                locationOption: import("@calcom/app-store/utils").LocationOption | null;
                isInstalled: number;
              };
            }>;
            appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appType: string;
              };
              output: {
                credentials: (
                  | {
                      id: number;
                      delegatedToId: string;
                      userId: number;
                      user: {
                        email: string;
                      };
                      key: {
                        access_token: string;
                      };
                      invalid: boolean;
                      teamId: null;
                      team: null;
                      delegatedTo: {
                        serviceAccountKey: import("zod").objectOutputType<
                          {
                            private_key: import("zod").ZodString;
                            client_email: import("zod").ZodOptional<import("zod").ZodString>;
                            client_id: import("zod").ZodString;
                            tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                          },
                          import("zod").ZodTypeAny,
                          "passthrough"
                        >;
                      } | null;
                      type:
                        | `${string}_calendar`
                        | `${string}_messaging`
                        | `${string}_payment`
                        | `${string}_video`
                        | `${string}_other`
                        | `${string}_automation`
                        | `${string}_analytics`
                        | `${string}_crm`
                        | `${string}_other_calendar`;
                      appId: string;
                    }
                  | ({
                      user: {
                        name: string | null;
                      } | null;
                      team: {
                        name: string;
                      } | null;
                    } & {
                      key: import(".prisma/client").Prisma.JsonValue;
                      id: number;
                      type: string;
                      userId: number | null;
                      teamId: number | null;
                      subscriptionId: string | null;
                      billingCycleStart: number | null;
                      appId: string | null;
                      paymentStatus: string | null;
                      invalid: boolean | null;
                    })
                )[];
                userAdminTeams: number[];
              };
            }>;
            stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                isPremium: boolean;
                username: string | null;
              };
            }>;
            updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                username?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                bio?: string | undefined;
                avatarUrl?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?:
                  | {
                      proPaidForByTeamId?: number | undefined;
                      stripeCustomerId?: string | undefined;
                      vitalSettings?:
                        | {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                          }
                        | undefined;
                      isPremium?: boolean | undefined;
                      sessionTimeout?: number | undefined;
                      defaultConferencingApp?:
                        | {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                          }
                        | undefined;
                      defaultBookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      emailChangeWaitingForVerification?: string | undefined;
                      migratedToOrgFrom?:
                        | {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                          }
                        | undefined;
                    }
                  | null
                  | undefined;
                travelSchedules?:
                  | {
                      startDate: Date;
                      timeZone: string;
                      id?: number | undefined;
                      endDate?: Date | undefined;
                    }[]
                  | undefined;
                secondaryEmails?:
                  | {
                      id: number;
                      email: string;
                      isDeleted?: boolean | undefined;
                    }[]
                  | undefined;
              };
              output: {
                email: string | undefined;
                avatarUrl: string | null;
                hasEmailBeenChanged: boolean | "" | undefined;
                sendEmailVerification: boolean;
                username?: string | undefined;
                name?: string | undefined;
                bio?: string | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                hideBranding?: boolean | undefined;
                allowDynamicBooking?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                receiveMonthlyDigestEmail?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                appTheme?: string | null | undefined;
                completedOnboarding?: boolean | undefined;
                locale?: string | undefined;
                timeFormat?: number | undefined;
                disableImpersonation?: boolean | undefined;
                metadata?:
                  | {
                      proPaidForByTeamId?: number | undefined;
                      stripeCustomerId?: string | undefined;
                      vitalSettings?:
                        | {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                          }
                        | undefined;
                      isPremium?: boolean | undefined;
                      sessionTimeout?: number | undefined;
                      defaultConferencingApp?:
                        | {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                          }
                        | undefined;
                      defaultBookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      emailChangeWaitingForVerification?: string | undefined;
                      migratedToOrgFrom?:
                        | {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                          }
                        | undefined;
                    }
                  | null
                  | undefined;
                travelSchedules?:
                  | {
                      startDate: Date;
                      timeZone: string;
                      id?: number | undefined;
                      endDate?: Date | undefined;
                    }[]
                  | undefined;
                secondaryEmails?:
                  | {
                      id: number;
                      email: string;
                      isDeleted: boolean;
                    }[]
                  | undefined;
              };
            }>;
            unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                message: string;
              };
            }>;
            eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: number[];
              };
              output: void;
            }>;
            routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: string[];
              };
              output: void;
            }>;
            workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                ids: number[];
              };
              output: void;
            }>;
            submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                rating: string;
                comment: string;
              };
              output: void;
            }>;
            locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                label: string;
                options: {
                  label: string;
                  value: string;
                  disabled?: boolean;
                  icon?: string;
                  slug?: string;
                  credentialId?: number;
                }[];
              }[];
            }>;
            deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                externalId?: string | undefined;
                teamId?: number | undefined;
              };
              output: void;
            }>;
            bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: number;
            }>;
            getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                roomName: string;
              };
              output:
                | {
                    data: import("zod").objectOutputType<
                      {
                        id: import("zod").ZodString;
                        room_name: import("zod").ZodString;
                        start_ts: import("zod").ZodNumber;
                        status: import("zod").ZodString;
                        max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                        duration: import("zod").ZodNumber;
                        share_token: import("zod").ZodString;
                      },
                      import("zod").ZodTypeAny,
                      "passthrough"
                    >[];
                    total_count: number;
                  }
                | {}
                | undefined;
            }>;
            getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                teamUpgradeBanner: ({
                  team: {
                    children: {
                      name: string;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      createdAt: Date;
                      timeZone: string;
                      slug: string | null;
                      parentId: number | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      bio: string | null;
                      weekStart: string;
                      hideBranding: boolean;
                      theme: string | null;
                      timeFormat: number | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      smsLockState: import(".prisma/client").$Enums.SMSLockState;
                      smsLockReviewedByAdmin: boolean;
                      logoUrl: string | null;
                      calVideoLogo: string | null;
                      appLogo: string | null;
                      appIconLogo: string | null;
                      isPrivate: boolean;
                      hideBookATeamMember: boolean;
                      bannerUrl: string | null;
                      isOrganization: boolean;
                      pendingPayment: boolean;
                      isPlatform: boolean;
                      createdByOAuthClientId: string | null;
                      includeManagedEventsInLimits: boolean;
                    }[];
                  } & {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                } & {
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  userId: number;
                  teamId: number;
                  disableImpersonation: boolean;
                  accepted: boolean;
                })[];
                orgUpgradeBanner: ({
                  team: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                } & {
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  userId: number;
                  teamId: number;
                  disableImpersonation: boolean;
                  accepted: boolean;
                })[];
                verifyEmailBanner: boolean;
                calendarCredentialBanner: boolean;
                invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
              };
            }>;
            getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                recordingId: string;
              };
              output:
                | {
                    download_link: string;
                  }
                | undefined;
            }>;
            getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output:
                | {
                    appSlug?: string | undefined;
                    appLink?: string | undefined;
                  }
                | undefined;
            }>;
            updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              };
              output: {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              };
            }>;
            shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                email: string;
                isVerified: boolean;
              };
            }>;
            teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includeOrg?: boolean | undefined;
                  }
                | undefined;
              output: (
                | {
                    teamId: number;
                    name: string;
                    slug: string | null;
                    image: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    readOnly: boolean;
                  }
                | {
                    teamId: null;
                    name: string | null;
                    slug: string | null;
                    image: string;
                    readOnly: boolean;
                  }
              )[];
            }>;
            connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
              };
              output: {
                isBookingAlreadyAcceptedBySomeoneElse: boolean;
                meetingUrl: string;
              };
            }>;
            outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                offset: number;
                dateRange: {
                  startDate: Date;
                  endDate: Date;
                };
                toTeamUserId: number | null;
                reasonId: number;
                uuid?: string | null | undefined;
                forUserId?: number | null | undefined;
                notes?: string | null | undefined;
              };
              output: {} | undefined;
            }>;
            outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                fetchTeamMembersEntries?: boolean | undefined;
                searchTerm?: string | undefined;
              };
              output: {
                rows: {
                  user: {
                    name: string | null;
                    id: number;
                    role: import(".prisma/client").$Enums.UserPermissionRole;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    locale: string | null;
                    startTime: number;
                    endTime: number;
                    creationSource: import(".prisma/client").$Enums.CreationSource | null;
                    email: string;
                    timeZone: string;
                    username: string | null;
                    emailVerified: Date | null;
                    bio: string | null;
                    avatarUrl: string | null;
                    weekStart: string;
                    bufferTime: number;
                    hideBranding: boolean;
                    theme: string | null;
                    appTheme: string | null;
                    createdDate: Date;
                    trialEndsAt: Date | null;
                    lastActiveAt: Date | null;
                    defaultScheduleId: number | null;
                    completedOnboarding: boolean;
                    timeFormat: number | null;
                    twoFactorSecret: string | null;
                    twoFactorEnabled: boolean;
                    backupCodes: string | null;
                    identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                    identityProviderId: string | null;
                    invitedTo: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    allowDynamicBooking: boolean | null;
                    allowSEOIndexing: boolean | null;
                    receiveMonthlyDigestEmail: boolean | null;
                    verified: boolean | null;
                    disableImpersonation: boolean;
                    locked: boolean;
                    isPlatformManaged: boolean;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    referralLinkId: string | null;
                    organizationId: number | null;
                    movedToProfileId: number | null;
                  };
                  id: number;
                  end: Date;
                  start: Date;
                  uuid: string;
                  notes: string | null;
                  toUser: {
                    name: string | null;
                    email: string;
                    username: string | null;
                  } | null;
                  reason: {
                    id: number;
                    userId: number | null;
                    reason: string;
                    emoji: string;
                  } | null;
                  toUserId: number | null;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                outOfOfficeUid: string;
                userId?: number | null | undefined;
              };
              output: {};
            }>;
            addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
              };
              output: {
                data: {
                  id: number;
                  userId: number;
                  email: string;
                  emailVerified: Date | null;
                };
                message: string;
              };
            }>;
            getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                startDate: Date;
                endDate: Date | null;
                timeZone: string;
              }[];
            }>;
            outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                userId: number | null;
                enabled: boolean;
                reason: string;
                emoji: string;
              }[];
            }>;
            addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                subscription: string;
              };
              output: {
                message: string;
              };
            }>;
            removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                subscription: string;
              };
              output: {
                message: string;
              };
            }>;
            markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingUid: string;
                attendees?:
                  | {
                      email: string;
                      noShow: boolean;
                    }[]
                  | undefined;
                noShowHost?: boolean | undefined;
              };
              output: {
                attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
                noShowHost: boolean;
                message: string;
              };
            }>;
          }
        >;
        public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("next-auth").Session | null;
            }>;
            i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                locale: string;
                CalComVersion: string;
              };
              output: {
                i18n: import("next-i18next").SSRConfig;
                locale: string;
              };
            }>;
            countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                countryCode: string;
              };
            }>;
            submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                rating: number;
                bookingUid: string;
                comment?: string | undefined;
              };
              output: void;
            }>;
            markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                noShowHost: boolean;
                bookingUid: string;
              };
              output: {
                attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
                noShowHost: boolean;
                message: string;
              };
            }>;
            samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
              };
              output: {
                tenant: string;
                product: string;
              };
            }>;
            stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                stripeCustomerId?: string | undefined;
                checkoutSessionId?: string | undefined;
              };
              output:
                | {
                    valid: boolean;
                    hasPaymentFailed?: undefined;
                    isPremiumUsername?: undefined;
                    customer?: undefined;
                  }
                | {
                    valid: boolean;
                    hasPaymentFailed: boolean;
                    isPremiumUsername: boolean;
                    customer: {
                      username: string;
                      email: string;
                      stripeCustomerId: string;
                    };
                  };
            }>;
            slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    startTime: string;
                    endTime: string;
                    eventTypeId?: number | undefined;
                    eventTypeSlug?: string | undefined;
                    timeZone?: string | undefined;
                    usernameList?: string[] | undefined;
                    debug?: boolean | undefined;
                    duration?: string | undefined;
                    rescheduleUid?: string | null | undefined;
                    isTeamEvent?: boolean | undefined;
                    orgSlug?: string | null | undefined;
                    teamMemberEmail?: string | null | undefined;
                    routedTeamMemberIds?: number[] | null | undefined;
                    skipContactOwner?: boolean | null | undefined;
                    _enableTroubleshooter?: boolean | undefined;
                    _bypassCalendarBusyTimes?: boolean | undefined;
                    _shouldServeCache?: boolean | undefined;
                    routingFormResponseId?: number | undefined;
                    email?: string | null | undefined;
                  };
                  output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
                }>;
                reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    eventTypeId: number;
                    slotUtcStartDate: string;
                    slotUtcEndDate: string;
                    bookingUid?: string | undefined;
                    _isDryRun?: boolean | undefined;
                  };
                  output: {
                    uid: string;
                  };
                }>;
                isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    eventTypeId: number;
                    slots: {
                      utcStartIso: string;
                      utcEndIso: string;
                    }[];
                  };
                  output: {
                    slots: {
                      status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                      utcStartIso: string;
                      utcEndIso: string;
                    }[];
                  };
                }>;
                removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    uid: string | null;
                  };
                  output: void;
                }>;
              }
            >;
            event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                username: string;
                eventSlug: string;
                org: string | null;
                isTeamEvent?: boolean | undefined;
                fromRedirectOfNonOrgLink?: boolean | undefined;
              };
              output:
                | {
                    bookingFields: {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[] &
                      import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    subsetOfUsers: (
                      | {
                          metadata: undefined;
                          bookerUrl: string;
                          profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                          name: string | null;
                          id: number;
                          locale: string | null;
                          startTime: number;
                          endTime: number;
                          email: string;
                          timeZone: string;
                          username: string | null;
                          emailVerified: Date | null;
                          bio: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          bufferTime: number;
                          hideBranding: boolean;
                          theme: string | null;
                          createdDate: Date;
                          trialEndsAt: Date | null;
                          lastActiveAt: Date | null;
                          completedOnboarding: boolean;
                          timeFormat: number | null;
                          twoFactorSecret: string | null;
                          twoFactorEnabled: boolean;
                          backupCodes: string | null;
                          identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                          identityProviderId: string | null;
                          invitedTo: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          allowDynamicBooking: boolean | null;
                          allowSEOIndexing: boolean | null;
                          receiveMonthlyDigestEmail: boolean | null;
                          verified: boolean | null;
                          disableImpersonation: boolean;
                          locked: boolean;
                          isPlatformManaged: boolean;
                          movedToProfileId: number | null;
                          teams: {
                            id: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                          }[];
                        }
                      | {
                          metadata: undefined;
                          bookerUrl: string;
                          profile: {
                            organization: Omit<
                              {
                                name: string;
                                id: number;
                                metadata: import(".prisma/client").Prisma.JsonValue;
                                organizationSettings: {
                                  allowSEOIndexing: boolean;
                                  orgProfileRedirectsToVerifiedDomain: boolean;
                                } | null;
                                slug: string | null;
                                logoUrl: string | null;
                                bannerUrl: string | null;
                                isPlatform: boolean;
                              } & Omit<
                                Pick<
                                  {
                                    id: number;
                                    name: string;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    calVideoLogo: string | null;
                                    appLogo: string | null;
                                    appIconLogo: string | null;
                                    bio: string | null;
                                    hideBranding: boolean;
                                    isPrivate: boolean;
                                    hideBookATeamMember: boolean;
                                    createdAt: Date;
                                    metadata: import(".prisma/client").Prisma.JsonValue | null;
                                    theme: string | null;
                                    brandColor: string | null;
                                    darkBrandColor: string | null;
                                    bannerUrl: string | null;
                                    parentId: number | null;
                                    timeFormat: number | null;
                                    timeZone: string;
                                    weekStart: string;
                                    isOrganization: boolean;
                                    pendingPayment: boolean;
                                    isPlatform: boolean;
                                    createdByOAuthClientId: string | null;
                                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                    smsLockReviewedByAdmin: boolean;
                                    bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                    includeManagedEventsInLimits: boolean;
                                  },
                                  "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                                >,
                                "metadata"
                              > & {
                                  requestedSlug: string | null;
                                  metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?:
                                      | {
                                          teamSlug?: string | null | undefined;
                                          lastMigrationTime?: string | undefined;
                                          reverted?: boolean | undefined;
                                          lastRevertTime?: string | undefined;
                                        }
                                      | undefined;
                                    billingPeriod?:
                                      | import("@calcom/prisma/zod-utils").BillingPeriod
                                      | undefined;
                                  };
                                },
                              "metadata"
                            > & {
                              requestedSlug: string | null;
                              metadata: {
                                requestedSlug: string | null;
                                paymentId?: string | undefined;
                                subscriptionId?: string | null | undefined;
                                subscriptionItemId?: string | null | undefined;
                                orgSeats?: number | null | undefined;
                                orgPricePerSeat?: number | null | undefined;
                                migratedToOrgFrom?:
                                  | {
                                      teamSlug?: string | null | undefined;
                                      lastMigrationTime?: string | undefined;
                                      reverted?: boolean | undefined;
                                      lastRevertTime?: string | undefined;
                                    }
                                  | undefined;
                                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                              };
                            };
                            id: number;
                            uid: string;
                            userId: number;
                            createdAt: Date & string;
                            updatedAt: Date & string;
                            username: string;
                            organizationId: number;
                            upId: string;
                          };
                          name: string | null;
                          id: number;
                          locale: string | null;
                          startTime: number;
                          endTime: number;
                          email: string;
                          timeZone: string;
                          username: string | null;
                          emailVerified: Date | null;
                          bio: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          bufferTime: number;
                          hideBranding: boolean;
                          theme: string | null;
                          createdDate: Date;
                          trialEndsAt: Date | null;
                          lastActiveAt: Date | null;
                          completedOnboarding: boolean;
                          timeFormat: number | null;
                          twoFactorSecret: string | null;
                          twoFactorEnabled: boolean;
                          backupCodes: string | null;
                          identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                          identityProviderId: string | null;
                          invitedTo: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          allowDynamicBooking: boolean | null;
                          allowSEOIndexing: boolean | null;
                          receiveMonthlyDigestEmail: boolean | null;
                          verified: boolean | null;
                          disableImpersonation: boolean;
                          locked: boolean;
                          isPlatformManaged: boolean;
                          movedToProfileId: number | null;
                          teams: {
                            id: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                          }[];
                        }
                    )[];
                    users:
                      | (
                          | {
                              metadata: undefined;
                              bookerUrl: string;
                              profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                              name: string | null;
                              id: number;
                              locale: string | null;
                              startTime: number;
                              endTime: number;
                              email: string;
                              timeZone: string;
                              username: string | null;
                              emailVerified: Date | null;
                              bio: string | null;
                              avatarUrl: string | null;
                              weekStart: string;
                              bufferTime: number;
                              hideBranding: boolean;
                              theme: string | null;
                              createdDate: Date;
                              trialEndsAt: Date | null;
                              lastActiveAt: Date | null;
                              completedOnboarding: boolean;
                              timeFormat: number | null;
                              twoFactorSecret: string | null;
                              twoFactorEnabled: boolean;
                              backupCodes: string | null;
                              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                              identityProviderId: string | null;
                              invitedTo: number | null;
                              brandColor: string | null;
                              darkBrandColor: string | null;
                              allowDynamicBooking: boolean | null;
                              allowSEOIndexing: boolean | null;
                              receiveMonthlyDigestEmail: boolean | null;
                              verified: boolean | null;
                              disableImpersonation: boolean;
                              locked: boolean;
                              isPlatformManaged: boolean;
                              movedToProfileId: number | null;
                              teams: {
                                id: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                              }[];
                            }
                          | {
                              metadata: undefined;
                              bookerUrl: string;
                              profile: {
                                organization: Omit<
                                  {
                                    name: string;
                                    id: number;
                                    metadata: import(".prisma/client").Prisma.JsonValue;
                                    organizationSettings: {
                                      allowSEOIndexing: boolean;
                                      orgProfileRedirectsToVerifiedDomain: boolean;
                                    } | null;
                                    slug: string | null;
                                    logoUrl: string | null;
                                    bannerUrl: string | null;
                                    isPlatform: boolean;
                                  } & Omit<
                                    Pick<
                                      {
                                        id: number;
                                        name: string;
                                        slug: string | null;
                                        logoUrl: string | null;
                                        calVideoLogo: string | null;
                                        appLogo: string | null;
                                        appIconLogo: string | null;
                                        bio: string | null;
                                        hideBranding: boolean;
                                        isPrivate: boolean;
                                        hideBookATeamMember: boolean;
                                        createdAt: Date;
                                        metadata: import(".prisma/client").Prisma.JsonValue | null;
                                        theme: string | null;
                                        brandColor: string | null;
                                        darkBrandColor: string | null;
                                        bannerUrl: string | null;
                                        parentId: number | null;
                                        timeFormat: number | null;
                                        timeZone: string;
                                        weekStart: string;
                                        isOrganization: boolean;
                                        pendingPayment: boolean;
                                        isPlatform: boolean;
                                        createdByOAuthClientId: string | null;
                                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                        smsLockReviewedByAdmin: boolean;
                                        bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                        includeManagedEventsInLimits: boolean;
                                      },
                                      | "name"
                                      | "id"
                                      | "metadata"
                                      | "slug"
                                      | "logoUrl"
                                      | "bannerUrl"
                                      | "isPlatform"
                                    >,
                                    "metadata"
                                  > & {
                                      requestedSlug: string | null;
                                      metadata: {
                                        requestedSlug: string | null;
                                        paymentId?: string | undefined;
                                        subscriptionId?: string | null | undefined;
                                        subscriptionItemId?: string | null | undefined;
                                        orgSeats?: number | null | undefined;
                                        orgPricePerSeat?: number | null | undefined;
                                        migratedToOrgFrom?:
                                          | {
                                              teamSlug?: string | null | undefined;
                                              lastMigrationTime?: string | undefined;
                                              reverted?: boolean | undefined;
                                              lastRevertTime?: string | undefined;
                                            }
                                          | undefined;
                                        billingPeriod?:
                                          | import("@calcom/prisma/zod-utils").BillingPeriod
                                          | undefined;
                                      };
                                    },
                                  "metadata"
                                > & {
                                  requestedSlug: string | null;
                                  metadata: {
                                    requestedSlug: string | null;
                                    paymentId?: string | undefined;
                                    subscriptionId?: string | null | undefined;
                                    subscriptionItemId?: string | null | undefined;
                                    orgSeats?: number | null | undefined;
                                    orgPricePerSeat?: number | null | undefined;
                                    migratedToOrgFrom?:
                                      | {
                                          teamSlug?: string | null | undefined;
                                          lastMigrationTime?: string | undefined;
                                          reverted?: boolean | undefined;
                                          lastRevertTime?: string | undefined;
                                        }
                                      | undefined;
                                    billingPeriod?:
                                      | import("@calcom/prisma/zod-utils").BillingPeriod
                                      | undefined;
                                  };
                                };
                                id: number;
                                uid: string;
                                userId: number;
                                createdAt: Date & string;
                                updatedAt: Date & string;
                                username: string;
                                organizationId: number;
                                upId: string;
                              };
                              name: string | null;
                              id: number;
                              locale: string | null;
                              startTime: number;
                              endTime: number;
                              email: string;
                              timeZone: string;
                              username: string | null;
                              emailVerified: Date | null;
                              bio: string | null;
                              avatarUrl: string | null;
                              weekStart: string;
                              bufferTime: number;
                              hideBranding: boolean;
                              theme: string | null;
                              createdDate: Date;
                              trialEndsAt: Date | null;
                              lastActiveAt: Date | null;
                              completedOnboarding: boolean;
                              timeFormat: number | null;
                              twoFactorSecret: string | null;
                              twoFactorEnabled: boolean;
                              backupCodes: string | null;
                              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                              identityProviderId: string | null;
                              invitedTo: number | null;
                              brandColor: string | null;
                              darkBrandColor: string | null;
                              allowDynamicBooking: boolean | null;
                              allowSEOIndexing: boolean | null;
                              receiveMonthlyDigestEmail: boolean | null;
                              verified: boolean | null;
                              disableImpersonation: boolean;
                              locked: boolean;
                              isPlatformManaged: boolean;
                              movedToProfileId: number | null;
                              teams: {
                                id: number;
                                role: import(".prisma/client").$Enums.MembershipRole;
                                userId: number;
                                teamId: number;
                                disableImpersonation: boolean;
                                accepted: boolean;
                              }[];
                            }
                        )[]
                      | undefined;
                    locations: (Pick<
                      Partial<import("@calcom/app-store/locations").LocationObject>,
                      "link" | "address"
                    > &
                      Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    profile: {
                      image?: string | undefined;
                      name?: string | undefined;
                      username?: string | null | undefined;
                      weekStart: string;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      theme: null;
                      bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      } | null;
                    };
                    entity: {
                      considerUnpublished: boolean;
                      fromRedirectOfNonOrgLink: boolean;
                      orgSlug: string | null;
                      name: string | null;
                      teamSlug: null;
                      logoUrl: null;
                    };
                    isInstantEvent: boolean;
                    instantMeetingParameters: never[];
                    showInstantEventConnectNowModal: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    fieldTranslations: never[];
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?:
                        | {
                            alby?:
                              | {
                                  price: number;
                                  currency: string;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                }
                              | undefined;
                            basecamp3?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            campsite?: {} | undefined;
                            closecom?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            giphy?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  thankYouPage?: string | undefined;
                                }
                              | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            hitpay?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            hubspot?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            insihts?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  MATOMO_URL?: string | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            metapixel?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            "mock-payment-app"?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            nextcloudtalk?: {} | undefined;
                            office365calendar?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            office365video?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            paypal?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            "pipedrive-crm"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            plausible?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  PLAUSIBLE_URL?: string | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            posthog?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  TRACKING_ID?: string | undefined;
                                  API_HOST?: string | undefined;
                                }
                              | undefined;
                            qr_code?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "routing-forms"?: any;
                            salesforce?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  roundRobinLeadSkip?: boolean | undefined;
                                  roundRobinSkipCheckRecordOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                  skipContactCreation?: boolean | undefined;
                                  createEventOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  createNewContactUnderAccount?: boolean | undefined;
                                  createLeadIfAccountNull?: boolean | undefined;
                                  onBookingWriteToEventObject?: boolean | undefined;
                                  onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                  createEventOnLeadCheckForContact?: boolean | undefined;
                                  onBookingChangeRecordOwner?: boolean | undefined;
                                  onBookingChangeRecordOwnerName?: string | undefined;
                                  sendNoShowAttendeeData?: boolean | undefined;
                                  sendNoShowAttendeeDataField?: string | undefined;
                                  onBookingWriteToRecord?: boolean | undefined;
                                  onBookingWriteToRecordFields?:
                                    | Record<
                                        string,
                                        {
                                          value: string;
                                          fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                          whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                        }
                                      >
                                    | undefined;
                                  ignoreGuests?: boolean | undefined;
                                }
                              | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                  refundDaysCount?: number | undefined;
                                  refundCountCalendarDays?: boolean | undefined;
                                }
                              | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "event-type-app-card"?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            twipla?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            umami?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zoomvideo?: {} | undefined;
                          }
                        | undefined;
                    } | null;
                    isDynamic: boolean;
                    periodCountCalendarDays: boolean;
                    periodStartDate: null;
                    periodEndDate: null;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    periodType: "UNLIMITED";
                    periodDays: null;
                    slotInterval: null;
                    offsetStart: number;
                    customInputs: {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[];
                    disableGuests: boolean;
                    minimumBookingNotice: number;
                    schedule: null;
                    timeZone: null;
                    successRedirectUrl: string;
                    forwardParamsSuccessRedirect: boolean;
                    teamId: null;
                    scheduleId: null;
                    availability: never[];
                    price: number;
                    currency: string;
                    schedulingType: "COLLECTIVE";
                    seatsPerTimeSlot: null;
                    seatsShowAttendees: null;
                    seatsShowAvailabilityCount: null;
                    onlyShowFirstAvailableSlot: boolean;
                    allowReschedulingPastBookings: boolean;
                    id: number;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    recurringEvent: null;
                    destinationCalendar: null;
                    team: null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    bookingLimits: null;
                    durationLimits: null;
                    hidden: boolean;
                    userId: number;
                    parentId: null;
                    parent: null;
                    owner: null;
                    workflows: never[];
                    hosts: never[];
                    subsetOfHosts: never[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: null;
                    isRRWeightsEnabled: boolean;
                    rescheduleWithSameRoundRobinHost: boolean;
                    useEventTypeDestinationCalendarEmail: boolean;
                    secondaryEmailId: null;
                    secondaryEmail: null;
                    maxLeadThreshold: null;
                    useEventLevelSelectedCalendars: boolean;
                    length: number;
                    slug: string;
                    title: string;
                    eventName: string;
                    description: string;
                    descriptionAsSafeHTML: string;
                    position: number;
                  }
                | {
                    bookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                    description: string;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?:
                        | {
                            alby?:
                              | {
                                  price: number;
                                  currency: string;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                }
                              | undefined;
                            basecamp3?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            campsite?: {} | undefined;
                            closecom?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            dailyvideo?: {} | undefined;
                            fathom?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            feishucalendar?: {} | undefined;
                            ga4?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            giphy?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  thankYouPage?: string | undefined;
                                }
                              | undefined;
                            googlecalendar?: {} | undefined;
                            googlevideo?: {} | undefined;
                            gtm?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            hitpay?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            hubspot?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            insihts?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            intercom?: {} | undefined;
                            jelly?: {} | undefined;
                            jitsivideo?: {} | undefined;
                            larkcalendar?: {} | undefined;
                            make?: {} | undefined;
                            matomo?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  MATOMO_URL?: string | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            metapixel?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            "mock-payment-app"?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            nextcloudtalk?: {} | undefined;
                            office365calendar?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            office365video?:
                              | {
                                  client_id: string;
                                  client_secret: string;
                                }
                              | undefined;
                            paypal?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                }
                              | undefined;
                            "pipedrive-crm"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            plausible?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  PLAUSIBLE_URL?: string | undefined;
                                  trackingId?: string | undefined;
                                }
                              | undefined;
                            posthog?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  TRACKING_ID?: string | undefined;
                                  API_HOST?: string | undefined;
                                }
                              | undefined;
                            qr_code?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "routing-forms"?: any;
                            salesforce?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  roundRobinLeadSkip?: boolean | undefined;
                                  roundRobinSkipCheckRecordOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                  skipContactCreation?: boolean | undefined;
                                  createEventOn?:
                                    | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                    | undefined;
                                  createNewContactUnderAccount?: boolean | undefined;
                                  createLeadIfAccountNull?: boolean | undefined;
                                  onBookingWriteToEventObject?: boolean | undefined;
                                  onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                  createEventOnLeadCheckForContact?: boolean | undefined;
                                  onBookingChangeRecordOwner?: boolean | undefined;
                                  onBookingChangeRecordOwnerName?: string | undefined;
                                  sendNoShowAttendeeData?: boolean | undefined;
                                  sendNoShowAttendeeDataField?: string | undefined;
                                  onBookingWriteToRecord?: boolean | undefined;
                                  onBookingWriteToRecordFields?:
                                    | Record<
                                        string,
                                        {
                                          value: string;
                                          fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                          whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                        }
                                      >
                                    | undefined;
                                  ignoreGuests?: boolean | undefined;
                                }
                              | undefined;
                            shimmervideo?: {} | undefined;
                            stripe?:
                              | {
                                  price: number;
                                  currency: string;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                  paymentOption?: string | undefined;
                                  enabled?: boolean | undefined;
                                  refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                  refundDaysCount?: number | undefined;
                                  refundCountCalendarDays?: boolean | undefined;
                                }
                              | undefined;
                            tandemvideo?: {} | undefined;
                            "booking-pages-tag"?:
                              | {
                                  trackingId: string;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            "event-type-app-card"?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            twipla?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                }
                              | undefined;
                            umami?:
                              | {
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                  SITE_ID?: string | undefined;
                                  SCRIPT_URL?: string | undefined;
                                }
                              | undefined;
                            vital?: {} | undefined;
                            webex?: {} | undefined;
                            wordpress?:
                              | {
                                  isSunrise: boolean;
                                  credentialId?: number | undefined;
                                  enabled?: boolean | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zapier?: {} | undefined;
                            "zoho-bigin"?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zohocalendar?: {} | undefined;
                            zohocrm?:
                              | {
                                  enabled?: boolean | undefined;
                                  credentialId?: number | undefined;
                                  appCategories?: string[] | undefined;
                                }
                              | undefined;
                            zoomvideo?: {} | undefined;
                          }
                        | undefined;
                    } | null;
                    customInputs: {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[];
                    locations: (Pick<
                      Partial<import("@calcom/app-store/locations").LocationObject>,
                      "link" | "address"
                    > &
                      Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                    bookingFields: {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[] &
                      import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    profile: {
                      username: string | null | undefined;
                      name: string | null;
                      weekStart: string;
                      image: string;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      theme: string | null;
                      bookerLayouts: {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      } | null;
                    };
                    subsetOfUsers: {
                      username: string | null;
                      name: string | null;
                      weekStart: string;
                      organizationId: any;
                      avatarUrl: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                      bookerUrl: string;
                    }[];
                    users:
                      | {
                          username: string | null;
                          name: string | null;
                          weekStart: string;
                          organizationId: any;
                          avatarUrl: string | null;
                          profile: import("@calcom/types/UserProfile").UserProfile;
                          bookerUrl: string;
                        }[]
                      | undefined;
                    entity: {
                      logoUrl?: string | undefined;
                      name: any;
                      fromRedirectOfNonOrgLink: boolean;
                      considerUnpublished: boolean;
                      orgSlug: string | null;
                      teamSlug: string | null;
                    };
                    isDynamic: boolean;
                    isInstantEvent: boolean;
                    showInstantEventConnectNowModal: boolean;
                    instantMeetingParameters: string[];
                    aiPhoneCallConfig: {
                      id: number;
                      eventTypeId: number;
                      enabled: boolean;
                      templateType: string;
                      schedulerName: string | null;
                      generalPrompt: string | null;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      guestName: string | null;
                      guestEmail: string | null;
                      guestCompany: string | null;
                      beginMessage: string | null;
                      llmId: string | null;
                    } | null;
                    assignAllTeamMembers: boolean;
                    owner:
                      | ({
                          name: string | null;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          username: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          theme: string | null;
                          defaultScheduleId: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          organization: {
                            name: string;
                            id: number;
                            slug: string | null;
                            bannerUrl: string | null;
                          } | null;
                        } & {
                          nonProfileUsername: string | null;
                          profile: import("@calcom/types/UserProfile").UserProfile;
                        })
                      | null;
                    subsetOfHosts: {
                      user: {
                        name: string | null;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        username: string | null;
                        avatarUrl: string | null;
                        weekStart: string;
                        theme: string | null;
                        defaultScheduleId: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        organization: {
                          name: string;
                          id: number;
                          slug: string | null;
                          bannerUrl: string | null;
                        } | null;
                      } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                      };
                    }[];
                    hosts:
                      | {
                          user: {
                            name: string | null;
                            id: number;
                            metadata: import(".prisma/client").Prisma.JsonValue;
                            username: string | null;
                            avatarUrl: string | null;
                            weekStart: string;
                            theme: string | null;
                            defaultScheduleId: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            organization: {
                              name: string;
                              id: number;
                              slug: string | null;
                              bannerUrl: string | null;
                            } | null;
                          } & {
                            nonProfileUsername: string | null;
                            profile: import("@calcom/types/UserProfile").UserProfile;
                          };
                        }[]
                      | undefined;
                    id: number;
                    length: number;
                    title: string;
                    team: {
                      name: string;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      slug: string | null;
                      parentId: number | null;
                      parent: {
                        name: string;
                        slug: string | null;
                        logoUrl: string | null;
                        bannerUrl: string | null;
                      } | null;
                      theme: string | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      logoUrl: string | null;
                      isPrivate: boolean;
                    } | null;
                    schedule: {
                      id: number;
                      timeZone: string | null;
                    } | null;
                    slug: string;
                    hidden: boolean;
                    teamId: number | null;
                    eventName: string | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresBookerEmailVerification: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    disableGuests: boolean;
                    seatsPerTimeSlot: number | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    price: number;
                    currency: string;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    rescheduleWithSameRoundRobinHost: boolean;
                    workflows: ({
                      workflow: {
                        steps: {
                          id: number;
                          template: import(".prisma/client").$Enums.WorkflowTemplates;
                          action: import(".prisma/client").$Enums.WorkflowActions;
                          workflowId: number;
                          stepNumber: number;
                          sendTo: string | null;
                          reminderBody: string | null;
                          emailSubject: string | null;
                          numberRequired: boolean | null;
                          sender: string | null;
                          numberVerificationPending: boolean;
                          includeCalendarEvent: boolean;
                        }[];
                      } & {
                        name: string;
                        id: number;
                        time: number | null;
                        userId: number | null;
                        position: number;
                        teamId: number | null;
                        isActiveOnAll: boolean;
                        trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                        timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                      };
                    } & {
                      id: number;
                      eventTypeId: number;
                      workflowId: number;
                    })[];
                    instantMeetingSchedule: {
                      id: number;
                      timeZone: string | null;
                    } | null;
                    fieldTranslations: {
                      field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                      targetLocale: string;
                      translatedText: string;
                    }[];
                  }
                | null;
            }>;
            ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output:
                | {
                    connectionExists: null;
                  }
                | {
                    connectionExists: boolean;
                  };
            }>;
            checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                email: string;
                userSessionEmail?: string | undefined;
              };
              output: boolean;
            }>;
          }
        >;
        auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                oldPassword: string;
                newPassword: string;
              };
              output: void;
            }>;
            verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                passwordInput: string;
              };
              output: void;
            }>;
            verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
              };
              output: true;
            }>;
            sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
                username?: string | undefined;
                language?: string | undefined;
                isVerifyingEmail?: boolean | undefined;
              };
              output: {
                ok: boolean;
                skipped: boolean;
              };
            }>;
            resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input:
                | {
                    email: string;
                  }
                | undefined;
              output: {
                ok: boolean;
                skipped: boolean;
              };
            }>;
            createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: void;
            }>;
          }
        >;
        deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                licenseKey?: string | undefined;
              };
              output: void;
            }>;
          }
        >;
        bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                filters: {
                  teamIds?: number[] | undefined;
                  userIds?: number[] | undefined;
                  status?: "past" | "upcoming" | "recurring" | "cancelled" | "unconfirmed" | undefined;
                  eventTypeIds?: number[] | undefined;
                  attendeeEmail?:
                    | string
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | undefined;
                  attendeeName?:
                    | string
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | undefined;
                  afterStartDate?: string | undefined;
                  beforeEndDate?: string | undefined;
                  afterUpdatedDate?: string | undefined;
                  beforeUpdatedDate?: string | undefined;
                };
                limit?: number | null | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                bookings: {
                  eventType: {
                    recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                    eventTypeColor: {
                      lightEventTypeColor: string;
                      darkEventTypeColor: string;
                    } | null;
                    price: number;
                    currency: string;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    } | null;
                    id?: number | undefined;
                    length?: number | undefined;
                    title?: string | undefined;
                    team?:
                      | {
                          name: string;
                          id: number;
                          slug: string | null;
                        }
                      | null
                      | undefined;
                    slug?: string | undefined;
                    eventName?: string | null | undefined;
                    disableGuests?: boolean | undefined;
                    seatsShowAttendees?: boolean | null | undefined;
                    seatsShowAvailabilityCount?: boolean | null | undefined;
                    schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                    allowReschedulingPastBookings?: boolean | undefined;
                  };
                  startTime: string;
                  endTime: string;
                  payment: {
                    currency: string;
                    paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                    success: boolean;
                    amount: number;
                  }[];
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  } | null;
                  id: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  assignmentReason: {
                    id: number;
                    createdAt: Date;
                    bookingId: number;
                    reasonEnum: import(".prisma/client").$Enums.AssignmentReasonEnum;
                    reasonString: string;
                  }[];
                  references: {
                    id: number;
                    type: string;
                    uid: string;
                    credentialId: number | null;
                    delegationCredentialId: string | null;
                    domainWideDelegationCredentialId: string | null;
                    deleted: boolean | null;
                    bookingId: number | null;
                    meetingId: string | null;
                    thirdPartyRecurringEventId: string | null;
                    meetingPassword: string | null;
                    meetingUrl: string | null;
                    externalCalendarId: string | null;
                  }[];
                  attendees: {
                    name: string;
                    id: number;
                    locale: string | null;
                    email: string;
                    timeZone: string;
                    phoneNumber: string | null;
                    noShow: boolean | null;
                    bookingId: number | null;
                  }[];
                  seatsReferences: {
                    attendee: {
                      email: string;
                    };
                    referenceUid: string;
                  }[];
                  routedFromRoutingFormReponse: {
                    id: number;
                  } | null;
                  uid: string;
                  userPrimaryEmail: string | null;
                  customInputs: import(".prisma/client").Prisma.JsonValue;
                  responses: import(".prisma/client").Prisma.JsonValue;
                  location: string | null;
                  paid: boolean;
                  rescheduled: boolean | null;
                  recurringEventId: string | null;
                  isRecorded: boolean;
                }[];
                recurringInfo: {
                  recurringEventId: string | null;
                  count: number;
                  firstDate: Date | null;
                  bookings: {
                    [key: string]: Date[];
                  };
                }[];
                nextCursor: number | null;
              };
            }>;
            requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: string;
                rescheduleReason?: string | undefined;
              };
              output: void;
            }>;
            editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                credentialId: number | null;
                newLocation: string;
              };
              output: {
                message: string;
              };
            }>;
            addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                guests: string[];
                bookingId: number;
              };
              output: {
                message: string;
              };
            }>;
            confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                confirmed: boolean;
                recurringEventId?: string | undefined;
                reason?: string | undefined;
                emailsEnabled?: boolean | undefined;
                platformClientParams?:
                  | {
                      platformClientId?: string | undefined;
                      platformRescheduleUrl?: string | null | undefined;
                      platformCancelUrl?: string | null | undefined;
                      platformBookingUrl?: string | null | undefined;
                      platformBookingLocation?: string | undefined;
                    }
                  | undefined;
              };
              output: {
                message: string;
                status: "ACCEPTED" | "REJECTED";
              };
            }>;
            getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                seatReferenceUid: string;
              };
              output: number;
            }>;
            find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingUid?: string | undefined;
              };
              output: {
                booking: {
                  id: number;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  uid: string;
                  eventTypeId: number | null;
                  startTime: Date;
                  endTime: Date;
                  paid: boolean;
                } | null;
              };
            }>;
            getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingId: number;
              };
              output: {
                booking: {
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  status: import(".prisma/client").$Enums.BookingStatus;
                  description: string | null;
                  uid: string;
                  eventTypeId: number | null;
                  startTime: Date;
                  endTime: Date;
                  location: string | null;
                } | null;
              };
            }>;
          }
        >;
        eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                          schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                        }
                      | undefined;
                    forRoutingForms?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                allUsersAcrossAllEventTypes: Map<
                  number,
                  {
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  }
                >;
                eventTypeGroups: {
                  eventTypes: {
                    userIds: number[];
                    safeDescription: string | undefined;
                    metadata: {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    } | null;
                    children: {
                      users: ({
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                      } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                      })[];
                      id: number;
                      length: number;
                      title: string;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      description: string | null;
                      userId: number | null;
                      timeZone: string | null;
                      slug: string;
                      position: number;
                      locations: import(".prisma/client").Prisma.JsonValue;
                      offsetStart: number;
                      hidden: boolean;
                      profileId: number | null;
                      teamId: number | null;
                      useEventLevelSelectedCalendars: boolean;
                      eventName: string | null;
                      parentId: number | null;
                      bookingFields: import(".prisma/client").Prisma.JsonValue;
                      periodType: import(".prisma/client").$Enums.PeriodType;
                      periodStartDate: Date | null;
                      periodEndDate: Date | null;
                      periodDays: number | null;
                      periodCountCalendarDays: boolean | null;
                      lockTimeZoneToggleOnBookingPage: boolean;
                      requiresConfirmation: boolean;
                      requiresConfirmationWillBlockSlot: boolean;
                      requiresConfirmationForFreeEmail: boolean;
                      requiresBookerEmailVerification: boolean;
                      canSendCalVideoTranscriptionEmails: boolean;
                      autoTranslateDescriptionEnabled: boolean;
                      recurringEvent: import(".prisma/client").Prisma.JsonValue;
                      disableGuests: boolean;
                      hideCalendarNotes: boolean;
                      hideCalendarEventDetails: boolean;
                      minimumBookingNotice: number;
                      beforeEventBuffer: number;
                      afterEventBuffer: number;
                      seatsPerTimeSlot: number | null;
                      onlyShowFirstAvailableSlot: boolean;
                      seatsShowAttendees: boolean | null;
                      seatsShowAvailabilityCount: boolean | null;
                      schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                      scheduleId: number | null;
                      price: number;
                      currency: string;
                      slotInterval: number | null;
                      successRedirectUrl: string | null;
                      forwardParamsSuccessRedirect: boolean | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      durationLimits: import(".prisma/client").Prisma.JsonValue;
                      isInstantEvent: boolean;
                      instantMeetingExpiryTimeOffsetInSeconds: number;
                      instantMeetingScheduleId: number | null;
                      instantMeetingParameters: string[];
                      assignAllTeamMembers: boolean;
                      assignRRMembersUsingSegment: boolean;
                      rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                      useEventTypeDestinationCalendarEmail: boolean;
                      isRRWeightsEnabled: boolean;
                      maxLeadThreshold: number | null;
                      allowReschedulingPastBookings: boolean;
                      eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                      rescheduleWithSameRoundRobinHost: boolean;
                      secondaryEmailId: number | null;
                    }[];
                    id: number;
                    length: number;
                    title: string;
                    description: string | null;
                    hashedLink: {
                      link: string;
                      id: number;
                      eventTypeId: number;
                    }[];
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                    hosts: ({
                      user: {
                        name: string | null;
                        id: number;
                        username: string | null;
                        avatarUrl: string | null;
                      };
                    } & {
                      userId: number;
                      eventTypeId: number;
                      createdAt: Date;
                      scheduleId: number | null;
                      isFixed: boolean;
                      priority: number | null;
                      weight: number | null;
                      weightAdjustment: number | null;
                    })[];
                    aiPhoneCallConfig: {
                      id: number;
                      eventTypeId: number;
                      enabled: boolean;
                      templateType: string;
                      schedulerName: string | null;
                      generalPrompt: string | null;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      guestName: string | null;
                      guestEmail: string | null;
                      guestCompany: string | null;
                      beginMessage: string | null;
                      llmId: string | null;
                    } | null;
                  }[];
                  teamId?: number | null;
                  parentId?: number | null;
                  bookerUrl: string;
                  membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                  profile: {
                    slug: (string | null) | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean;
                  };
                  metadata: {
                    membershipCount: number;
                    readOnly: boolean;
                  };
                }[];
                profiles: {
                  teamId: number | null | undefined;
                  membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                  membershipCount: number;
                  readOnly: boolean;
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                }[];
              };
            }>;
            getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                          schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                        }
                      | undefined;
                    forRoutingForms?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                eventTypeGroups: {
                  teamId?: number | null;
                  parentId?: number | null;
                  bookerUrl: string;
                  membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                  profile: {
                    slug: (string | null) | null;
                    name: string | null;
                    image: string;
                    eventTypesLockedByOrg?: boolean;
                  };
                  metadata: {
                    membershipCount: number;
                    readOnly: boolean;
                  };
                }[];
                profiles: {
                  teamId: number | null | undefined;
                  membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                  membershipCount: number;
                  readOnly: boolean;
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                }[];
              };
            }>;
            getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                group: {
                  teamId?: number | null | undefined;
                  parentId?: number | null | undefined;
                };
                filters?:
                  | {
                      teamIds?: number[] | undefined;
                      upIds?: string[] | undefined;
                      schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                    }
                  | undefined;
                forRoutingForms?: boolean | undefined;
                cursor?: number | null | undefined;
                limit?: number | undefined;
                searchQuery?: string | undefined;
              };
              output: {
                eventTypes: {
                  safeDescription: string | undefined;
                  users: ({
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  })[];
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  children: {
                    users: ({
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                    id: number;
                    length: number;
                    title: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    description: string | null;
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                  }[];
                  id: number;
                  length: number;
                  title: string;
                  description: string | null;
                  hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                  }[];
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                  hosts: ({
                    user: {
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    };
                  } & {
                    userId: number;
                    eventTypeId: number;
                    createdAt: Date;
                    scheduleId: number | null;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                    weightAdjustment: number | null;
                  })[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                }[];
                nextCursor: number | null | undefined;
              };
            }>;
            getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    teamId?: number | undefined;
                    isOrg?: boolean | undefined;
                  }
                | null
                | undefined;
              output: {
                eventTypeOptions: {
                  value: string;
                  label: string;
                }[];
                teamOptions: {
                  value: string;
                  label: string;
                }[];
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                length: number;
                title: string;
                metadata: import(".prisma/client").Prisma.JsonValue;
                description: string | null;
                slug: string;
                hidden: boolean;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
              }[];
            }>;
            listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                title: string;
                team: {
                  name: string;
                  id: number;
                } | null;
                slug: string;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                length: number;
                title: string;
                slug: string;
                metadata?:
                  | {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    }
                  | null
                  | undefined;
                description?: string | null | undefined;
                locations?:
                  | {
                      type: string;
                      address?: string | undefined;
                      link?: string | undefined;
                      displayLocationPublicly?: boolean | undefined;
                      hostPhoneNumber?: string | undefined;
                      credentialId?: number | undefined;
                      teamName?: string | undefined;
                    }[]
                  | undefined;
                hidden?: boolean | undefined;
                teamId?: number | null | undefined;
                disableGuests?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | undefined;
                slotInterval?: number | null | undefined;
              };
              output: {
                eventType: {
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                };
              };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
              };
              output: {
                eventType: {
                  schedule: number | null;
                  instantMeetingSchedule: number | null;
                  scheduleName: string | null;
                  recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                  bookingLimits: Partial<
                    Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                  > | null;
                  durationLimits: Partial<
                    Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                  > | null;
                  eventTypeColor: {
                    lightEventTypeColor: string;
                    darkEventTypeColor: string;
                  } | null;
                  locations: import("@calcom/app-store/locations").LocationObject[];
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?:
                      | {
                          alby?:
                            | {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                              }
                            | undefined;
                          basecamp3?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          campsite?: {} | undefined;
                          closecom?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          dailyvideo?: {} | undefined;
                          fathom?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          feishucalendar?: {} | undefined;
                          ga4?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          giphy?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                              }
                            | undefined;
                          googlecalendar?: {} | undefined;
                          googlevideo?: {} | undefined;
                          gtm?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          hitpay?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          hubspot?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          insihts?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          intercom?: {} | undefined;
                          jelly?: {} | undefined;
                          jitsivideo?: {} | undefined;
                          larkcalendar?: {} | undefined;
                          make?: {} | undefined;
                          matomo?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          metapixel?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          "mock-payment-app"?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          nextcloudtalk?: {} | undefined;
                          office365calendar?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          office365video?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          paypal?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          "pipedrive-crm"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          plausible?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          posthog?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                              }
                            | undefined;
                          qr_code?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "routing-forms"?: any;
                          salesforce?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                roundRobinSkipCheckRecordOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                                createEventOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                createNewContactUnderAccount?: boolean | undefined;
                                createLeadIfAccountNull?: boolean | undefined;
                                onBookingWriteToEventObject?: boolean | undefined;
                                onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                createEventOnLeadCheckForContact?: boolean | undefined;
                                onBookingChangeRecordOwner?: boolean | undefined;
                                onBookingChangeRecordOwnerName?: string | undefined;
                                sendNoShowAttendeeData?: boolean | undefined;
                                sendNoShowAttendeeDataField?: string | undefined;
                                onBookingWriteToRecord?: boolean | undefined;
                                onBookingWriteToRecordFields?:
                                  | Record<
                                      string,
                                      {
                                        value: string;
                                        fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                        whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                      }
                                    >
                                  | undefined;
                                ignoreGuests?: boolean | undefined;
                              }
                            | undefined;
                          shimmervideo?: {} | undefined;
                          stripe?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                refundDaysCount?: number | undefined;
                                refundCountCalendarDays?: boolean | undefined;
                              }
                            | undefined;
                          tandemvideo?: {} | undefined;
                          "booking-pages-tag"?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "event-type-app-card"?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          twipla?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          umami?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          vital?: {} | undefined;
                          webex?: {} | undefined;
                          wordpress?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zapier?: {} | undefined;
                          "zoho-bigin"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zohocalendar?: {} | undefined;
                          zohocrm?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zoomvideo?: {} | undefined;
                        }
                      | undefined;
                  };
                  customInputs: {
                    id: number;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    label: string;
                    eventTypeId: number;
                    required: boolean;
                    placeholder: string;
                    options?:
                      | {
                          type: string;
                          label: string;
                        }[]
                      | null
                      | undefined;
                    hasToBeCreated?: boolean | undefined;
                  }[];
                  users: {
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                  }[];
                  bookerUrl: string;
                  children: {
                    owner: {
                      avatar: string;
                      email: string;
                      name: string;
                      username: string;
                      membership: import(".prisma/client").$Enums.MembershipRole;
                      id: number;
                      avatarUrl: string | null;
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                    created: boolean;
                    slug: string;
                    hidden: boolean;
                  }[];
                  id: number;
                  length: number;
                  title: string;
                  description: string | null;
                  destinationCalendar: {
                    id: number;
                    userId: number | null;
                    eventTypeId: number | null;
                    integration: string;
                    externalId: string;
                    primaryEmail: string | null;
                    credentialId: number | null;
                    delegationCredentialId: string | null;
                    domainWideDelegationCredentialId: string | null;
                  } | null;
                  team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      organizationSettings: {
                        lockEventTypeCreationForUsers: boolean;
                      } | null;
                      slug: string | null;
                    } | null;
                    members: {
                      user: {
                        name: string | null;
                        id: number;
                        locale: string | null;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        defaultScheduleId: number | null;
                        eventTypes: {
                          slug: string;
                        }[];
                      };
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                    }[];
                  } | null;
                  hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                  }[];
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  offsetStart: number;
                  hidden: boolean;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                  hosts: {
                    userId: number;
                    scheduleId: number | null;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                  }[];
                  owner: {
                    id: number;
                  } | null;
                  webhooks: {
                    id: string;
                    eventTypeId: number | null;
                    secret: string | null;
                    subscriberUrl: string;
                    payloadTemplate: string | null;
                    active: boolean;
                    eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                  }[];
                  parent: {
                    id: number;
                    teamId: number | null;
                  } | null;
                  workflows: ({
                    workflow: {
                      name: string;
                      id: number;
                      time: number | null;
                      team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } | null;
                      userId: number | null;
                      teamId: number | null;
                      steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        stepNumber: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                      }[];
                      trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                      timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                      activeOn: {
                        eventType: {
                          id: number;
                          title: string;
                          parentId: number | null;
                          _count: {
                            children: number;
                          };
                        };
                      }[];
                    };
                  } & {
                    id: number;
                    eventTypeId: number;
                    workflowId: number;
                  })[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                  fieldTranslations: {
                    field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                    targetLocale: string;
                    translatedText: string;
                  }[];
                } & {
                  users: ({
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                  } & {
                    avatar: string;
                  })[];
                  periodStartDate: string | null;
                  periodEndDate: string | null;
                  bookingFields: {
                    name: string;
                    type:
                      | "number"
                      | "boolean"
                      | "phone"
                      | "name"
                      | "address"
                      | "select"
                      | "textarea"
                      | "text"
                      | "checkbox"
                      | "radio"
                      | "email"
                      | "url"
                      | "multiselect"
                      | "multiemail"
                      | "radioInput";
                    label?: string | undefined;
                    options?:
                      | {
                          label: string;
                          value: string;
                        }[]
                      | undefined;
                    required?: boolean | undefined;
                    placeholder?: string | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?:
                      | Record<
                          string,
                          {
                            type: "phone" | "address" | "text";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                          }
                        >
                      | undefined;
                    minLength?: number | undefined;
                    excludeEmails?: string | undefined;
                    requireEmails?: string | undefined;
                    variant?: string | undefined;
                    variantsConfig?:
                      | {
                          variants: Record<
                            string,
                            {
                              fields: {
                                name: string;
                                type:
                                  | "number"
                                  | "boolean"
                                  | "phone"
                                  | "name"
                                  | "address"
                                  | "select"
                                  | "textarea"
                                  | "text"
                                  | "checkbox"
                                  | "radio"
                                  | "email"
                                  | "url"
                                  | "multiselect"
                                  | "multiemail"
                                  | "radioInput";
                                label?: string | undefined;
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                minLength?: number | undefined;
                                excludeEmails?: string | undefined;
                                requireEmails?: string | undefined;
                              }[];
                            }
                          >;
                        }
                      | undefined;
                    views?:
                      | {
                          id: string;
                          label: string;
                          description?: string | undefined;
                        }[]
                      | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?:
                      | "user"
                      | "system"
                      | "system-but-optional"
                      | "system-but-hidden"
                      | "user-readonly"
                      | undefined;
                    sources?:
                      | {
                          id: string;
                          type: string;
                          label: string;
                          editUrl?: string | undefined;
                          fieldRequired?: boolean | undefined;
                        }[]
                      | undefined;
                    disableOnPrefill?: boolean | undefined;
                  }[] &
                    import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                };
                locationOptions: {
                  label: string;
                  options: {
                    label: string;
                    value: string;
                    disabled?: boolean;
                    icon?: string;
                    slug?: string;
                    credentialId?: number;
                  }[];
                }[];
                destinationCalendar: {
                  id: number;
                  userId: number | null;
                  eventTypeId: number | null;
                  integration: string;
                  externalId: string;
                  primaryEmail: string | null;
                  credentialId: number | null;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                } | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  parentId: number | null;
                  parent: {
                    organizationSettings: {
                      lockEventTypeCreationForUsers: boolean;
                    } | null;
                    slug: string | null;
                  } | null;
                  members: {
                    user: {
                      name: string | null;
                      id: number;
                      locale: string | null;
                      email: string;
                      username: string | null;
                      avatarUrl: string | null;
                      defaultScheduleId: number | null;
                      eventTypes: {
                        slug: string;
                      }[];
                    };
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                  }[];
                } | null;
                teamMembers: {
                  profileId: number | null;
                  eventTypes: string[];
                  membership: import(".prisma/client").$Enums.MembershipRole;
                  name: string | null;
                  id: number;
                  locale: string | null;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  defaultScheduleId: number | null;
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                  avatar: string;
                }[];
                currentUserMembership: {
                  user: {
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                    eventTypes: {
                      slug: string;
                    }[];
                  };
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                } | null;
                isUserOrganizationAdmin: boolean;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: (number[] & (string | number)[]) | undefined;
                children?:
                  | {
                      hidden: boolean;
                      owner: {
                        name: string;
                        id: number;
                        email: string;
                        eventTypeSlugs: string[];
                      };
                    }[]
                  | undefined;
                length?: number | undefined;
                title?: string | undefined;
                metadata?:
                  | {
                      config?:
                        | {
                            useHostSchedulesForTeamEvent?: boolean | undefined;
                          }
                        | undefined;
                      smartContractAddress?: string | undefined;
                      blockchainId?: number | undefined;
                      multipleDuration?: number[] | undefined;
                      giphyThankYouPage?: string | undefined;
                      additionalNotesRequired?: boolean | undefined;
                      disableSuccessPage?: boolean | undefined;
                      disableStandardEmails?:
                        | {
                            all?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                            confirmation?:
                              | {
                                  host?: boolean | undefined;
                                  attendee?: boolean | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      managedEventConfig?:
                        | {
                            unlockedFields?:
                              | {
                                  users?: true | undefined;
                                  children?: true | undefined;
                                  length?: true | undefined;
                                  title?: true | undefined;
                                  metadata?: true | undefined;
                                  description?: true | undefined;
                                  destinationCalendar?: true | undefined;
                                  profile?: true | undefined;
                                  team?: true | undefined;
                                  schedule?: true | undefined;
                                  availability?: true | undefined;
                                  hashedLink?: true | undefined;
                                  secondaryEmail?: true | undefined;
                                  userId?: true | undefined;
                                  customInputs?: true | undefined;
                                  timeZone?: true | undefined;
                                  slug?: true | undefined;
                                  position?: true | undefined;
                                  locations?: true | undefined;
                                  offsetStart?: true | undefined;
                                  hidden?: true | undefined;
                                  profileId?: true | undefined;
                                  teamId?: true | undefined;
                                  useEventLevelSelectedCalendars?: true | undefined;
                                  eventName?: true | undefined;
                                  parentId?: true | undefined;
                                  bookingFields?: true | undefined;
                                  periodType?: true | undefined;
                                  periodStartDate?: true | undefined;
                                  periodEndDate?: true | undefined;
                                  periodDays?: true | undefined;
                                  periodCountCalendarDays?: true | undefined;
                                  lockTimeZoneToggleOnBookingPage?: true | undefined;
                                  requiresConfirmation?: true | undefined;
                                  requiresConfirmationWillBlockSlot?: true | undefined;
                                  requiresConfirmationForFreeEmail?: true | undefined;
                                  requiresBookerEmailVerification?: true | undefined;
                                  canSendCalVideoTranscriptionEmails?: true | undefined;
                                  autoTranslateDescriptionEnabled?: true | undefined;
                                  recurringEvent?: true | undefined;
                                  disableGuests?: true | undefined;
                                  hideCalendarNotes?: true | undefined;
                                  hideCalendarEventDetails?: true | undefined;
                                  minimumBookingNotice?: true | undefined;
                                  beforeEventBuffer?: true | undefined;
                                  afterEventBuffer?: true | undefined;
                                  seatsPerTimeSlot?: true | undefined;
                                  onlyShowFirstAvailableSlot?: true | undefined;
                                  seatsShowAttendees?: true | undefined;
                                  seatsShowAvailabilityCount?: true | undefined;
                                  schedulingType?: true | undefined;
                                  scheduleId?: true | undefined;
                                  price?: true | undefined;
                                  currency?: true | undefined;
                                  slotInterval?: true | undefined;
                                  successRedirectUrl?: true | undefined;
                                  forwardParamsSuccessRedirect?: true | undefined;
                                  bookingLimits?: true | undefined;
                                  durationLimits?: true | undefined;
                                  isInstantEvent?: true | undefined;
                                  instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                  instantMeetingScheduleId?: true | undefined;
                                  instantMeetingParameters?: true | undefined;
                                  assignAllTeamMembers?: true | undefined;
                                  assignRRMembersUsingSegment?: true | undefined;
                                  rrSegmentQueryValue?: true | undefined;
                                  useEventTypeDestinationCalendarEmail?: true | undefined;
                                  isRRWeightsEnabled?: true | undefined;
                                  maxLeadThreshold?: true | undefined;
                                  allowReschedulingPastBookings?: true | undefined;
                                  eventTypeColor?: true | undefined;
                                  rescheduleWithSameRoundRobinHost?: true | undefined;
                                  secondaryEmailId?: true | undefined;
                                  hosts?: true | undefined;
                                  owner?: true | undefined;
                                  bookings?: true | undefined;
                                  webhooks?: true | undefined;
                                  parent?: true | undefined;
                                  workflows?: true | undefined;
                                  instantMeetingSchedule?: true | undefined;
                                  aiPhoneCallConfig?: true | undefined;
                                  fieldTranslations?: true | undefined;
                                  selectedCalendars?: true | undefined;
                                  _count?: true | undefined;
                                }
                              | undefined;
                          }
                        | undefined;
                      requiresConfirmationThreshold?:
                        | {
                            time: number;
                            unit:
                              | "milliseconds"
                              | "seconds"
                              | "minutes"
                              | "hours"
                              | "days"
                              | "months"
                              | "years"
                              | "dates";
                          }
                        | undefined;
                      bookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      apps?: unknown;
                    }
                  | null
                  | undefined;
                description?: string | null | undefined;
                destinationCalendar?:
                  | {
                      integration: string;
                      externalId: string;
                    }
                  | null
                  | undefined;
                schedule?: number | null | undefined;
                userId?: number | null | undefined;
                customInputs?:
                  | {
                      id: number;
                      type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                      label: string;
                      eventTypeId: number;
                      required: boolean;
                      placeholder: string;
                      options?:
                        | {
                            type: string;
                            label: string;
                          }[]
                        | null
                        | undefined;
                      hasToBeCreated?: boolean | undefined;
                    }[]
                  | undefined;
                timeZone?: string | null | undefined;
                slug?: string | undefined;
                position?: number | undefined;
                locations?:
                  | {
                      type: string;
                      address?: string | undefined;
                      link?: string | undefined;
                      displayLocationPublicly?: boolean | undefined;
                      hostPhoneNumber?: string | undefined;
                      credentialId?: number | undefined;
                      teamName?: string | undefined;
                    }[]
                  | undefined;
                offsetStart?: number | undefined;
                hidden?: boolean | undefined;
                profileId?: number | null | undefined;
                teamId?: number | null | undefined;
                useEventLevelSelectedCalendars?: boolean | undefined;
                eventName?: string | null | undefined;
                parentId?: number | null | undefined;
                bookingFields?:
                  | {
                      name: string;
                      type:
                        | "number"
                        | "boolean"
                        | "phone"
                        | "name"
                        | "address"
                        | "select"
                        | "textarea"
                        | "text"
                        | "checkbox"
                        | "radio"
                        | "email"
                        | "url"
                        | "multiselect"
                        | "multiemail"
                        | "radioInput";
                      label?: string | undefined;
                      options?:
                        | {
                            label: string;
                            value: string;
                          }[]
                        | undefined;
                      required?: boolean | undefined;
                      placeholder?: string | undefined;
                      maxLength?: number | undefined;
                      defaultLabel?: string | undefined;
                      defaultPlaceholder?: string | undefined;
                      labelAsSafeHtml?: string | undefined;
                      getOptionsAt?: string | undefined;
                      optionsInputs?:
                        | Record<
                            string,
                            {
                              type: "phone" | "address" | "text";
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                            }
                          >
                        | undefined;
                      minLength?: number | undefined;
                      excludeEmails?: string | undefined;
                      requireEmails?: string | undefined;
                      variant?: string | undefined;
                      variantsConfig?:
                        | {
                            variants: Record<
                              string,
                              {
                                fields: {
                                  name: string;
                                  type:
                                    | "number"
                                    | "boolean"
                                    | "phone"
                                    | "name"
                                    | "address"
                                    | "select"
                                    | "textarea"
                                    | "text"
                                    | "checkbox"
                                    | "radio"
                                    | "email"
                                    | "url"
                                    | "multiselect"
                                    | "multiemail"
                                    | "radioInput";
                                  label?: string | undefined;
                                  required?: boolean | undefined;
                                  placeholder?: string | undefined;
                                  maxLength?: number | undefined;
                                  labelAsSafeHtml?: string | undefined;
                                  minLength?: number | undefined;
                                  excludeEmails?: string | undefined;
                                  requireEmails?: string | undefined;
                                }[];
                              }
                            >;
                          }
                        | undefined;
                      views?:
                        | {
                            id: string;
                            label: string;
                            description?: string | undefined;
                          }[]
                        | undefined;
                      hideWhenJustOneOption?: boolean | undefined;
                      hidden?: boolean | undefined;
                      editable?:
                        | "user"
                        | "system"
                        | "system-but-optional"
                        | "system-but-hidden"
                        | "user-readonly"
                        | undefined;
                      sources?:
                        | {
                            id: string;
                            type: string;
                            label: string;
                            editUrl?: string | undefined;
                            fieldRequired?: boolean | undefined;
                          }[]
                        | undefined;
                      disableOnPrefill?: boolean | undefined;
                    }[]
                  | undefined;
                periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
                periodStartDate?: Date | null | undefined;
                periodEndDate?: Date | null | undefined;
                periodDays?: number | null | undefined;
                periodCountCalendarDays?: boolean | null | undefined;
                lockTimeZoneToggleOnBookingPage?: boolean | undefined;
                requiresConfirmation?: boolean | undefined;
                requiresConfirmationWillBlockSlot?: boolean | undefined;
                requiresConfirmationForFreeEmail?: boolean | undefined;
                requiresBookerEmailVerification?: boolean | undefined;
                canSendCalVideoTranscriptionEmails?: boolean | undefined;
                autoTranslateDescriptionEnabled?: boolean | undefined;
                recurringEvent?:
                  | {
                      count: number;
                      interval: number;
                      freq: import("@calcom/prisma/zod-utils").Frequency;
                      dtstart?: Date | undefined;
                      until?: Date | undefined;
                      tzid?: string | undefined;
                    }
                  | null
                  | undefined;
                disableGuests?: boolean | undefined;
                hideCalendarNotes?: boolean | undefined;
                hideCalendarEventDetails?: boolean | undefined;
                minimumBookingNotice?: number | undefined;
                beforeEventBuffer?: number | undefined;
                afterEventBuffer?: number | undefined;
                seatsPerTimeSlot?: number | null | undefined;
                onlyShowFirstAvailableSlot?: boolean | undefined;
                seatsShowAttendees?: boolean | null | undefined;
                seatsShowAvailabilityCount?: boolean | null | undefined;
                schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
                scheduleId?: number | null | undefined;
                price?: number | undefined;
                currency?: string | undefined;
                slotInterval?: number | null | undefined;
                successRedirectUrl?: string | null | undefined;
                forwardParamsSuccessRedirect?: boolean | null | undefined;
                bookingLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                durationLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                isInstantEvent?: boolean | undefined;
                instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
                instantMeetingScheduleId?: number | null | undefined;
                instantMeetingParameters?: string[] | undefined;
                assignAllTeamMembers?: boolean | undefined;
                assignRRMembersUsingSegment?: boolean | undefined;
                rrSegmentQueryValue?:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | null
                  | undefined;
                useEventTypeDestinationCalendarEmail?: boolean | undefined;
                isRRWeightsEnabled?: boolean | undefined;
                maxLeadThreshold?: number | null | undefined;
                allowReschedulingPastBookings?: boolean | undefined;
                eventTypeColor?:
                  | {
                      lightEventTypeColor: string;
                      darkEventTypeColor: string;
                    }
                  | null
                  | undefined;
                rescheduleWithSameRoundRobinHost?: boolean | undefined;
                secondaryEmailId?: number | null | undefined;
                hosts?:
                  | {
                      userId: number;
                      profileId?: number | null | undefined;
                      isFixed?: boolean | undefined;
                      priority?: number | null | undefined;
                      weight?: number | null | undefined;
                      scheduleId?: number | null | undefined;
                    }[]
                  | undefined;
                instantMeetingSchedule?: number | null | undefined;
                calAiPhoneScript?: string | undefined;
                multiplePrivateLinks?: string[] | undefined;
                aiPhoneCallConfig?:
                  | {
                      enabled: boolean;
                      templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                      generalPrompt: string;
                      yourPhoneNumber: string;
                      numberToCall: string;
                      beginMessage: string | null;
                      guestName?: string | null | undefined;
                      guestEmail?: string | null | undefined;
                      guestCompany?: string | null | undefined;
                    }
                  | undefined;
              };
              output: {
                eventType: {
                  children: {
                    userId: number | null;
                  }[];
                  title: string;
                  description: string | null;
                  team: {
                    name: string;
                    id: number;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      slug: string | null;
                    } | null;
                    members: {
                      user: {
                        name: string | null;
                        id: number;
                        email: string;
                        eventTypes: {
                          slug: string;
                        }[];
                      };
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                    }[];
                  } | null;
                  isRRWeightsEnabled: boolean;
                  hosts: {
                    userId: number;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                  }[];
                  workflows: {
                    workflowId: number;
                  }[];
                  aiPhoneCallConfig: {
                    enabled: boolean;
                    generalPrompt: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                  fieldTranslations: {
                    field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                  }[];
                };
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
              };
              output: {
                id: number;
              };
            }>;
            duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                eventTypeId?: number | undefined;
                users?: number[] | undefined;
                length: number;
                title: string;
                description: string;
                slug: string;
                teamId?: number | null | undefined;
              };
              output: {
                eventType: {
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                };
              };
            }>;
            bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                eventTypes: {
                  logo: string | undefined;
                  id: number;
                  title: string;
                  locations: import(".prisma/client").Prisma.JsonValue;
                }[];
              };
            }>;
            bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
          }
        >;
        availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                schedules: {
                  isDefault: boolean;
                  name: string;
                  id: number;
                  availability: {
                    id: number;
                    date: Date | null;
                    userId: number | null;
                    eventTypeId: number | null;
                    startTime: Date;
                    endTime: Date;
                    scheduleId: number | null;
                    days: number[];
                  }[];
                  timeZone: string | null;
                }[];
              };
            }>;
            user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                username: string;
                dateFrom: string;
                dateTo: string;
                eventTypeId?: string | number | undefined;
                withSource?: boolean | undefined;
              };
              output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats:
                  | {
                      uid: string;
                      startTime: Date;
                      _count: {
                        attendees: number;
                      };
                    }[]
                  | null;
                datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
              };
            }>;
            listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                limit: number;
                loggedInUsersTz: string;
                cursor?: number | null | undefined;
                teamId?: number | undefined;
                searchString?: string | undefined;
              };
              output: {
                rows: (
                  | {
                      id: number;
                      organizationId: number | null;
                      name: string | null;
                      username: string | null;
                      email: string;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      defaultScheduleId: number;
                      dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                      avatarUrl?: undefined;
                      profile?: undefined;
                    }
                  | {
                      id: number;
                      username: string | null;
                      email: string;
                      avatarUrl: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                      organizationId: number | null;
                      name: string | null;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      defaultScheduleId: number;
                      dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    }
                )[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                  isApartOfAnyTeam: boolean;
                };
              };
            }>;
            schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    scheduleId?: number | undefined;
                    isManagedEventType?: boolean | undefined;
                  };
                  output: {
                    id: number;
                    name: string;
                    isManaged: boolean;
                    workingHours: import("@calcom/types/schedule").WorkingHours[];
                    schedule: {
                      id: number;
                      date: Date | null;
                      userId: number | null;
                      eventTypeId: number | null;
                      startTime: Date;
                      endTime: Date;
                      scheduleId: number | null;
                      days: number[];
                    }[];
                    availability: {
                      end: Date;
                      userId?: number | null;
                      start: Date;
                    }[][];
                    timeZone: string;
                    dateOverrides: {
                      ranges: import("@calcom/types/schedule").TimeRange[];
                    }[];
                    isDefault: boolean;
                    isLastSchedule: boolean;
                    readOnly: boolean;
                  };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    schedule?:
                      | {
                          end: Date;
                          start: Date;
                        }[][]
                      | undefined;
                    eventTypeId?: number | undefined;
                  };
                  output: {
                    schedule: {
                      name: string;
                      id: number;
                      userId: number;
                      timeZone: string | null;
                    };
                  };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                  };
                  output: void;
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                    timeZone?: string | undefined;
                    name?: string | undefined;
                    isDefault?: boolean | undefined;
                    schedule?:
                      | {
                          end: Date;
                          start: Date;
                        }[][]
                      | undefined;
                    dateOverrides?:
                      | {
                          end: Date;
                          start: Date;
                        }[]
                      | undefined;
                  };
                  output:
                    | {
                        schedule: {
                          name: string;
                          id: number;
                          userId: number;
                        };
                        isDefault: boolean;
                        availability?: undefined;
                        timeZone?: undefined;
                        prevDefaultId?: undefined;
                        currentDefaultId?: undefined;
                      }
                    | {
                        schedule: {
                          name: string;
                          id: number;
                          eventType: {
                            id: number;
                            eventName: string | null;
                          }[];
                          availability: {
                            id: number;
                            date: Date | null;
                            userId: number | null;
                            eventTypeId: number | null;
                            startTime: Date;
                            endTime: Date;
                            scheduleId: number | null;
                            days: number[];
                          }[];
                          userId: number;
                          timeZone: string | null;
                        };
                        availability: import("@calcom/types/schedule").Schedule;
                        timeZone: string;
                        isDefault: boolean;
                        prevDefaultId: number | null;
                        currentDefaultId: number | null;
                      };
                }>;
                duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    scheduleId: number;
                  };
                  output: {
                    schedule: {
                      name: string;
                      id: number;
                      userId: number;
                      timeZone: string | null;
                    };
                  };
                }>;
                getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    userId?: number | undefined;
                  };
                  output:
                    | {
                        hasDefaultSchedule: boolean;
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                          id: number;
                          date: Date | null;
                          userId: number | null;
                          eventTypeId: number | null;
                          startTime: Date;
                          endTime: Date;
                          scheduleId: number | null;
                          days: number[];
                        }[];
                        availability: {
                          end: Date;
                          userId?: number | null;
                          start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                          ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                      }
                    | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                        hasDefaultSchedule: boolean;
                      };
                }>;
                getAllSchedulesByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    userId: number;
                  };
                  output: {
                    schedules: {
                      isDefault: boolean;
                      readOnly: boolean;
                      name: string;
                      id: number;
                      userId: number;
                    }[];
                  };
                }>;
                getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: {
                    eventSlug: string;
                  };
                  output:
                    | {
                        id: number;
                        name: string;
                        isManaged: boolean;
                        workingHours: import("@calcom/types/schedule").WorkingHours[];
                        schedule: {
                          id: number;
                          date: Date | null;
                          userId: number | null;
                          eventTypeId: number | null;
                          startTime: Date;
                          endTime: Date;
                          scheduleId: number | null;
                          days: number[];
                        }[];
                        availability: {
                          end: Date;
                          userId?: number | null;
                          start: Date;
                        }[][];
                        timeZone: string;
                        dateOverrides: {
                          ranges: import("@calcom/types/schedule").TimeRange[];
                        }[];
                        isDefault: boolean;
                        isLastSchedule: boolean;
                        readOnly: boolean;
                      }
                    | {
                        id: number;
                        name: string;
                        availability: never[][];
                        dateOverrides: never[];
                        timeZone: string;
                        workingHours: never[];
                        isDefault: boolean;
                      };
                }>;
                bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    eventTypeIds: number[];
                    selectedDefaultScheduleId?: number | null | undefined;
                  };
                  output: import("@prisma/client/runtime/library").GetBatchResult;
                }>;
              }
            >;
            calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                dateFrom: string | null;
                dateTo: string | null;
                loggedInUsersTz: string;
                calendarsToLoad: {
                  externalId: string;
                  credentialId: number;
                }[];
              };
              output: import("@calcom/types/Calendar").EventBusyDate[];
            }>;
          }
        >;
        teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                isOrg?: boolean | undefined;
              };
              output: {
                membership: {
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                };
                inviteToken:
                  | {
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                metadata: {
                  requestedSlug?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                };
                bookingLimits: Partial<
                  Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                > | null;
                logo?: string | undefined;
                name: string;
                id: number;
                children: {
                  name: string;
                  slug: string | null;
                }[];
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  slug: string | null;
                  logoUrl: string | null;
                  isPrivate: boolean;
                  isOrganization: boolean;
                } | null;
                bio: string | null;
                hideBranding: boolean;
                theme: string | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                logoUrl: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                includeManagedEventsInLimits: boolean;
                isOrganization: boolean;
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    includeOrgs?: boolean | undefined;
                  }
                | undefined;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken:
                  | {
                      id: number;
                      createdAt: Date;
                      updatedAt: Date;
                      teamId: number | null;
                      secondaryEmailId: number | null;
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              }[];
            }>;
            listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                inviteToken:
                  | {
                      id: number;
                      createdAt: Date;
                      updatedAt: Date;
                      teamId: number | null;
                      secondaryEmailId: number | null;
                      identifier: string;
                      token: string;
                      expires: Date;
                      expiresInDays: number | null;
                    }
                  | undefined;
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                } | null;
                logoUrl: string | null;
                isOrganization: boolean;
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                slug: string;
                logo?: string | null | undefined;
              };
              output:
                | {
                    url: string;
                    message: string;
                    team: null;
                  }
                | {
                    url: string;
                    message: string;
                    team: {
                      name: string;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      createdAt: Date;
                      timeZone: string;
                      slug: string | null;
                      parentId: number | null;
                      bookingLimits: import(".prisma/client").Prisma.JsonValue;
                      bio: string | null;
                      weekStart: string;
                      hideBranding: boolean;
                      theme: string | null;
                      timeFormat: number | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      smsLockState: import(".prisma/client").$Enums.SMSLockState;
                      smsLockReviewedByAdmin: boolean;
                      logoUrl: string | null;
                      calVideoLogo: string | null;
                      appLogo: string | null;
                      appIconLogo: string | null;
                      isPrivate: boolean;
                      hideBookATeamMember: boolean;
                      bannerUrl: string | null;
                      isOrganization: boolean;
                      pendingPayment: boolean;
                      isPlatform: boolean;
                      createdByOAuthClientId: string | null;
                      includeManagedEventsInLimits: boolean;
                    };
                  };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                bio?: string | undefined;
                name?: string | undefined;
                logo?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                isPrivate?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                bookingLimits?:
                  | {
                      PER_DAY?: number | undefined;
                      PER_WEEK?: number | undefined;
                      PER_MONTH?: number | undefined;
                      PER_YEAR?: number | undefined;
                    }
                  | null
                  | undefined;
                includeManagedEventsInLimits?: boolean | undefined;
              };
              output:
                | {
                    logoUrl: string | null;
                    name: string;
                    bio: string | null;
                    slug: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    bookingLimits: import("@calcom/types/Calendar").IntervalLimit;
                    includeManagedEventsInLimits: boolean;
                  }
                | undefined;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            }>;
            removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                memberIds: number[];
                isOrg?: boolean | undefined;
              };
              output: void;
            }>;
            inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                teamId: number;
                language: string;
                usernameOrEmail: (
                  | string
                  | (
                      | string
                      | {
                          role: "ADMIN" | "MEMBER" | "OWNER";
                          email: string;
                        }
                    )[]
                ) &
                  (
                    | string
                    | (
                        | string
                        | {
                            role: "ADMIN" | "MEMBER" | "OWNER";
                            email: string;
                          }
                      )[]
                    | undefined
                  );
                role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
                isPlatform?: boolean | undefined;
              };
              output: {
                usernameOrEmail: string | string[];
                numUsersInvited: number;
              };
            }>;
            acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                accept: boolean;
              };
              output: void;
            }>;
            changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "ADMIN" | "MEMBER" | "OWNER";
                teamId: number;
                memberId: number;
              };
              output: void;
            }>;
            getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                dateFrom: string;
                dateTo: string;
                memberId: number;
                timezone: string;
              };
              output: {
                busy: import("@calcom/types/Calendar").EventBusyDetails[];
                timeZone: string;
                dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
                workingHours: import("@calcom/types/schedule").WorkingHours[];
                dateOverrides: import("@calcom/types/schedule").TimeRange[];
                currentSeats:
                  | {
                      uid: string;
                      startTime: Date;
                      _count: {
                        attendees: number;
                      };
                    }[]
                  | null;
                datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
              };
            }>;
            getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                memberId: number;
              };
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              } | null;
            }>;
            updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                disableImpersonation: boolean;
                memberId: number;
              };
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              };
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output:
                | {
                    url: string;
                    status: "REQUIRES_PAYMENT" | "REQUIRES_UPGRADE" | "SUCCESS";
                    message?: undefined;
                  }
                | {
                    url: string;
                    status?: undefined;
                    message?: undefined;
                  }
                | {
                    url: string;
                    message: string;
                    status?: undefined;
                  };
            }>;
            getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                team: {
                  children: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  }[];
                } & {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                limit?: number | undefined;
                searchTerm?: string | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                members: {
                  username: string | null;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                  organizationId: number | null;
                  organization: any;
                  accepted: boolean;
                  disableImpersonation: boolean;
                  bookerUrl: string;
                  teamId: number;
                  lastActiveAt: string | null;
                  name: string | null;
                  id: number;
                  email: string;
                  bio: string | null;
                  avatarUrl: string | null;
                  nonProfileUsername: string | null;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            listSimpleMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
              }[];
            }>;
            legacyListMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                cursor?: number | null | undefined;
                limit?: number | null | undefined;
                teamIds?: number[] | undefined;
                searchText?: string | undefined;
              };
              output: {
                members: ({
                  accepted: boolean;
                  membershipId: number;
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                } & {
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
                nextCursor: number | undefined;
              };
            }>;
            getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                userIds: number[];
              };
              output: Record<
                number,
                {
                  name: string | null;
                  logo: string | null;
                  externalId: string | null;
                  app: {
                    slug: string;
                    categories: import("@calcom/prisma/enums").AppCategories[];
                  } | null;
                }[]
              >;
            }>;
            hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                hasTeamPlan: boolean;
              };
            }>;
            listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              }[];
            }>;
            createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                token?: string | undefined;
              };
              output: {
                token: string;
                inviteLink: string;
              };
            }>;
            setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
                expiresInDays?: number | undefined;
              };
              output: void;
            }>;
            deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                token: string;
              };
              output: void;
            }>;
            inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                token: string;
              };
              output: string;
            }>;
            hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                memberId: number;
              };
              output: boolean;
            }>;
            resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                email: string;
                teamId: number;
                language: string;
                isOrg?: boolean | undefined;
              };
              output: {
                email: string;
                teamId: number;
                language: string;
                isOrg: boolean;
              };
            }>;
            roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                bookingId: number;
              };
              output: {
                bookingId: number;
                reassignedTo: {
                  id: number;
                  name: string | null;
                  email: string;
                };
              };
            }>;
            roundRobinManualReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
                teamMemberId: number;
                reassignReason?: string | undefined;
              };
              output: {
                success: boolean;
              };
            }>;
            getRoundRobinHostsToReassign: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                bookingId: number;
                exclude: "fixedHosts";
                cursor?: number | undefined;
                limit?: number | undefined;
                searchTerm?: string | undefined;
              };
              output: {
                items: {
                  id: number;
                  name: string | null;
                  email: string;
                  status: string;
                }[];
                nextCursor: number | null;
                totalCount: number;
              };
            }>;
            checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                value: string;
                teamId: number;
              };
              output: boolean;
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            getInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: number;
                cancellationReason: string | null;
              }[];
            }>;
            updateInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
                presets: {
                  name: string;
                  id: number;
                  cancellationReason?: string | undefined;
                }[];
              };
              output: {
                name: string;
                id: number;
                createdAt: Date;
                cancellationReason: string | null;
                teamId: number;
              }[];
            }>;
            hasActiveTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: boolean;
            }>;
          }
        >;
        timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                CalComVersion: string;
              };
              output: {
                city: string;
                timezone: string;
                pop: number;
              }[];
            }>;
          }
        >;
        organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                slug: string;
                orgOwnerEmail: string;
                language?: string | undefined;
                seats?: number | undefined;
                pricePerSeat?: number | undefined;
                isPlatform?: boolean | undefined;
                billingPeriod?:
                  | import("../server/routers/viewer/organizations/create.schema").BillingPeriod
                  | undefined;
              };
              output: {
                userId: number;
                email: string;
                organizationId: number;
                upId: string;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name?: string | undefined;
                orgId?: string | number | undefined;
                bio?: string | undefined;
                logoUrl?: string | null | undefined;
                calVideoLogo?: string | null | undefined;
                banner?: string | null | undefined;
                slug?: string | undefined;
                hideBranding?: boolean | undefined;
                hideBookATeamMember?: boolean | undefined;
                brandColor?: string | undefined;
                darkBrandColor?: string | undefined;
                theme?: string | null | undefined;
                timeZone?: string | undefined;
                weekStart?: string | undefined;
                timeFormat?: number | undefined;
                metadata?:
                  | {
                      requestedSlug?: string | null | undefined;
                      paymentId?: string | undefined;
                      subscriptionId?: string | null | undefined;
                      subscriptionItemId?: string | null | undefined;
                      orgSeats?: number | null | undefined;
                      orgPricePerSeat?: number | null | undefined;
                      migratedToOrgFrom?:
                        | {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                          }
                        | undefined;
                      billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    }
                  | undefined;
                lockEventTypeCreation?: boolean | undefined;
                lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
                adminGetsNoSlotsNotification?: boolean | undefined;
                allowSEOIndexing?: boolean | undefined;
                orgProfileRedirectsToVerifiedDomain?: boolean | undefined;
              };
              output: {
                update: boolean;
                userId: number;
                data: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              };
            }>;
            verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
              };
              output: true;
            }>;
            createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                creationSource: "API_V1" | "API_V2" | "WEBAPP";
                orgId: number;
                teamNames: string[];
                moveTeams: {
                  id: number;
                  newSlug: string | null;
                  shouldMove: boolean;
                }[];
              };
              output: {
                duplicatedSlugs: string[];
              };
            }>;
            listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                features: {
                  delegationCredential: boolean;
                };
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
                canAdminImpersonate: boolean;
                organizationSettings: {
                  lockEventTypeCreationForUsers: boolean | undefined;
                  adminGetsNoSlotsNotification: boolean | undefined;
                  allowSEOIndexing: boolean | undefined;
                  orgProfileRedirectsToVerifiedDomain: boolean | undefined;
                  orgAutoAcceptEmail: string | undefined;
                };
                user: {
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                };
              };
            }>;
            checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                team: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
            }>;
            publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                url: string;
                message: string;
              };
            }>;
            setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                newPassword: string;
              };
              output: {
                update: boolean;
              };
            }>;
            getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamIdToExclude?: number | undefined;
                accepted?: boolean | undefined;
                distinctUser?: boolean | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  completedOnboarding: boolean;
                };
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              }[];
            }>;
            listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | undefined;
                expand?: "attributes"[] | undefined;
                filters?:
                  | {
                      id: string;
                      value:
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                            data: string | number;
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                            data: (string | number)[];
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                            data: {
                              operator:
                                | "endsWith"
                                | "startsWith"
                                | "equals"
                                | "notEquals"
                                | "contains"
                                | "notContains"
                                | "isEmpty"
                                | "isNotEmpty";
                              operand: string;
                            };
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                            data: {
                              operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                              operand: number;
                            };
                          }
                        | {
                            type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                            data: {
                              startDate: string | null;
                              endDate: string | null;
                              preset: string;
                            };
                          };
                    }[]
                  | undefined;
                oAuthClientId?: string | undefined;
              };
              output:
                | {
                    canUserGetMembers: boolean;
                    rows: never[];
                    meta: {
                      totalRowCount: number;
                    };
                    nextCursor?: undefined;
                  }
                | {
                    rows: {
                      id: number;
                      username: string | null;
                      email: string;
                      timeZone: string;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      accepted: boolean;
                      disableImpersonation: boolean;
                      completedOnboarding: boolean;
                      lastActiveAt: string | null;
                      avatarUrl: string | null;
                      teams: (
                        | {
                            id: number;
                            name: string;
                            slug: string | null;
                          }
                        | undefined
                      )[];
                      attributes:
                        | {
                            weight: number;
                            id: string;
                            contains: string[];
                            value: string;
                            slug: string;
                            attributeId: string;
                            isGroup: boolean;
                          }[]
                        | undefined;
                    }[];
                    nextCursor: number | undefined;
                    meta: {
                      totalRowCount: number;
                    };
                    canUserGetMembers?: undefined;
                  };
            }>;
            getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                slug: string;
                fullDomain: string;
                domainSuffix: string;
                name: string;
                logoUrl: string | null;
                isPlatform: boolean;
              } | null;
            }>;
            getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId?: number | undefined;
              };
              output: {
                username: string | null;
                teams: {
                  accepted: boolean;
                  name: string;
                  id: number;
                }[];
                role: import(".prisma/client").$Enums.MembershipRole;
                name: string | null;
                id: number;
                email: string;
                timeZone: string;
                bio: string | null;
                avatarUrl: string | null;
                schedules: {
                  name: string;
                  id: number;
                }[];
                profiles: {
                  username: string;
                }[];
              };
            }>;
            updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "ADMIN" | "MEMBER" | "OWNER";
                userId: number;
                timeZone: string;
                username?: string | undefined;
                bio?: string | undefined;
                name?: string | undefined;
                email?: string | undefined;
                avatar?: string | undefined;
                attributeOptions?:
                  | {
                      userId: number;
                      attributes: {
                        id: string;
                        options?:
                          | {
                              value: string;
                              label?: string | undefined;
                              weight?: number | undefined;
                            }[]
                          | undefined;
                        value?: string | undefined;
                      }[];
                    }
                  | undefined;
              };
              output: {
                success: boolean;
              };
            }>;
            getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
              }[];
            }>;
            addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                userIds: number[];
              };
              output: {
                success: boolean;
                invitedTotalUsers: number;
              };
            }>;
            addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamIds: number[];
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userIds: number[];
                eventTypeIds: number[];
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userIds: number[];
              };
              output: {
                success: boolean;
                usersDeleted: number;
              };
            }>;
            listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                limit: number;
                query?: string | undefined;
                offset?: number | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                rows: {
                  bookerUrl: string;
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  };
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  disableImpersonation: boolean;
                  accepted: boolean;
                }[];
                nextCursor: number | null | undefined;
              };
            }>;
            getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                safeBio: string;
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                slug: string | null;
                parent: {
                  id: number;
                  slug: string | null;
                } | null;
                bio: string | null;
                logoUrl: string | null;
                isPrivate: boolean;
              };
            }>;
            listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              }[];
            }>;
            deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number;
              };
              output: void;
            }>;
            adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                organizationSettings: {
                  id: number;
                  allowSEOIndexing: boolean;
                  organizationId: number;
                  isOrganizationConfigured: boolean;
                  isOrganizationVerified: boolean;
                  orgAutoAcceptEmail: string;
                  lockEventTypeCreationForUsers: boolean;
                  adminGetsNoSlotsNotification: boolean;
                  isAdminReviewed: boolean;
                  isAdminAPIEnabled: boolean;
                  orgProfileRedirectsToVerifiedDomain: boolean;
                } | null;
                slug: string | null;
                members: {
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  };
                }[];
              }[];
            }>;
            adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
              };
              output: {
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                name: string;
                id: number;
                organizationSettings: {
                  isOrganizationConfigured: boolean;
                  isOrganizationVerified: boolean;
                  orgAutoAcceptEmail: string;
                } | null;
                slug: string | null;
                isOrganization: boolean;
                members: {
                  user: {
                    name: string | null;
                    id: number;
                    email: string;
                  };
                }[];
              };
            }>;
            adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
                name?: string | undefined;
                slug?: string | null | undefined;
                organizationSettings?:
                  | {
                      isOrganizationVerified?: boolean | undefined;
                      isOrganizationConfigured?: boolean | undefined;
                      isAdminReviewed?: boolean | undefined;
                      orgAutoAcceptEmail?: string | undefined;
                      isAdminAPIEnabled?: boolean | undefined;
                    }
                  | undefined;
              };
              output: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            }>;
            adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                orgId: number;
              };
              output: {
                ok: boolean;
                message: string;
              };
            }>;
            adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                orgId: number;
              };
              output: {
                ok: boolean;
                message: string;
              };
            }>;
            createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: number | undefined;
                eventTypeId: number;
                users?: number[] | undefined;
                templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                yourPhoneNumber: string;
                numberToCall: string;
                calApiKey: string;
                enabled?: boolean | undefined;
                schedulerName?: string | null | undefined;
                guestName?: string | undefined;
                guestEmail?: string | undefined;
                guestCompany?: string | undefined;
                beginMessage?: string | undefined;
                generalPrompt?: string | undefined;
              };
              output: {
                callId: string;
                agentId: string | undefined;
              };
            }>;
            getFacetedValues: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                teams: {
                  name: string;
                  id: number;
                }[];
                attributes: {
                  name: string;
                  id: string;
                  options: {
                    value: string;
                  }[];
                }[];
                roles: ("ADMIN" | "MEMBER" | "OWNER")[];
              };
            }>;
          }
        >;
        delegationCredential: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: (
                | (Omit<
                    {
                      serviceAccountClientId: string | null;
                      id: string;
                      workspacePlatform: {
                        name: string;
                        id: number;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                      serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
              )[];
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                domain: string;
                workspacePlatformSlug: string;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      workspacePlatform: {
                        name: string;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
                | undefined;
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                domain: string;
                serviceAccountKey: {
                  client_id: string;
                  private_key: string;
                  client_email?: string | undefined;
                  tenant_id?: string | undefined;
                } & {
                  [k: string]: unknown;
                };
                workspacePlatformSlug: string;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                      workspacePlatformId: number;
                      serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null
                | undefined;
            }>;
            toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                enabled: boolean;
              };
              output:
                | (Omit<
                    {
                      id: string;
                      workspacePlatform: {
                        name: string;
                        slug: string;
                      };
                      createdAt: Date;
                      updatedAt: Date;
                      organizationId: number;
                      enabled: boolean;
                      domain: string;
                    },
                    "serviceAccountKey"
                  > & {
                    serviceAccountKey: undefined;
                  })
                | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: {
                id: string;
              };
            }>;
            listWorkspacePlatforms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string;
                id: number;
                description: string;
                slug: string;
                enabled: boolean;
              }[];
            }>;
          }
        >;
        webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                    appId?: string | undefined;
                    eventTriggers?:
                      | (
                          | "BOOKING_CREATED"
                          | "BOOKING_PAYMENT_INITIATED"
                          | "BOOKING_PAID"
                          | "BOOKING_RESCHEDULED"
                          | "BOOKING_REQUESTED"
                          | "BOOKING_CANCELLED"
                          | "BOOKING_REJECTED"
                          | "BOOKING_NO_SHOW_UPDATED"
                          | "FORM_SUBMITTED"
                          | "MEETING_ENDED"
                          | "MEETING_STARTED"
                          | "RECORDING_READY"
                          | "INSTANT_MEETING"
                          | "RECORDING_TRANSCRIPTION_GENERATED"
                          | "OOO_CREATED"
                          | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                          | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                          | "FORM_SUBMITTED_NO_EVENT"
                        )[]
                      | undefined;
                  }
                | undefined;
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              }[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                webhookId?: string | undefined;
              };
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                teamId: number | null;
                secret: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              };
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: (
                  | "BOOKING_CREATED"
                  | "BOOKING_PAYMENT_INITIATED"
                  | "BOOKING_PAID"
                  | "BOOKING_RESCHEDULED"
                  | "BOOKING_REQUESTED"
                  | "BOOKING_CANCELLED"
                  | "BOOKING_REJECTED"
                  | "BOOKING_NO_SHOW_UPDATED"
                  | "FORM_SUBMITTED"
                  | "MEETING_ENDED"
                  | "MEETING_STARTED"
                  | "RECORDING_READY"
                  | "INSTANT_MEETING"
                  | "RECORDING_TRANSCRIPTION_GENERATED"
                  | "OOO_CREATED"
                  | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                  | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                  | "FORM_SUBMITTED_NO_EVENT"
                )[];
                appId?: string | null | undefined;
                secret?: string | null | undefined;
                platform?: boolean | undefined;
                time?: number | null | undefined;
                timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
              };
              output: {
                id: string;
                userId: number | null;
                teamId: number | null;
                eventTypeId: number | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                createdAt: Date;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                appId: string | null;
                secret: string | null;
                platform: boolean;
                time: number | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                payloadTemplate: string | null;
                subscriberUrl?: string | undefined;
                eventTriggers?:
                  | (
                      | "BOOKING_CREATED"
                      | "BOOKING_PAYMENT_INITIATED"
                      | "BOOKING_PAID"
                      | "BOOKING_RESCHEDULED"
                      | "BOOKING_REQUESTED"
                      | "BOOKING_CANCELLED"
                      | "BOOKING_REJECTED"
                      | "BOOKING_NO_SHOW_UPDATED"
                      | "FORM_SUBMITTED"
                      | "MEETING_ENDED"
                      | "MEETING_STARTED"
                      | "RECORDING_READY"
                      | "INSTANT_MEETING"
                      | "RECORDING_TRANSCRIPTION_GENERATED"
                      | "OOO_CREATED"
                      | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                      | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                      | "FORM_SUBMITTED_NO_EVENT"
                    )[]
                  | undefined;
                active?: boolean | undefined;
                appId?: string | null | undefined;
                secret?: string | null | undefined;
                time?: number | null | undefined;
                timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
              };
              output: {
                id: string;
                time: number | null;
                userId: number | null;
                eventTypeId: number | null;
                createdAt: Date;
                teamId: number | null;
                secret: string | null;
                appId: string | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                platformOAuthClientId: string | null;
                subscriberUrl: string;
                payloadTemplate: string | null;
                active: boolean;
                eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                platform: boolean;
              } | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
              };
              output: {
                id: string;
              };
            }>;
            testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id?: string | undefined;
                eventTypeId?: number | undefined;
                teamId?: number | undefined;
                type: string;
                url: string;
                secret?: string | undefined;
                payloadTemplate?: string | null | undefined;
              };
              output: {
                message?: string | undefined;
                ok: boolean;
                status: number;
              };
            }>;
            getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    id?: string | undefined;
                    eventTypeId?: number | undefined;
                    teamId?: number | undefined;
                  }
                | undefined;
              output: {
                webhookGroups: {
                  teamId?: number | null;
                  profile: {
                    slug: string | null;
                    name: string | null;
                    image?: string;
                  };
                  metadata?: {
                    readOnly: boolean;
                  };
                  webhooks: import(".prisma/client").Webhook[];
                }[];
                profiles: {
                  readOnly?: boolean | undefined;
                  slug: string | null;
                  name: string | null;
                  image?: string;
                  teamId: number | null | undefined;
                }[];
              };
            }>;
          }
        >;
        apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              }[];
            }>;
            findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                appId?: string | undefined;
                teamId?: number | undefined;
              };
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                note?: string | null | undefined;
                expiresAt?: Date | null | undefined;
                neverExpires?: boolean | undefined;
                appId?: string | null | undefined;
                teamId?: number | undefined;
              };
              output: string;
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                note?: string | null | undefined;
                expiresAt?: Date | undefined;
              };
              output: {
                id: string;
                note: string | null;
                userId: number;
                createdAt: Date;
                teamId: number | null;
                appId: string | null;
                expiresAt: Date | null;
                lastUsedAt: Date | null;
                hashedKey: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
                eventTypeId?: number | undefined;
              };
              output: {
                id: string;
              };
            }>;
          }
        >;
        slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startTime: string;
                endTime: string;
                eventTypeId?: number | undefined;
                eventTypeSlug?: string | undefined;
                timeZone?: string | undefined;
                usernameList?: string[] | undefined;
                debug?: boolean | undefined;
                duration?: string | undefined;
                rescheduleUid?: string | null | undefined;
                isTeamEvent?: boolean | undefined;
                orgSlug?: string | null | undefined;
                teamMemberEmail?: string | null | undefined;
                routedTeamMemberIds?: number[] | null | undefined;
                skipContactOwner?: boolean | null | undefined;
                _enableTroubleshooter?: boolean | undefined;
                _bypassCalendarBusyTimes?: boolean | undefined;
                _shouldServeCache?: boolean | undefined;
                routingFormResponseId?: number | undefined;
                email?: string | null | undefined;
              };
              output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
            }>;
            reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeId: number;
                slotUtcStartDate: string;
                slotUtcEndDate: string;
                bookingUid?: string | undefined;
                _isDryRun?: boolean | undefined;
              };
              output: {
                uid: string;
              };
            }>;
            isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                eventTypeId: number;
                slots: {
                  utcStartIso: string;
                  utcEndIso: string;
                }[];
              };
              output: {
                slots: {
                  status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                  utcStartIso: string;
                  utcEndIso: string;
                }[];
              };
            }>;
            removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                uid: string | null;
              };
              output: void;
            }>;
          }
        >;
        workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    teamId?: number | undefined;
                    userId?: number | undefined;
                  }
                | undefined;
              output: {
                workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
              };
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: number;
              };
              output: {
                name: string;
                id: number;
                time: number | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  isOrganization: boolean;
                  members: {
                    id: number;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    userId: number;
                    teamId: number;
                    disableImpersonation: boolean;
                    accepted: boolean;
                  }[];
                } | null;
                userId: number | null;
                teamId: number | null;
                steps: {
                  id: number;
                  template: import(".prisma/client").$Enums.WorkflowTemplates;
                  action: import(".prisma/client").$Enums.WorkflowActions;
                  workflowId: number;
                  stepNumber: number;
                  sendTo: string | null;
                  reminderBody: string | null;
                  emailSubject: string | null;
                  numberRequired: boolean | null;
                  sender: string | null;
                  numberVerificationPending: boolean;
                  includeCalendarEvent: boolean;
                }[];
                isActiveOnAll: boolean;
                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                activeOn: {
                  eventType: {
                    id: number;
                    length: number;
                    title: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    description: string | null;
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                  };
                }[];
                activeOnTeams: {
                  team: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                }[];
              } | null;
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                workflow: {
                  id: number;
                  position: number;
                  name: string;
                  userId: number | null;
                  teamId: number | null;
                  isActiveOnAll: boolean;
                  trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                  time: number | null;
                  timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                };
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: number;
              };
              output: {
                id: number;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                id: number;
                time: number | null;
                steps: {
                  id: number;
                  template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                  action:
                    | "EMAIL_HOST"
                    | "EMAIL_ATTENDEE"
                    | "SMS_ATTENDEE"
                    | "SMS_NUMBER"
                    | "EMAIL_ADDRESS"
                    | "WHATSAPP_ATTENDEE"
                    | "WHATSAPP_NUMBER";
                  workflowId: number;
                  stepNumber: number;
                  sendTo: string | null;
                  reminderBody: string | null;
                  emailSubject: string | null;
                  numberRequired: boolean | null;
                  sender: string | null;
                  includeCalendarEvent: boolean;
                  senderName: string | null;
                }[];
                trigger:
                  | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                  | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                  | "BEFORE_EVENT"
                  | "EVENT_CANCELLED"
                  | "NEW_EVENT"
                  | "AFTER_EVENT"
                  | "RESCHEDULE_EVENT";
                timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
                activeOn: number[];
                isActiveOnAll?: boolean | undefined;
              };
              output: {
                workflow:
                  | ({
                      team: {
                        name: string;
                        id: number;
                        slug: string | null;
                        isOrganization: boolean;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } | null;
                      steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        stepNumber: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                      }[];
                      activeOn: {
                        eventType: {
                          id: number;
                          length: number;
                          title: string;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          description: string | null;
                          userId: number | null;
                          timeZone: string | null;
                          slug: string;
                          position: number;
                          locations: import(".prisma/client").Prisma.JsonValue;
                          offsetStart: number;
                          hidden: boolean;
                          profileId: number | null;
                          teamId: number | null;
                          useEventLevelSelectedCalendars: boolean;
                          eventName: string | null;
                          parentId: number | null;
                          bookingFields: import(".prisma/client").Prisma.JsonValue;
                          periodType: import(".prisma/client").$Enums.PeriodType;
                          periodStartDate: Date | null;
                          periodEndDate: Date | null;
                          periodDays: number | null;
                          periodCountCalendarDays: boolean | null;
                          lockTimeZoneToggleOnBookingPage: boolean;
                          requiresConfirmation: boolean;
                          requiresConfirmationWillBlockSlot: boolean;
                          requiresConfirmationForFreeEmail: boolean;
                          requiresBookerEmailVerification: boolean;
                          canSendCalVideoTranscriptionEmails: boolean;
                          autoTranslateDescriptionEnabled: boolean;
                          recurringEvent: import(".prisma/client").Prisma.JsonValue;
                          disableGuests: boolean;
                          hideCalendarNotes: boolean;
                          hideCalendarEventDetails: boolean;
                          minimumBookingNotice: number;
                          beforeEventBuffer: number;
                          afterEventBuffer: number;
                          seatsPerTimeSlot: number | null;
                          onlyShowFirstAvailableSlot: boolean;
                          seatsShowAttendees: boolean | null;
                          seatsShowAvailabilityCount: boolean | null;
                          schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                          scheduleId: number | null;
                          price: number;
                          currency: string;
                          slotInterval: number | null;
                          successRedirectUrl: string | null;
                          forwardParamsSuccessRedirect: boolean | null;
                          bookingLimits: import(".prisma/client").Prisma.JsonValue;
                          durationLimits: import(".prisma/client").Prisma.JsonValue;
                          isInstantEvent: boolean;
                          instantMeetingExpiryTimeOffsetInSeconds: number;
                          instantMeetingScheduleId: number | null;
                          instantMeetingParameters: string[];
                          assignAllTeamMembers: boolean;
                          assignRRMembersUsingSegment: boolean;
                          rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                          useEventTypeDestinationCalendarEmail: boolean;
                          isRRWeightsEnabled: boolean;
                          maxLeadThreshold: number | null;
                          allowReschedulingPastBookings: boolean;
                          eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                          rescheduleWithSameRoundRobinHost: boolean;
                          secondaryEmailId: number | null;
                        };
                      }[];
                      activeOnTeams: {
                        team: {
                          name: string;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          createdAt: Date;
                          timeZone: string;
                          slug: string | null;
                          parentId: number | null;
                          bookingLimits: import(".prisma/client").Prisma.JsonValue;
                          bio: string | null;
                          weekStart: string;
                          hideBranding: boolean;
                          theme: string | null;
                          timeFormat: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          smsLockState: import(".prisma/client").$Enums.SMSLockState;
                          smsLockReviewedByAdmin: boolean;
                          logoUrl: string | null;
                          calVideoLogo: string | null;
                          appLogo: string | null;
                          appIconLogo: string | null;
                          isPrivate: boolean;
                          hideBookATeamMember: boolean;
                          bannerUrl: string | null;
                          isOrganization: boolean;
                          pendingPayment: boolean;
                          isPlatform: boolean;
                          createdByOAuthClientId: string | null;
                          includeManagedEventsInLimits: boolean;
                        };
                      }[];
                    } & {
                      name: string;
                      id: number;
                      time: number | null;
                      userId: number | null;
                      position: number;
                      teamId: number | null;
                      isActiveOnAll: boolean;
                      trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                      timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    })
                  | null;
              };
            }>;
            activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                eventTypeId: number;
                workflowId: number;
              };
              output: void;
            }>;
            sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                phoneNumber: string;
              };
              output: void;
            }>;
            verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                phoneNumber: string;
                teamId?: number | undefined;
              };
              output: boolean;
            }>;
            getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: {
                id: number;
                userId: number | null;
                phoneNumber: string;
                teamId: number | null;
              }[];
            }>;
            getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | undefined;
              };
              output: string[];
            }>;
            verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                code: string;
                email: string;
                teamId?: number | undefined;
              };
              output: true;
            }>;
            getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                label: string;
                value:
                  | "EMAIL_HOST"
                  | "EMAIL_ATTENDEE"
                  | "SMS_ATTENDEE"
                  | "SMS_NUMBER"
                  | "EMAIL_ADDRESS"
                  | "WHATSAPP_ATTENDEE"
                  | "WHATSAPP_NUMBER";
                needsTeamsUpgrade: boolean;
              }[];
            }>;
            filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          userIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              output:
                | {
                    filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                    totalCount: number;
                  }
                | undefined;
            }>;
            getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                eventType: {
                  id: number;
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  teamId?: number | null | undefined;
                  parent?:
                    | {
                        id: number | null;
                        teamId: number | null;
                      }
                    | null
                    | undefined;
                  userId?: number | null | undefined;
                };
              };
              output: import("@calcom/ee/workflows/lib/types").Workflow[];
            }>;
          }
        >;
        saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number | null;
              };
              output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
                encodedRawMetadata: string;
              };
              output: import("@boxyhq/saml-jackson").SAMLSSORecord;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
              };
              output: void;
            }>;
            updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                teamId: number | null;
                clientId: string;
                clientSecret: string;
                wellKnownUrl: string;
              };
              output: import("@boxyhq/saml-jackson").OIDCSSORecord;
            }>;
          }
        >;
        dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                organizationId: number | null;
                provider: string;
              };
              output: import("@boxyhq/saml-jackson").Directory;
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                organizationId: number | null;
              };
              output: import("@boxyhq/saml-jackson").Directory | null;
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                organizationId: number | null;
                directoryId: string;
              };
              output: null;
            }>;
            teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: void;
                  output: {
                    teamGroupMapping: {
                      id: number;
                      name: string;
                      slug: string | null;
                      directoryId: string;
                      groupNames: string[];
                    }[];
                  };
                }>;
                create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    teamId: number;
                    directoryId: string;
                  };
                  output: {
                    newGroupName: string;
                  };
                }>;
                delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    teamId: number;
                    groupName: string;
                  };
                  output: {
                    deletedGroupName: string;
                  };
                }>;
              }
            >;
          }
        >;
        insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                empty: boolean;
                created: {
                  count: number;
                  deltaPrevious: number;
                };
                completed: {
                  count: number;
                  deltaPrevious: number;
                };
                rescheduled: {
                  count: number;
                  deltaPrevious: number;
                };
                cancelled: {
                  count: number;
                  deltaPrevious: number;
                };
                rating: {
                  count: number;
                  deltaPrevious: number;
                };
                no_show: {
                  count: number;
                  deltaPrevious: number;
                };
                no_show_guest: {
                  count: number;
                  deltaPrevious: number;
                };
                csat: {
                  count: number;
                  deltaPrevious: number;
                };
                previousRange: {
                  startDate: string;
                  endDate: string;
                };
              };
            }>;
            eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                timeView: "day" | "month" | "year" | "week";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
              };
              output: {
                Month: string;
                Created: number;
                Completed: number;
                Rescheduled: number;
                Cancelled: number;
                "No-Show (Host)": number;
                "No-Show (Guest)": number;
              }[];
            }>;
            popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: (
                | {
                    eventTypeId?: undefined;
                    eventTypeName?: undefined;
                    count?: undefined;
                  }
                | {
                    eventTypeId: number | null;
                    eventTypeName: string;
                    count: number;
                  }
              )[];
            }>;
            averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                Date: string;
                Average: number;
              }[];
            }>;
            membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
            }>;
            userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean | null;
                teamId?: number | undefined;
              };
              output: {
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
              }[];
            }>;
            eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                isAll?: boolean | undefined;
              };
              output: {
                id: number;
                title: string;
                team: {
                  name: string;
                } | null;
                slug: string;
                teamId: number | null;
              }[];
            }>;
            recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                rating: number | null;
                feedback: string | null;
              }[];
            }>;
            membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                count: number;
              }[];
            }>;
            membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
              }[];
            }>;
            membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                userId: number | null;
                user: Omit<
                  {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                  },
                  "avatarUrl"
                > & {
                  avatarUrl: string;
                };
                emailMd5: string;
                averageRating: number | null;
              }[];
            }>;
            rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                teamId?: number | null | undefined;
                userId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                eventTypeId?: number | null | undefined;
              };
              output: {
                data: string;
                filename: string;
              };
            }>;
            getRoutingFormsForFilters: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
              };
              output: {
                name: string;
                id: string;
                _count: {
                  responses: number;
                };
              }[];
            }>;
            routingFormsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                total: number;
                totalWithoutBooking: number;
                totalWithBooking: number;
              };
            }>;
            routingFormResponses: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                total: number;
                data: (Omit<
                  {
                    id: number;
                    createdAt: Date;
                    bookingUid: string | null;
                    formId: string;
                    response: import(".prisma/client").Prisma.JsonValue;
                    formName: string;
                    bookingStatus: import(".prisma/client").$Enums.BookingStatus | null;
                    bookingStatusOrder: number | null;
                    bookingCreatedAt: Date | null;
                    bookingAttendees: import(".prisma/client").Prisma.JsonValue;
                    bookingUserId: number | null;
                    bookingUserName: string | null;
                    bookingUserEmail: string | null;
                    bookingUserAvatarUrl: string | null;
                    bookingAssignmentReason: string | null;
                    bookingStartTime: Date | null;
                    bookingEndTime: Date | null;
                  },
                  "response" | "bookingAttendees" | "responseLowercase"
                > & {
                  response: Record<string, import("@calcom/features/insights/lib/types").ResponseValue>;
                  responseLowercase: Record<
                    string,
                    import("@calcom/features/insights/lib/types").ResponseValue
                  >;
                  bookingAttendees?: {
                    name: string;
                    email: string;
                    timeZone: string;
                  }[];
                })[];
                nextCursor: number | undefined;
              };
            }>;
            routingFormResponsesForDownload: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                isAll: boolean;
                columnFilters: {
                  id: string;
                  value:
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                        data: string | number;
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                        data: (string | number)[];
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                        data: {
                          operator:
                            | "endsWith"
                            | "startsWith"
                            | "equals"
                            | "notEquals"
                            | "contains"
                            | "notContains"
                            | "isEmpty"
                            | "isNotEmpty";
                          operand: string;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                        data: {
                          operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                          operand: number;
                        };
                      }
                    | {
                        type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                        data: {
                          startDate: string | null;
                          endDate: string | null;
                          preset: string;
                        };
                      };
                }[];
                teamId?: number | undefined;
                userId?: number | undefined;
                memberUserIds?: number[] | undefined;
                routingFormId?: string | undefined;
                cursor?: number | undefined;
                limit?: number | undefined;
                sorting?:
                  | {
                      id: string;
                      desc: boolean;
                    }[]
                  | undefined;
              };
              output: {
                data: {
                  "Response ID": number;
                  "Form Name": string;
                  "Submitted At": string;
                  "Has Booking": boolean;
                  "Booking Status": string;
                  "Booking Created At": string;
                  "Booking Start Time": string;
                  "Booking End Time": string;
                  "Attendee Name": any;
                  "Attendee Email": any;
                  "Attendee Timezone": any;
                  "Assignment Reason": string;
                  "Routed To Name": string;
                  "Routed To Email": string;
                }[];
                nextCursor: number | undefined;
              };
            }>;
            getRoutingFormFieldOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output:
                | (
                    | {
                        id: string;
                        type: string;
                        label: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                      }
                    | {
                        id: string;
                        type: string;
                        label: string;
                        routerId: string;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                        deleted?: boolean | undefined;
                        required?: boolean | undefined;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                      }
                  )[]
                | undefined;
            }>;
            failedBookingsByField: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output: Record<
                string,
                Record<
                  string,
                  {
                    optionId: string;
                    count: number;
                    optionLabel: string;
                  }[]
                >
              >;
            }>;
            routingFormResponsesHeaders: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                isAll: boolean;
                userId?: number | undefined;
                teamId?: number | undefined;
                routingFormId?: string | undefined;
              };
              output: {
                id: string;
                label: string;
                type: string;
                options:
                  | {
                      id: string | null;
                      label: string;
                    }[]
                  | undefined;
              }[];
            }>;
            routedToPerPeriod: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                period: "perDay" | "perWeek" | "perMonth";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                cursor?:
                  | {
                      userCursor?: number | undefined;
                      periodCursor?: string | undefined;
                    }
                  | undefined;
                routingFormId?: string | undefined;
                limit?: number | undefined;
                searchQuery?: string | undefined;
              };
              output: {
                users: {
                  data: {
                    performance: "above_average" | "at_average" | "below_average" | "median";
                    totalBookings: number;
                    id: number;
                    name: string | null;
                    email: string;
                    avatarUrl: string | null;
                  }[];
                  nextCursor: number | undefined;
                };
                periodStats: {
                  data: {
                    userId: number;
                    period_start: Date;
                    total: number;
                  }[];
                  nextCursor: string | undefined;
                };
              };
            }>;
            routedToPerPeriodCsv: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startDate: string;
                endDate: string;
                period: "perDay" | "perWeek" | "perMonth";
                userId?: number | null | undefined;
                eventTypeId?: number | null | undefined;
                teamId?: number | null | undefined;
                memberUserId?: number | null | undefined;
                isAll?: boolean | undefined;
                searchQuery?: string | undefined;
                routingFormId?: string | undefined;
              };
              output: {
                data: string;
                filename: string;
              };
            }>;
            getUserRelevantTeamRoutingForms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: (Omit<
                {
                  id: string;
                  description: string | null;
                  position: number;
                  routes: {
                    [key: string]: any;
                  } | null;
                  createdAt: Date;
                  updatedAt: Date;
                  name: string;
                  fields: {
                    [key: string]: any;
                  } | null;
                  userId: number;
                  teamId: number | null;
                  disabled: boolean;
                  settings: {
                    [key: string]: any;
                  } | null;
                  updatedById: number | null;
                },
                "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
              > & {
                routes: import("@calcom/routing-forms/types/types").Routes;
                fields: import("@calcom/routing-forms/types/types").Fields;
                settings: import("zod").TypeOf<typeof import("@calcom/prisma/zod-utils").RoutingFormSettings>;
                createdAt: string;
                updatedAt: string;
                connectedForms: {
                  name: string;
                  description: string | null;
                  id: string;
                }[];
                routers: {
                  name: string;
                  description: string | null;
                  id: string;
                }[];
                teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
              })[];
            }>;
          }
        >;
        payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                bookingId: number;
              };
              output: {
                id: number;
                uid: string;
                appId: string | null;
                bookingId: number;
                amount: number;
                fee: number;
                currency: string;
                success: boolean;
                refunded: boolean;
                data: import(".prisma/client").Prisma.JsonValue;
                externalId: string;
                paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
              };
            }>;
          }
        >;
        appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input:
                | {
                    filters?:
                      | {
                          teamIds?: number[] | undefined;
                          userIds?: number[] | undefined;
                          upIds?: string[] | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              output: {
                filtered: (
                  | {
                      hasError: boolean;
                      form: Omit<
                        {
                          team: {
                            name: string;
                            id: number;
                          } | null;
                          _count: {
                            responses: number;
                          };
                        } & {
                          settings: import(".prisma/client").Prisma.JsonValue;
                          name: string;
                          id: string;
                          description: string | null;
                          userId: number;
                          createdAt: Date;
                          updatedAt: Date;
                          position: number;
                          teamId: number | null;
                          fields: import(".prisma/client").Prisma.JsonValue;
                          routes: import(".prisma/client").Prisma.JsonValue;
                          disabled: boolean;
                          updatedById: number | null;
                        },
                        "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
                      > & {
                        routes: import("@calcom/routing-forms/types/types").Routes;
                        fields: import("@calcom/routing-forms/types/types").Fields;
                        settings: import("zod").TypeOf<
                          typeof import("@calcom/prisma/zod-utils").RoutingFormSettings
                        >;
                        createdAt: string;
                        updatedAt: string;
                        connectedForms: {
                          name: string;
                          description: string | null;
                          id: string;
                        }[];
                        routers: {
                          name: string;
                          description: string | null;
                          id: string;
                        }[];
                        teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
                      };
                      readOnly: boolean;
                    }
                  | {
                      form: {
                        routes: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodRoutes>;
                        fields: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodFields>;
                        team: {
                          name: string;
                          id: number;
                        } | null;
                        _count: {
                          responses: number;
                        };
                        settings: import(".prisma/client").Prisma.JsonValue;
                        name: string;
                        id: string;
                        description: string | null;
                        userId: number;
                        createdAt: Date;
                        updatedAt: Date;
                        position: number;
                        teamId: number | null;
                        disabled: boolean;
                        updatedById: number | null;
                      };
                      readOnly: boolean;
                      hasError: boolean;
                    }
                )[];
                totalCount: number;
              };
            }>;
            formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: string;
              };
              output:
                | import("@calcom/routing-forms/types/types").SerializableForm<
                    {
                      team: {
                        name: string;
                        slug: string | null;
                      } | null;
                      _count: {
                        responses: number;
                      };
                    } & {
                      settings: import(".prisma/client").Prisma.JsonValue;
                      name: string;
                      id: string;
                      description: string | null;
                      userId: number;
                      createdAt: Date;
                      updatedAt: Date;
                      position: number;
                      teamId: number | null;
                      fields: import(".prisma/client").Prisma.JsonValue;
                      routes: import(".prisma/client").Prisma.JsonValue;
                      disabled: boolean;
                      updatedById: number | null;
                    }
                  >
                | null;
            }>;
            getResponseWithFormFields: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formResponseId: number;
              };
              output: {
                response: import("@calcom/routing-forms/types/types").FormResponse;
                form: import("@calcom/routing-forms/types/types").SerializableForm<
                  {
                    user: {
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      username: string | null;
                      theme: string | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      movedToProfileId: number | null;
                      organization: {
                        slug: string | null;
                      } | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                    team: {
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      slug: string | null;
                      parentId: number | null;
                      parent: {
                        slug: string | null;
                      } | null;
                      members: {
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                      }[];
                    } | null;
                    settings: import(".prisma/client").Prisma.JsonValue;
                    name: string;
                    id: string;
                    description: string | null;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    position: number;
                    teamId: number | null;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    disabled: boolean;
                    updatedById: number | null;
                  } & {
                    user: {
                      metadata: {
                        proPaidForByTeamId?: number | undefined;
                        stripeCustomerId?: string | undefined;
                        vitalSettings?:
                          | {
                              connected?: boolean | undefined;
                              selectedParam?: string | undefined;
                              sleepValue?: number | undefined;
                            }
                          | undefined;
                        isPremium?: boolean | undefined;
                        sessionTimeout?: number | undefined;
                        defaultConferencingApp?:
                          | {
                              appSlug?: string | undefined;
                              appLink?: string | undefined;
                            }
                          | undefined;
                        defaultBookerLayouts?:
                          | {
                              enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                              defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                            }
                          | null
                          | undefined;
                        emailChangeWaitingForVerification?: string | undefined;
                        migratedToOrgFrom?:
                          | {
                              username?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              revertTime?: string | undefined;
                            }
                          | undefined;
                      } | null;
                      movedToProfileId: number | null;
                      username: string | null;
                      nonProfileUsername: string | null;
                      profile: {
                        organization: {
                          slug: string | null;
                        } | null;
                      };
                    };
                    team: {
                      metadata: {
                        requestedSlug?: string | null | undefined;
                        paymentId?: string | undefined;
                        subscriptionId?: string | null | undefined;
                        subscriptionItemId?: string | null | undefined;
                        orgSeats?: number | null | undefined;
                        orgPricePerSeat?: number | null | undefined;
                        migratedToOrgFrom?:
                          | {
                              teamSlug?: string | null | undefined;
                              lastMigrationTime?: string | undefined;
                              reverted?: boolean | undefined;
                              lastRevertTime?: string | undefined;
                            }
                          | undefined;
                        billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                      } | null;
                      parent?:
                        | {
                            slug: string | null;
                          }
                        | null
                        | undefined;
                    };
                    userOrigin: string;
                    teamOrigin: string;
                    nonOrgUsername: string | null;
                    nonOrgTeamslug: string | null;
                  }
                >;
              };
            }>;
            formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                id: string;
                description?: string | null | undefined;
                disabled?: boolean | undefined;
                fields?:
                  | (
                      | {
                          id: string;
                          type: string;
                          label: string;
                          identifier?: string | undefined;
                          placeholder?: string | undefined;
                          selectText?: string | undefined;
                          required?: boolean | undefined;
                          deleted?: boolean | undefined;
                          options?:
                            | {
                                id: string | null;
                                label: string;
                              }[]
                            | undefined;
                        }
                      | {
                          id: string;
                          type: string;
                          label: string;
                          routerId: string;
                          options?:
                            | {
                                id: string | null;
                                label: string;
                              }[]
                            | undefined;
                          deleted?: boolean | undefined;
                          required?: boolean | undefined;
                          identifier?: string | undefined;
                          placeholder?: string | undefined;
                          selectText?: string | undefined;
                        }
                    )[]
                  | undefined;
                routes?:
                  | (
                      | {
                          id: string;
                          queryValue:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              };
                          action: {
                            type: import("@calcom/routing-forms/zod").RouteActionType;
                            value: string;
                            eventTypeId?: number | undefined;
                          };
                          name?: string | undefined;
                          attributeIdForWeights?: string | undefined;
                          attributeRoutingConfig?:
                            | {
                                skipContactOwner?: boolean | undefined;
                                salesforce?:
                                  | {
                                      rrSkipToAccountLookupField?: boolean | undefined;
                                      rrSKipToAccountLookupFieldName?: string | undefined;
                                    }
                                  | undefined;
                              }
                            | null
                            | undefined;
                          attributesQueryValue?:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | undefined;
                          fallbackAttributesQueryValue?:
                            | {
                                type: "group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | {
                                type: "switch_group";
                                id?: string | undefined;
                                children1?:
                                  | Record<
                                      string,
                                      {
                                        type?: string | undefined;
                                        properties?:
                                          | {
                                              field?: any;
                                              operator?: any;
                                              value?: any;
                                              valueSrc?: any;
                                              valueError?: (string | null)[] | undefined;
                                              valueType?: any;
                                            }
                                          | undefined;
                                      }
                                    >
                                  | undefined;
                                properties?: any;
                              }
                            | undefined;
                          isFallback?: boolean | undefined;
                        }
                      | {
                          id: string;
                          isRouter: true;
                          name?: string | undefined;
                        }
                    )[]
                  | null
                  | undefined;
                addFallback?: boolean | undefined;
                duplicateFrom?: string | null | undefined;
                teamId?: number | null | undefined;
                shouldConnect?: boolean | undefined;
                settings?:
                  | {
                      emailOwnerOnSubmission: boolean;
                      sendUpdatesTo?: number[] | undefined;
                      sendToAll?: boolean | undefined;
                    }
                  | null
                  | undefined;
              };
              output: {
                settings: import(".prisma/client").Prisma.JsonValue;
                name: string;
                id: string;
                description: string | null;
                userId: number;
                createdAt: Date;
                updatedAt: Date;
                position: number;
                teamId: number | null;
                fields: import(".prisma/client").Prisma.JsonValue;
                routes: import(".prisma/client").Prisma.JsonValue;
                disabled: boolean;
                updatedById: number | null;
              };
            }>;
            deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: import("@prisma/client/runtime/library").GetBatchResult;
            }>;
            report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formId: string;
                jsonLogicQuery: {
                  logic: Record<string, any> | null;
                };
                limit?: number | undefined;
                cursor?: number | null | undefined;
              };
              output: {
                nextCursor: number | null;
                headers: string[];
                responses: string[][];
              };
            }>;
            getAttributesForTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
              };
              output: {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                options: {
                  id: string;
                  contains: string[];
                  value: string;
                  slug: string;
                  isGroup: boolean;
                }[];
                slug: string;
                isWeightsEnabled: boolean;
              }[];
            }>;
            getIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                formId: string;
              };
              output:
                | {
                    incompleteBookingActions: {
                      id: number;
                      data: import(".prisma/client").Prisma.JsonValue;
                      credentialId: number | null;
                      enabled: boolean;
                      formId: string;
                      actionType: "SALESFORCE";
                    }[];
                    credentials: ({
                      team: {
                        name: string;
                      } | null;
                    } & {
                      key: import(".prisma/client").Prisma.JsonValue;
                      id: number;
                      type: string;
                      userId: number | null;
                      teamId: number | null;
                      subscriptionId: string | null;
                      billingCycleStart: number | null;
                      appId: string | null;
                      paymentStatus: string | null;
                      invalid: boolean | null;
                    })[];
                  }
                | undefined;
            }>;
            saveIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                enabled: boolean;
                formId: string;
                actionType: "SALESFORCE";
                data?: Record<string, any> | undefined;
                credentialId?: number | undefined;
              };
              output: void;
            }>;
          }
        >;
        appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: any;
            }>;
            projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                projectId: string;
              };
              output: any;
            }>;
          }
        >;
        features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                createdAt: Date | null;
                updatedAt: Date | null;
                slug: string;
                enabled: boolean;
                updatedBy: number | null;
                lastUsedAt: Date | null;
                stale: boolean | null;
              }[];
            }>;
            map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: import("@calcom/features/flags/config").AppFlags;
            }>;
          }
        >;
        appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                category: string;
              };
              output: (
                | {
                    name: string;
                    slug: string;
                    logo: string;
                    title: string | undefined;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    description: string;
                    keys: import(".prisma/client").Prisma.JsonObject | null;
                    dirName: string;
                    enabled: boolean;
                    isTemplate: boolean | undefined;
                  }
                | {
                    name: string;
                    slug: string;
                    logo: string;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title: string | undefined;
                    description: string;
                    enabled: boolean;
                    dirName: string;
                    keys: Record<string, string> | null;
                    isTemplate?: undefined;
                  }
              )[];
            }>;
            toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
                enabled: boolean;
              };
              output: boolean;
            }>;
            saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                type: string;
                slug: string;
                dirName: string;
                keys?: unknown;
                fromEnabled?: boolean | undefined;
              };
              output: void;
            }>;
            checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: boolean;
            }>;
            setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
              };
              output: void;
            }>;
            updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                key: {} & {
                  [k: string]: unknown;
                };
                credentialId: number;
              };
              output: boolean;
            }>;
            queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: string[] | undefined;
              output:
                | {
                    name: string;
                    slug: string;
                    installed: boolean;
                  }[]
                | undefined;
            }>;
            checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                slug: string;
              };
              output: boolean;
            }>;
          }
        >;
        users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId: number;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
              };
            }>;
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              }[];
            }>;
            add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                role: "USER" | "ADMIN";
                email: string;
                timeZone: string;
                weekStart: string;
                identityProvider: "CAL" | "GOOGLE" | "SAML";
                name?: string | null | undefined;
                locale?: string | null | undefined;
                username?: string | null | undefined;
                bio?: string | null | undefined;
                avatarUrl?: string | null | undefined;
                theme?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                timeFormat?: number | null | undefined;
                allowDynamicBooking?: boolean | null | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
                message: string;
              };
            }>;
            update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name?: string | null | undefined;
                role?: "USER" | "ADMIN" | undefined;
                locale?: string | null | undefined;
                email?: string | undefined;
                timeZone?: string | undefined;
                username?: string | null | undefined;
                bio?: string | null | undefined;
                avatarUrl?: string | null | undefined;
                weekStart?: string | undefined;
                theme?: string | null | undefined;
                defaultScheduleId?: number | null | undefined;
                timeFormat?: number | null | undefined;
                identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
                allowDynamicBooking?: boolean | null | undefined;
              };
              output: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
                message: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                message: string;
              };
            }>;
          }
        >;
        oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                clientId: string;
              };
              output: {
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
              } | null;
            }>;
            addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                logo: string;
                redirectUri: string;
              };
              output: {
                clientSecret: string;
                name: string;
                logo: string | null;
                clientId: string;
                redirectUri: string;
              };
            }>;
            generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                clientId: string;
                scopes: string[];
                teamSlug?: string | undefined;
              };
              output: {
                client: {
                  name: string;
                  clientId: string;
                  redirectUri: string;
                };
                authorizationCode: string;
              };
            }>;
          }
        >;
        googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                id: number | undefined;
              };
            }>;
            getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: string[];
            }>;
            removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: void;
              output: {
                deleted: number;
              };
            }>;
          }
        >;
        admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                limit: number;
                cursor?: number | null | undefined;
                searchTerm?: string | null | undefined;
              };
              output: {
                rows: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  locked: boolean;
                }[];
                nextCursor: number | undefined;
                meta: {
                  totalRowCount: number;
                };
              };
            }>;
            sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                success: boolean;
              };
            }>;
            lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
                locked: boolean;
              };
              output: {
                success: boolean;
                userId: number;
                locked: boolean;
              };
            }>;
            toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                slug: string;
                enabled: boolean;
              };
              output: {
                type: import(".prisma/client").$Enums.FeatureType | null;
                description: string | null;
                createdAt: Date | null;
                updatedAt: Date | null;
                slug: string;
                enabled: boolean;
                updatedBy: number | null;
                lastUsedAt: Date | null;
                stale: boolean | null;
              };
            }>;
            removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
              };
              output: {
                success: boolean;
                userId: number;
              };
            }>;
            getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: {
                users: {
                  locked: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  }[];
                  reviewNeeded: {
                    name: string | null;
                    id: number;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  }[];
                };
                teams: {
                  locked: {
                    name: string;
                    id: number;
                    slug: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    logoUrl: string | null;
                  }[];
                  reviewNeeded: {
                    name: string;
                    id: number;
                    slug: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    logoUrl: string | null;
                  }[];
                };
              };
            }>;
            setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId?: number | undefined;
                username?: string | undefined;
                teamId?: number | undefined;
                teamSlug?: string | undefined;
                lock?: boolean | undefined;
              };
              output: {
                name: string | null;
                locked: boolean | undefined;
              };
            }>;
            createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                billingPeriod: "MONTHLY" | "ANNUALLY";
                billingType: "PER_BOOKING" | "PER_USER";
                entityCount: number;
                entityPrice: number;
                overages: number;
                billingEmail: string;
              };
              output: {
                stripeCheckoutUrl: string;
              };
            }>;
            workspacePlatform: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                  input: void;
                  output: (Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      slug: string;
                      enabled: boolean;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  })[];
                }>;
                add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    description: string;
                    slug: string;
                    defaultServiceAccountKey?:
                      | import("zod").objectInputType<
                          {
                            private_key: import("zod").ZodString;
                            client_email: import("zod").ZodOptional<import("zod").ZodString>;
                            client_id: import("zod").ZodString;
                            tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                          },
                          import("zod").ZodTypeAny,
                          "passthrough"
                        >
                      | undefined;
                    enabled?: boolean | undefined;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    name: string;
                    id: number;
                    description: string;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                updateServiceAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    id: number;
                    defaultServiceAccountKey: {
                      client_id: string;
                      private_key: string;
                      client_email?: string | undefined;
                      tenant_id?: string | undefined;
                    } & {
                      [k: string]: unknown;
                    };
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
                toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    id: number;
                    enabled: boolean;
                  };
                  output: Omit<
                    {
                      name: string;
                      id: number;
                      description: string;
                      createdAt: Date;
                      updatedAt: Date;
                      slug: string;
                      enabled: boolean;
                      defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                    },
                    "defaultServiceAccountKey"
                  > & {
                    defaultServiceAccountKey: undefined;
                  };
                }>;
              }
            >;
          }
        >;
        attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: void;
              output: ({
                options: {
                  id: string;
                  contains: string[];
                  value: string;
                  slug: string;
                  attributeId: string;
                  isGroup: boolean;
                }[];
              } & {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                isWeightsEnabled: boolean;
                usersCanEditRelation: boolean;
                isLocked: boolean;
              })[];
            }>;
            get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                id: string;
              };
              output: {
                name: string;
                id: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  id?: string | undefined;
                  isGroup?: boolean | undefined;
                  assignedUsers?: number | undefined;
                  contains?: string[] | undefined;
                }[];
                isLocked?: boolean | undefined;
                isWeightsEnabled?: boolean | undefined;
              };
            }>;
            getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                userId: number;
              };
              output: {
                id: string;
                name: string;
                type: import("@calcom/prisma/enums").AttributeType;
                options: {
                  id: string;
                  slug: string;
                  value: string;
                  weight: number | null;
                  createdByDSyncId: string | null;
                }[];
              }[];
            }>;
            create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  isGroup?: boolean | undefined;
                }[];
                isLocked?: boolean | undefined;
              };
              output: {
                id: string;
                teamId: number;
                type: import(".prisma/client").$Enums.AttributeType;
                name: string;
                slug: string;
                enabled: boolean;
                usersCanEditRelation: boolean;
                createdAt: Date;
                updatedAt: Date;
                isWeightsEnabled: boolean;
                isLocked: boolean;
              };
            }>;
            edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                name: string;
                type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
                options: {
                  value: string;
                  id?: string | undefined;
                  isGroup?: boolean | undefined;
                  contains?: string[] | undefined;
                }[];
                attributeId: string;
                isLocked?: boolean | undefined;
                isWeightsEnabled?: boolean | undefined;
              };
              output: {
                id: string;
              };
            }>;
            delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                id: string;
              };
              output: {
                name: string;
                id: string;
                type: import(".prisma/client").$Enums.AttributeType;
                createdAt: Date;
                updatedAt: Date;
                slug: string;
                teamId: number;
                enabled: boolean;
                isWeightsEnabled: boolean;
                usersCanEditRelation: boolean;
                isLocked: boolean;
              };
            }>;
            toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                attributeId: string;
              };
              output: {
                enabled: boolean;
                id: string;
              };
            }>;
            assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                userId: number;
                attributes: {
                  id: string;
                  options?:
                    | {
                        value: string;
                        label?: string | undefined;
                        weight?: number | undefined;
                      }[]
                    | undefined;
                  value?: string | undefined;
                }[];
              };
              output: {
                success: boolean;
                message: string;
              };
            }>;
            bulkAssignAttributes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                attributes: {
                  id: string;
                  options?:
                    | {
                        value: string;
                        label?: string | undefined;
                      }[]
                    | undefined;
                  value?: string | undefined;
                }[];
                userIds: number[];
              };
              output: {
                success: boolean;
                message: string;
                results: {
                  userId: number;
                  success: boolean;
                  message?: string;
                }[];
              };
            }>;
            findTeamMembersMatchingAttributeLogic: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                teamId: number;
                attributesQueryValue:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | null;
                isPreview?: boolean | undefined;
                _enablePerf?: boolean | undefined;
                _concurrency?: number | undefined;
              };
              output:
                | {
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    result: null;
                  }
                | {
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    result: {
                      id: number;
                      name: string | null;
                      email: string;
                    }[];
                  };
            }>;
          }
        >;
        highPerf: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            getTeamSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
              input: {
                startTime: string;
                endTime: string;
                eventTypeId?: number | undefined;
                eventTypeSlug?: string | undefined;
                timeZone?: string | undefined;
                usernameList?: string[] | undefined;
                debug?: boolean | undefined;
                duration?: string | undefined;
                rescheduleUid?: string | null | undefined;
                isTeamEvent?: boolean | undefined;
                orgSlug?: string | null | undefined;
                teamMemberEmail?: string | null | undefined;
                routedTeamMemberIds?: number[] | null | undefined;
                skipContactOwner?: boolean | null | undefined;
                _enableTroubleshooter?: boolean | undefined;
                _bypassCalendarBusyTimes?: boolean | undefined;
                _shouldServeCache?: boolean | undefined;
                routingFormResponseId?: number | undefined;
                email?: string | null | undefined;
              };
              output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
            }>;
          }
        >;
        routingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
          import("@trpc/server/unstable-core-do-not-import").RootConfig<{
            ctx: import("../server/createContext").InnerContext;
            meta: object;
            errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
            transformer: {
              stringify: (object: any) => string;
              parse: <T = unknown>(string: string) => T;
              serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
              deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
              registerClass: (
                v: import("superjson/dist/types").Class,
                options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
              ) => void;
              registerSymbol: (v: symbol, identifier?: string | undefined) => void;
              registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                transformer: Omit<
                  import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                  "name"
                >,
                name: string
              ) => void;
              allowErrorProps: (...props: string[]) => void;
            };
          }>,
          {
            findTeamMembersMatchingAttributeLogicOfRoute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
              input: {
                formId: string;
                response: Record<
                  string,
                  {
                    label: string;
                    value: (string | number | string[]) & (string | number | string[] | undefined);
                  }
                >;
                route: {
                  id: string;
                  queryValue:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      };
                  action: {
                    type: import("@calcom/routing-forms/zod").RouteActionType;
                    value: string;
                    eventTypeId?: number | undefined;
                  };
                  name?: string | undefined;
                  attributeIdForWeights?: string | undefined;
                  attributeRoutingConfig?:
                    | {
                        skipContactOwner?: boolean | undefined;
                        salesforce?:
                          | {
                              rrSkipToAccountLookupField?: boolean | undefined;
                              rrSKipToAccountLookupFieldName?: string | undefined;
                            }
                          | undefined;
                      }
                    | null
                    | undefined;
                  attributesQueryValue?:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | undefined;
                  fallbackAttributesQueryValue?:
                    | {
                        type: "group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | {
                        type: "switch_group";
                        id?: string | undefined;
                        children1?:
                          | Record<
                              string,
                              {
                                type?: string | undefined;
                                properties?:
                                  | {
                                      field?: any;
                                      operator?: any;
                                      value?: any;
                                      valueSrc?: any;
                                      valueError?: (string | null)[] | undefined;
                                      valueType?: any;
                                    }
                                  | undefined;
                              }
                            >
                          | undefined;
                        properties?: any;
                      }
                    | undefined;
                  isFallback?: boolean | undefined;
                };
                isPreview?: boolean | undefined;
                _enablePerf?: boolean | undefined;
                _concurrency?: number | undefined;
              };
              output:
                | {
                    troubleshooter: null;
                    result: null;
                    contactOwnerEmail: null;
                    checkedFallback: boolean;
                    mainWarnings: never[];
                    fallbackWarnings: never[];
                    eventTypeRedirectUrl: null;
                    isUsingAttributeWeights: boolean;
                  }
                | {
                    contactOwnerEmail: string | null;
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    checkedFallback: boolean;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    eventTypeRedirectUrl: string;
                    isUsingAttributeWeights: boolean;
                    result: null;
                  }
                | {
                    troubleshooter:
                      | {
                          type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                          data: Record<string, any>;
                        }
                      | undefined;
                    contactOwnerEmail: string | null;
                    checkedFallback: boolean;
                    mainWarnings: string[] | null;
                    fallbackWarnings: string[] | null;
                    result: {
                      users: {
                        id: number;
                        name: string | null;
                        email: string;
                      }[];
                      perUserData: {
                        bookingsCount: Record<number, number>;
                        bookingShortfalls: Record<number, number> | null;
                        calibrations: Record<number, number> | null;
                        weights: Record<number, number> | null;
                      } | null;
                    };
                    isUsingAttributeWeights: boolean;
                    eventTypeRedirectUrl: string;
                  };
            }>;
            public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
              import("@trpc/server/unstable-core-do-not-import").RootConfig<{
                ctx: import("../server/createContext").InnerContext;
                meta: object;
                errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
                transformer: {
                  stringify: (object: any) => string;
                  parse: <T = unknown>(string: string) => T;
                  serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                  deserialize: <T_1 = unknown>(
                    payload: import("superjson/dist/types").SuperJSONResult
                  ) => T_1;
                  registerClass: (
                    v: import("superjson/dist/types").Class,
                    options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                  ) => void;
                  registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                  registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                    transformer: Omit<
                      import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                      "name"
                    >,
                    name: string
                  ) => void;
                  allowErrorProps: (...props: string[]) => void;
                };
              }>,
              {
                response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                  input: {
                    formFillerId: string;
                    formId: string;
                    response: Record<
                      string,
                      {
                        label: string;
                        value: (string | number | string[]) & (string | number | string[] | undefined);
                        identifier?: string | undefined;
                      }
                    >;
                    chosenRouteId?: string | undefined;
                    isPreview?: boolean | undefined;
                  };
                  output: {
                    isPreview: boolean;
                    formResponse:
                      | {
                          id: number;
                          createdAt: Date;
                          formFillerId: string;
                          formId: string;
                          response: import(".prisma/client").Prisma.JsonValue;
                          routedToBookingUid: string | null;
                          chosenRouteId: string | null;
                        }
                      | {
                          id: number;
                          formId: string;
                          response: Record<
                            string,
                            {
                              label: string;
                              value: (string | number | string[]) & (string | number | string[] | undefined);
                              identifier?: string | undefined;
                            }
                          >;
                          chosenRouteId: string | null;
                          createdAt: Date;
                          updatedAt: Date;
                        };
                    teamMembersMatchingAttributeLogic: number[] | null;
                    attributeRoutingConfig:
                      | {
                          skipContactOwner?: boolean | undefined;
                          salesforce?:
                            | {
                                rrSkipToAccountLookupField?: boolean | undefined;
                                rrSKipToAccountLookupFieldName?: string | undefined;
                              }
                            | undefined;
                        }
                      | null
                      | undefined;
                    timeTaken: Record<string, number | null>;
                  };
                }>;
              }
            >;
          }
        >;
      } & {
        me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                includePasswordAdded?: boolean | undefined;
              }
            | undefined;
          output:
            | {
                isTeamAdminOrOwner: boolean;
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                  id: number;
                  email: string;
                  emailVerified: Date | null;
                }[];
                isPremium: boolean | undefined;
                organizationId: null;
                organization: {
                  id: number;
                  isPlatform: boolean;
                  slug: string;
                  isOrgAdmin: boolean;
                };
                username: string | null;
                profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                profiles: never[];
                organizationSettings?: undefined;
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                  enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                  defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
              }
            | {
                isTeamAdminOrOwner: boolean;
                passwordAdded?: boolean | undefined;
                secondaryEmails: {
                  id: number;
                  email: string;
                  emailVerified: Date | null;
                }[];
                isPremium: boolean | undefined;
                organizationId: number | null;
                organization: {
                  id: number | null;
                  isOrgAdmin: boolean;
                  metadata: {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?:
                      | {
                          teamSlug?: string | null | undefined;
                          lastMigrationTime?: string | undefined;
                          reverted?: boolean | undefined;
                          lastRevertTime?: string | undefined;
                        }
                      | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                  } | null;
                  requestedSlug: string | null;
                  name?: string | undefined;
                  organizationSettings?:
                    | {
                        allowSEOIndexing: boolean;
                        lockEventTypeCreationForUsers: boolean;
                      }
                    | null
                    | undefined;
                  slug?: string | null | undefined;
                  logoUrl?: string | null | undefined;
                  isPrivate?: boolean | undefined;
                  bannerUrl?: string | null | undefined;
                  isPlatform?: boolean | undefined;
                };
                username: string | null;
                profile:
                  | import("@calcom/types/UserProfile").UserAsPersonalProfile
                  | {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    }
                  | {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      user: {
                        name: string | null;
                        id: number;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        email: string;
                        username: string | null;
                        avatarUrl: string | null;
                        bufferTime: number;
                        defaultScheduleId: number | null;
                        isPlatformManaged: boolean;
                      };
                      organization: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        organizationSettings: {
                          allowSEOIndexing: boolean;
                          lockEventTypeCreationForUsers: boolean;
                        } | null;
                        slug: string | null;
                        logoUrl: string | null;
                        isPrivate: boolean;
                        bannerUrl: string | null;
                        isPlatform: boolean;
                        members: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      } & Omit<
                        Pick<
                          {
                            id: number;
                            name: string;
                            slug: string | null;
                            logoUrl: string | null;
                            calVideoLogo: string | null;
                            appLogo: string | null;
                            appIconLogo: string | null;
                            bio: string | null;
                            hideBranding: boolean;
                            isPrivate: boolean;
                            hideBookATeamMember: boolean;
                            createdAt: Date;
                            metadata: import(".prisma/client").Prisma.JsonValue | null;
                            theme: string | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            bannerUrl: string | null;
                            parentId: number | null;
                            timeFormat: number | null;
                            timeZone: string;
                            weekStart: string;
                            isOrganization: boolean;
                            pendingPayment: boolean;
                            isPlatform: boolean;
                            createdByOAuthClientId: string | null;
                            smsLockState: import(".prisma/client").$Enums.SMSLockState;
                            smsLockReviewedByAdmin: boolean;
                            bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                            includeManagedEventsInLimits: boolean;
                          },
                          "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                        >,
                        "metadata"
                      > & {
                          requestedSlug: string | null;
                          metadata: {
                            requestedSlug: string | null;
                            paymentId?: string | undefined;
                            subscriptionId?: string | null | undefined;
                            subscriptionItemId?: string | null | undefined;
                            orgSeats?: number | null | undefined;
                            orgPricePerSeat?: number | null | undefined;
                            migratedToOrgFrom?:
                              | {
                                  teamSlug?: string | null | undefined;
                                  lastMigrationTime?: string | undefined;
                                  reverted?: boolean | undefined;
                                  lastRevertTime?: string | undefined;
                                }
                              | undefined;
                            billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                          };
                        };
                      movedFromUser: {
                        id: number;
                      } | null;
                      id: number;
                      uid: string;
                      userId: number;
                      createdAt: Date & string;
                      updatedAt: Date & string;
                      username: string;
                      organizationId: number;
                      upId: string;
                    }
                  | ({
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                  | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                      name: string | null;
                      avatarUrl: string | null;
                      startTime: number;
                      endTime: number;
                      bufferTime: number;
                      username: string | null;
                      upId: string;
                      id: null;
                      organizationId: null;
                      organization: null;
                    });
                profiles: import("@calcom/types/UserProfile").UserProfile[];
                organizationSettings:
                  | {
                      allowSEOIndexing: boolean;
                      lockEventTypeCreationForUsers: boolean;
                    }
                  | null
                  | undefined;
                id: number;
                name: string | null;
                email: string;
                emailMd5: string;
                emailVerified: Date | null;
                startTime: number;
                endTime: number;
                bufferTime: number;
                locale: string;
                timeFormat: number | null;
                timeZone: string;
                avatar: string;
                avatarUrl: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                twoFactorEnabled: boolean;
                disableImpersonation: boolean;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderEmail: string;
                brandColor: string | null;
                darkBrandColor: string | null;
                bio: string | null;
                weekStart: string;
                theme: string | null;
                appTheme: string | null;
                hideBranding: boolean;
                metadata: import(".prisma/client").Prisma.JsonValue;
                defaultBookerLayouts: {
                  enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                  defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                } | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
              };
        }>;
        myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            sumOfBookings: number | undefined;
            sumOfCalendars: number | undefined;
            sumOfTeams: number | undefined;
            sumOfEventTypes: number | undefined;
            sumOfTeamEventTypes: number | undefined;
          };
        }>;
        platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            username: string | null;
            email: string;
            timeFormat: number | null;
            timeZone: string;
            defaultScheduleId: number | null;
            weekStart: string;
            organizationId: number | null;
            organization: {
              isPlatform: any;
              id: number | null;
            };
          };
        }>;
        deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            password: string;
            totpCode?: string | undefined;
          };
          output: void;
        }>;
        deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: void;
          output: void;
        }>;
        connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                eventTypeId: number | null;
                onboarding?: boolean | undefined;
              }
            | undefined;
          output: {
            connectedCalendars: (
              | {
                  integration: import("@calcom/types/App").App & {
                    credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                    credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null;
                  error?: undefined;
                  primary?: undefined;
                  calendars?: undefined;
                }
              | {
                  integration: import("@calcom/types/App").App & {
                    credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                    credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  error: {
                    message: string;
                  };
                  delegationCredentialId?: undefined;
                  primary?: undefined;
                  calendars?: undefined;
                }
              | {
                  integration: {
                    installed?: boolean;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title?: string;
                    name: string;
                    description: string;
                    variant:
                      | "calendar"
                      | "payment"
                      | "conferencing"
                      | "video"
                      | "other"
                      | "other_calendar"
                      | "automation"
                      | "crm";
                    slug: string;
                    category?: string;
                    categories: import(".prisma/client").AppCategories[];
                    extendsFeature?: "EventType" | "User";
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string;
                    verified?: boolean;
                    trending?: boolean;
                    rating?: number;
                    reviews?: number;
                    isGlobal?: boolean;
                    simplePath?: string;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free";
                    price?: number;
                    commission?: number;
                    licenseRequired?: boolean;
                    teamsPlanRequired?: {
                      upgradeUrl: string;
                    };
                    appData?: import("@calcom/types/App").AppData;
                    paid?: import("@calcom/types/App").PaidAppData;
                    dirName?: string;
                    isTemplate?: boolean;
                    __template?: string;
                    dependencies?: string[];
                    concurrentMeetings?: boolean;
                    createdAt?: string;
                    isOAuth?: boolean;
                    delegationCredential?: {
                      workspacePlatformSlug: string;
                    };
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null;
                  primary: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    delegationCredentialId: string | null;
                    name?: string;
                    email?: string;
                    primaryEmail?: string;
                    integrationTitle?: string;
                    id?: string | undefined;
                    error?: string | null | undefined;
                    userId?: number | undefined;
                    eventTypeId?: number | null | undefined;
                    integration?: string | undefined;
                    domainWideDelegationCredentialId?: string | null | undefined;
                    googleChannelId?: string | null | undefined;
                    googleChannelKind?: string | null | undefined;
                    googleChannelResourceId?: string | null | undefined;
                    googleChannelResourceUri?: string | null | undefined;
                    googleChannelExpiration?: string | null | undefined;
                    externalId: string;
                  };
                  calendars: {
                    readOnly: boolean;
                    primary: true | null;
                    isSelected: boolean;
                    credentialId: number;
                    delegationCredentialId: string | null;
                    name?: string;
                    email?: string;
                    primaryEmail?: string;
                    integrationTitle?: string;
                    id?: string | undefined;
                    error?: string | null | undefined;
                    userId?: number | undefined;
                    eventTypeId?: number | null | undefined;
                    integration?: string | undefined;
                    domainWideDelegationCredentialId?: string | null | undefined;
                    googleChannelId?: string | null | undefined;
                    googleChannelKind?: string | null | undefined;
                    googleChannelResourceId?: string | null | undefined;
                    googleChannelResourceUri?: string | null | undefined;
                    googleChannelExpiration?: string | null | undefined;
                    externalId: string;
                  }[];
                  error?: undefined;
                }
              | {
                  integration: {
                    installed?: boolean;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    title?: string;
                    name: string;
                    description: string;
                    variant:
                      | "calendar"
                      | "payment"
                      | "conferencing"
                      | "video"
                      | "other"
                      | "other_calendar"
                      | "automation"
                      | "crm";
                    slug: string;
                    category?: string;
                    categories: import(".prisma/client").AppCategories[];
                    extendsFeature?: "EventType" | "User";
                    logo: string;
                    publisher: string;
                    url: string;
                    docsUrl?: string;
                    verified?: boolean;
                    trending?: boolean;
                    rating?: number;
                    reviews?: number;
                    isGlobal?: boolean;
                    simplePath?: string;
                    email: string;
                    key?: import(".prisma/client").Prisma.JsonValue;
                    feeType?: "monthly" | "usage-based" | "one-time" | "free";
                    price?: number;
                    commission?: number;
                    licenseRequired?: boolean;
                    teamsPlanRequired?: {
                      upgradeUrl: string;
                    };
                    appData?: import("@calcom/types/App").AppData;
                    paid?: import("@calcom/types/App").PaidAppData;
                    dirName?: string;
                    isTemplate?: boolean;
                    __template?: string;
                    dependencies?: string[];
                    concurrentMeetings?: boolean;
                    createdAt?: string;
                    isOAuth?: boolean;
                    delegationCredential?: {
                      workspacePlatformSlug: string;
                    };
                    locationOption: import("@calcom/app-store/utils").LocationOption | null;
                  };
                  credentialId: number;
                  delegationCredentialId: string | null | undefined;
                  error: {
                    message: string;
                  };
                  primary?: undefined;
                  calendars?: undefined;
                }
            )[];
            destinationCalendar: {
              primary?: boolean;
              name?: string;
              readOnly?: boolean;
              email?: string;
              primaryEmail: string | null;
              credentialId: number | null;
              integrationTitle?: string;
              id: string | number;
              error?: string | null | undefined;
              userId: number | null;
              eventTypeId: number | null;
              integration: string;
              delegationCredentialId: string | null;
              domainWideDelegationCredentialId: string | null;
              googleChannelId?: string | null | undefined;
              googleChannelKind?: string | null | undefined;
              googleChannelResourceId?: string | null | undefined;
              googleChannelResourceUri?: string | null | undefined;
              googleChannelExpiration?: string | null | undefined;
              externalId: string;
            };
          };
        }>;
        setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            integration: string;
            externalId: string;
            eventTypeId?: number | null | undefined;
            bookingId?: number | null | undefined;
          };
          output: void;
        }>;
        integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            variant?: string | undefined;
            exclude?: string[] | undefined;
            onlyInstalled?: boolean | undefined;
            includeTeamInstalledApps?: boolean | undefined;
            extendsFeature?: "EventType" | undefined;
            teamId?: number | null | undefined;
            sortByMostPopular?: boolean | undefined;
            sortByInstalledFirst?: boolean | undefined;
            categories?:
              | (
                  | "calendar"
                  | "messaging"
                  | "other"
                  | "payment"
                  | "video"
                  | "web3"
                  | "automation"
                  | "analytics"
                  | "conferencing"
                  | "crm"
                )[]
              | undefined;
            appId?: string | undefined;
          };
          output: {
            items: {
              dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
              userCredentialIds: number[];
              invalidCredentialIds: number[];
              teams: ({
                teamId: number;
                name: string;
                logoUrl: string | null;
                credentialId: number;
                isAdmin: boolean;
              } | null)[];
              isInstalled: boolean | undefined;
              isSetupAlready: boolean | undefined;
              credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
              installed?: boolean;
              type:
                | `${string}_calendar`
                | `${string}_messaging`
                | `${string}_payment`
                | `${string}_video`
                | `${string}_other`
                | `${string}_automation`
                | `${string}_analytics`
                | `${string}_crm`
                | `${string}_other_calendar`;
              title?: string;
              name: string;
              description: string;
              variant:
                | "calendar"
                | "payment"
                | "conferencing"
                | "video"
                | "other"
                | "other_calendar"
                | "automation"
                | "crm";
              slug: string;
              category?: string;
              categories: import(".prisma/client").AppCategories[];
              extendsFeature?: "EventType" | "User";
              logo: string;
              publisher: string;
              url: string;
              docsUrl?: string;
              verified?: boolean;
              trending?: boolean;
              rating?: number;
              reviews?: number;
              isGlobal?: boolean;
              simplePath?: string;
              email: string;
              feeType?: "monthly" | "usage-based" | "one-time" | "free";
              price?: number;
              commission?: number;
              licenseRequired?: boolean;
              teamsPlanRequired?: {
                upgradeUrl: string;
              };
              appData?: import("@calcom/types/App").AppData;
              paid?: import("@calcom/types/App").PaidAppData;
              dirName?: string;
              isTemplate?: boolean;
              __template?: string;
              dependencies?: string[];
              concurrentMeetings?: boolean;
              createdAt?: string;
              isOAuth?: boolean;
              delegationCredential?: {
                workspacePlatformSlug: string;
              };
              locationOption: import("@calcom/app-store/utils").LocationOption | null;
              enabled: boolean;
            }[];
          };
        }>;
        appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            appId: string;
          };
          output: {
            installed?: boolean;
            type:
              | `${string}_calendar`
              | `${string}_messaging`
              | `${string}_payment`
              | `${string}_video`
              | `${string}_other`
              | `${string}_automation`
              | `${string}_analytics`
              | `${string}_crm`
              | `${string}_other_calendar`;
            title?: string;
            name: string;
            description: string;
            variant:
              | "calendar"
              | "payment"
              | "conferencing"
              | "video"
              | "other"
              | "other_calendar"
              | "automation"
              | "crm";
            slug: string;
            category?: string;
            categories: import(".prisma/client").AppCategories[];
            extendsFeature?: "EventType" | "User";
            logo: string;
            publisher: string;
            url: string;
            docsUrl?: string;
            verified?: boolean;
            trending?: boolean;
            rating?: number;
            reviews?: number;
            isGlobal?: boolean;
            simplePath?: string;
            email: string;
            key?: import(".prisma/client").Prisma.JsonValue;
            feeType?: "monthly" | "usage-based" | "one-time" | "free";
            price?: number;
            commission?: number;
            licenseRequired?: boolean;
            teamsPlanRequired?: {
              upgradeUrl: string;
            };
            appData?: import("@calcom/types/App").AppData;
            paid?: import("@calcom/types/App").PaidAppData;
            dirName?: string;
            isTemplate?: boolean;
            __template?: string;
            dependencies?: string[];
            concurrentMeetings?: boolean;
            createdAt?: string;
            isOAuth?: boolean;
            delegationCredential?: {
              workspacePlatformSlug: string;
            };
            locationOption: import("@calcom/app-store/utils").LocationOption | null;
            isInstalled: number;
          };
        }>;
        appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            appType: string;
          };
          output: {
            credentials: (
              | {
                  id: number;
                  delegatedToId: string;
                  userId: number;
                  user: {
                    email: string;
                  };
                  key: {
                    access_token: string;
                  };
                  invalid: boolean;
                  teamId: null;
                  team: null;
                  delegatedTo: {
                    serviceAccountKey: import("zod").objectOutputType<
                      {
                        private_key: import("zod").ZodString;
                        client_email: import("zod").ZodOptional<import("zod").ZodString>;
                        client_id: import("zod").ZodString;
                        tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                      },
                      import("zod").ZodTypeAny,
                      "passthrough"
                    >;
                  } | null;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  appId: string;
                }
              | ({
                  user: {
                    name: string | null;
                  } | null;
                  team: {
                    name: string;
                  } | null;
                } & {
                  key: import(".prisma/client").Prisma.JsonValue;
                  id: number;
                  type: string;
                  userId: number | null;
                  teamId: number | null;
                  subscriptionId: string | null;
                  billingCycleStart: number | null;
                  appId: string | null;
                  paymentStatus: string | null;
                  invalid: boolean | null;
                })
            )[];
            userAdminTeams: number[];
          };
        }>;
        stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            isPremium: boolean;
            username: string | null;
          };
        }>;
        updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            username?: string | undefined;
            name?: string | undefined;
            email?: string | undefined;
            bio?: string | undefined;
            avatarUrl?: string | null | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?:
              | {
                  proPaidForByTeamId?: number | undefined;
                  stripeCustomerId?: string | undefined;
                  vitalSettings?:
                    | {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                      }
                    | undefined;
                  isPremium?: boolean | undefined;
                  sessionTimeout?: number | undefined;
                  defaultConferencingApp?:
                    | {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                      }
                    | undefined;
                  defaultBookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  emailChangeWaitingForVerification?: string | undefined;
                  migratedToOrgFrom?:
                    | {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            travelSchedules?:
              | {
                  startDate: Date;
                  timeZone: string;
                  id?: number | undefined;
                  endDate?: Date | undefined;
                }[]
              | undefined;
            secondaryEmails?:
              | {
                  id: number;
                  email: string;
                  isDeleted?: boolean | undefined;
                }[]
              | undefined;
          };
          output: {
            email: string | undefined;
            avatarUrl: string | null;
            hasEmailBeenChanged: boolean | "" | undefined;
            sendEmailVerification: boolean;
            username?: string | undefined;
            name?: string | undefined;
            bio?: string | undefined;
            timeZone?: string | undefined;
            weekStart?: string | undefined;
            hideBranding?: boolean | undefined;
            allowDynamicBooking?: boolean | undefined;
            allowSEOIndexing?: boolean | undefined;
            receiveMonthlyDigestEmail?: boolean | undefined;
            brandColor?: string | undefined;
            darkBrandColor?: string | undefined;
            theme?: string | null | undefined;
            appTheme?: string | null | undefined;
            completedOnboarding?: boolean | undefined;
            locale?: string | undefined;
            timeFormat?: number | undefined;
            disableImpersonation?: boolean | undefined;
            metadata?:
              | {
                  proPaidForByTeamId?: number | undefined;
                  stripeCustomerId?: string | undefined;
                  vitalSettings?:
                    | {
                        connected?: boolean | undefined;
                        selectedParam?: string | undefined;
                        sleepValue?: number | undefined;
                      }
                    | undefined;
                  isPremium?: boolean | undefined;
                  sessionTimeout?: number | undefined;
                  defaultConferencingApp?:
                    | {
                        appSlug?: string | undefined;
                        appLink?: string | undefined;
                      }
                    | undefined;
                  defaultBookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  emailChangeWaitingForVerification?: string | undefined;
                  migratedToOrgFrom?:
                    | {
                        username?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        revertTime?: string | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            travelSchedules?:
              | {
                  startDate: Date;
                  timeZone: string;
                  id?: number | undefined;
                  endDate?: Date | undefined;
                }[]
              | undefined;
            secondaryEmails?:
              | {
                  id: number;
                  email: string;
                  isDeleted: boolean;
                }[]
              | undefined;
          };
        }>;
        unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: void;
          output: {
            message: string;
          };
        }>;
        eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: number[];
          };
          output: void;
        }>;
        routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: string[];
          };
          output: void;
        }>;
        workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            ids: number[];
          };
          output: void;
        }>;
        submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            rating: string;
            comment: string;
          };
          output: void;
        }>;
        locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            teamId?: number | undefined;
          };
          output: {
            label: string;
            options: {
              label: string;
              value: string;
              disabled?: boolean;
              icon?: string;
              slug?: string;
              credentialId?: number;
            }[];
          }[];
        }>;
        deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            id: number;
            externalId?: string | undefined;
            teamId?: number | undefined;
          };
          output: void;
        }>;
        bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: number;
        }>;
        getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            roomName: string;
          };
          output:
            | {
                data: import("zod").objectOutputType<
                  {
                    id: import("zod").ZodString;
                    room_name: import("zod").ZodString;
                    start_ts: import("zod").ZodNumber;
                    status: import("zod").ZodString;
                    max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                    duration: import("zod").ZodNumber;
                    share_token: import("zod").ZodString;
                  },
                  import("zod").ZodTypeAny,
                  "passthrough"
                >[];
                total_count: number;
              }
            | {}
            | undefined;
        }>;
        getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            teamUpgradeBanner: ({
              team: {
                children: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                }[];
              } & {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
            orgUpgradeBanner: ({
              team: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
            verifyEmailBanner: boolean;
            calendarCredentialBanner: boolean;
            invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
          };
        }>;
        getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            recordingId: string;
          };
          output:
            | {
                download_link: string;
              }
            | undefined;
        }>;
        getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output:
            | {
                appSlug?: string | undefined;
                appLink?: string | undefined;
              }
            | undefined;
        }>;
        updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
          };
          output: {
            appSlug?: string | undefined;
            appLink?: string | undefined;
          };
        }>;
        shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            email: string;
            isVerified: boolean;
          };
        }>;
        teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input:
            | {
                includeOrg?: boolean | undefined;
              }
            | undefined;
          output: (
            | {
                teamId: number;
                name: string;
                slug: string | null;
                image: string;
                role: import(".prisma/client").$Enums.MembershipRole;
                readOnly: boolean;
              }
            | {
                teamId: null;
                name: string | null;
                slug: string | null;
                image: string;
                readOnly: boolean;
              }
          )[];
        }>;
        connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            token: string;
          };
          output: {
            isBookingAlreadyAcceptedBySomeoneElse: boolean;
            meetingUrl: string;
          };
        }>;
        outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            offset: number;
            dateRange: {
              startDate: Date;
              endDate: Date;
            };
            toTeamUserId: number | null;
            reasonId: number;
            uuid?: string | null | undefined;
            forUserId?: number | null | undefined;
            notes?: string | null | undefined;
          };
          output: {} | undefined;
        }>;
        outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: {
            limit: number;
            cursor?: number | null | undefined;
            fetchTeamMembersEntries?: boolean | undefined;
            searchTerm?: string | undefined;
          };
          output: {
            rows: {
              user: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              };
              id: number;
              end: Date;
              start: Date;
              uuid: string;
              notes: string | null;
              toUser: {
                name: string | null;
                email: string;
                username: string | null;
              } | null;
              reason: {
                id: number;
                userId: number | null;
                reason: string;
                emoji: string;
              } | null;
              toUserId: number | null;
            }[];
            nextCursor: number | undefined;
            meta: {
              totalRowCount: number;
            };
          };
        }>;
        outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            outOfOfficeUid: string;
            userId?: number | null | undefined;
          };
          output: {};
        }>;
        addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            email: string;
          };
          output: {
            data: {
              id: number;
              userId: number;
              email: string;
              emailVerified: Date | null;
            };
            message: string;
          };
        }>;
        getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            startDate: Date;
            endDate: Date | null;
            timeZone: string;
          }[];
        }>;
        outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
          input: void;
          output: {
            id: number;
            userId: number | null;
            enabled: boolean;
            reason: string;
            emoji: string;
          }[];
        }>;
        addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            subscription: string;
          };
          output: {
            message: string;
          };
        }>;
        removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            subscription: string;
          };
          output: {
            message: string;
          };
        }>;
        markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
          input: {
            bookingUid: string;
            attendees?:
              | {
                  email: string;
                  noShow: boolean;
                }[]
              | undefined;
            noShowHost?: boolean | undefined;
          };
          output: {
            attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
            noShowHost: boolean;
            message: string;
          };
        }>;
      };
    }> & {
      loggedInViewerRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  includePasswordAdded?: boolean | undefined;
                }
              | undefined;
            output:
              | {
                  isTeamAdminOrOwner: boolean;
                  passwordAdded?: boolean | undefined;
                  secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                  }[];
                  isPremium: boolean | undefined;
                  organizationId: null;
                  organization: {
                    id: number;
                    isPlatform: boolean;
                    slug: string;
                    isOrgAdmin: boolean;
                  };
                  username: string | null;
                  profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                  profiles: never[];
                  organizationSettings?: undefined;
                  id: number;
                  name: string | null;
                  email: string;
                  emailMd5: string;
                  emailVerified: Date | null;
                  startTime: number;
                  endTime: number;
                  bufferTime: number;
                  locale: string;
                  timeFormat: number | null;
                  timeZone: string;
                  avatar: string;
                  avatarUrl: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  twoFactorEnabled: boolean;
                  disableImpersonation: boolean;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderEmail: string;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  bio: string | null;
                  weekStart: string;
                  theme: string | null;
                  appTheme: string | null;
                  hideBranding: boolean;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                  } | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                }
              | {
                  isTeamAdminOrOwner: boolean;
                  passwordAdded?: boolean | undefined;
                  secondaryEmails: {
                    id: number;
                    email: string;
                    emailVerified: Date | null;
                  }[];
                  isPremium: boolean | undefined;
                  organizationId: number | null;
                  organization: {
                    id: number | null;
                    isOrgAdmin: boolean;
                    metadata: {
                      requestedSlug?: string | null | undefined;
                      paymentId?: string | undefined;
                      subscriptionId?: string | null | undefined;
                      subscriptionItemId?: string | null | undefined;
                      orgSeats?: number | null | undefined;
                      orgPricePerSeat?: number | null | undefined;
                      migratedToOrgFrom?:
                        | {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                          }
                        | undefined;
                      billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    requestedSlug: string | null;
                    name?: string | undefined;
                    organizationSettings?:
                      | {
                          allowSEOIndexing: boolean;
                          lockEventTypeCreationForUsers: boolean;
                        }
                      | null
                      | undefined;
                    slug?: string | null | undefined;
                    logoUrl?: string | null | undefined;
                    isPrivate?: boolean | undefined;
                    bannerUrl?: string | null | undefined;
                    isPlatform?: boolean | undefined;
                  };
                  username: string | null;
                  profile:
                    | import("@calcom/types/UserProfile").UserAsPersonalProfile
                    | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                      }
                    | {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        user: {
                          name: string | null;
                          id: number;
                          locale: string | null;
                          startTime: number;
                          endTime: number;
                          email: string;
                          username: string | null;
                          avatarUrl: string | null;
                          bufferTime: number;
                          defaultScheduleId: number | null;
                          isPlatformManaged: boolean;
                        };
                        organization: {
                          name: string;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          organizationSettings: {
                            allowSEOIndexing: boolean;
                            lockEventTypeCreationForUsers: boolean;
                          } | null;
                          slug: string | null;
                          logoUrl: string | null;
                          isPrivate: boolean;
                          bannerUrl: string | null;
                          isPlatform: boolean;
                          members: {
                            id: number;
                            role: import(".prisma/client").$Enums.MembershipRole;
                            userId: number;
                            teamId: number;
                            disableImpersonation: boolean;
                            accepted: boolean;
                          }[];
                        } & Omit<
                          Pick<
                            {
                              id: number;
                              name: string;
                              slug: string | null;
                              logoUrl: string | null;
                              calVideoLogo: string | null;
                              appLogo: string | null;
                              appIconLogo: string | null;
                              bio: string | null;
                              hideBranding: boolean;
                              isPrivate: boolean;
                              hideBookATeamMember: boolean;
                              createdAt: Date;
                              metadata: import(".prisma/client").Prisma.JsonValue | null;
                              theme: string | null;
                              brandColor: string | null;
                              darkBrandColor: string | null;
                              bannerUrl: string | null;
                              parentId: number | null;
                              timeFormat: number | null;
                              timeZone: string;
                              weekStart: string;
                              isOrganization: boolean;
                              pendingPayment: boolean;
                              isPlatform: boolean;
                              createdByOAuthClientId: string | null;
                              smsLockState: import(".prisma/client").$Enums.SMSLockState;
                              smsLockReviewedByAdmin: boolean;
                              bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                              includeManagedEventsInLimits: boolean;
                            },
                            "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                          >,
                          "metadata"
                        > & {
                            requestedSlug: string | null;
                            metadata: {
                              requestedSlug: string | null;
                              paymentId?: string | undefined;
                              subscriptionId?: string | null | undefined;
                              subscriptionItemId?: string | null | undefined;
                              orgSeats?: number | null | undefined;
                              orgPricePerSeat?: number | null | undefined;
                              migratedToOrgFrom?:
                                | {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                  }
                                | undefined;
                              billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                          };
                        movedFromUser: {
                          id: number;
                        } | null;
                        id: number;
                        uid: string;
                        userId: number;
                        createdAt: Date & string;
                        updatedAt: Date & string;
                        username: string;
                        organizationId: number;
                        upId: string;
                      }
                    | ({
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                      } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                    | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                        name: string | null;
                        avatarUrl: string | null;
                        startTime: number;
                        endTime: number;
                        bufferTime: number;
                        username: string | null;
                        upId: string;
                        id: null;
                        organizationId: null;
                        organization: null;
                      });
                  profiles: import("@calcom/types/UserProfile").UserProfile[];
                  organizationSettings:
                    | {
                        allowSEOIndexing: boolean;
                        lockEventTypeCreationForUsers: boolean;
                      }
                    | null
                    | undefined;
                  id: number;
                  name: string | null;
                  email: string;
                  emailMd5: string;
                  emailVerified: Date | null;
                  startTime: number;
                  endTime: number;
                  bufferTime: number;
                  locale: string;
                  timeFormat: number | null;
                  timeZone: string;
                  avatar: string;
                  avatarUrl: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  twoFactorEnabled: boolean;
                  disableImpersonation: boolean;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderEmail: string;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  bio: string | null;
                  weekStart: string;
                  theme: string | null;
                  appTheme: string | null;
                  hideBranding: boolean;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  defaultBookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                  } | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                };
          }>;
          myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              sumOfBookings: number | undefined;
              sumOfCalendars: number | undefined;
              sumOfTeams: number | undefined;
              sumOfEventTypes: number | undefined;
              sumOfTeamEventTypes: number | undefined;
            };
          }>;
          platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              username: string | null;
              email: string;
              timeFormat: number | null;
              timeZone: string;
              defaultScheduleId: number | null;
              weekStart: string;
              organizationId: number | null;
              organization: {
                isPlatform: any;
                id: number | null;
              };
            };
          }>;
          deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              password: string;
              totpCode?: string | undefined;
            };
            output: void;
          }>;
          deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
          }>;
          connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  eventTypeId: number | null;
                  onboarding?: boolean | undefined;
                }
              | undefined;
            output: {
              connectedCalendars: (
                | {
                    integration: import("@calcom/types/App").App & {
                      credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                      credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                      locationOption: import("@calcom/app-store/utils").LocationOption | null;
                    };
                    credentialId: number;
                    delegationCredentialId: string | null;
                    error?: undefined;
                    primary?: undefined;
                    calendars?: undefined;
                  }
                | {
                    integration: import("@calcom/types/App").App & {
                      credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                      credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                      locationOption: import("@calcom/app-store/utils").LocationOption | null;
                    };
                    credentialId: number;
                    error: {
                      message: string;
                    };
                    delegationCredentialId?: undefined;
                    primary?: undefined;
                    calendars?: undefined;
                  }
                | {
                    integration: {
                      installed?: boolean;
                      type:
                        | `${string}_calendar`
                        | `${string}_messaging`
                        | `${string}_payment`
                        | `${string}_video`
                        | `${string}_other`
                        | `${string}_automation`
                        | `${string}_analytics`
                        | `${string}_crm`
                        | `${string}_other_calendar`;
                      title?: string;
                      name: string;
                      description: string;
                      variant:
                        | "calendar"
                        | "payment"
                        | "conferencing"
                        | "video"
                        | "other"
                        | "other_calendar"
                        | "automation"
                        | "crm";
                      slug: string;
                      category?: string;
                      categories: import(".prisma/client").AppCategories[];
                      extendsFeature?: "EventType" | "User";
                      logo: string;
                      publisher: string;
                      url: string;
                      docsUrl?: string;
                      verified?: boolean;
                      trending?: boolean;
                      rating?: number;
                      reviews?: number;
                      isGlobal?: boolean;
                      simplePath?: string;
                      email: string;
                      key?: import(".prisma/client").Prisma.JsonValue;
                      feeType?: "monthly" | "usage-based" | "one-time" | "free";
                      price?: number;
                      commission?: number;
                      licenseRequired?: boolean;
                      teamsPlanRequired?: {
                        upgradeUrl: string;
                      };
                      appData?: import("@calcom/types/App").AppData;
                      paid?: import("@calcom/types/App").PaidAppData;
                      dirName?: string;
                      isTemplate?: boolean;
                      __template?: string;
                      dependencies?: string[];
                      concurrentMeetings?: boolean;
                      createdAt?: string;
                      isOAuth?: boolean;
                      delegationCredential?: {
                        workspacePlatformSlug: string;
                      };
                      locationOption: import("@calcom/app-store/utils").LocationOption | null;
                    };
                    credentialId: number;
                    delegationCredentialId: string | null;
                    primary: {
                      readOnly: boolean;
                      primary: true | null;
                      isSelected: boolean;
                      credentialId: number;
                      delegationCredentialId: string | null;
                      name?: string;
                      email?: string;
                      primaryEmail?: string;
                      integrationTitle?: string;
                      id?: string | undefined;
                      error?: string | null | undefined;
                      userId?: number | undefined;
                      eventTypeId?: number | null | undefined;
                      integration?: string | undefined;
                      domainWideDelegationCredentialId?: string | null | undefined;
                      googleChannelId?: string | null | undefined;
                      googleChannelKind?: string | null | undefined;
                      googleChannelResourceId?: string | null | undefined;
                      googleChannelResourceUri?: string | null | undefined;
                      googleChannelExpiration?: string | null | undefined;
                      externalId: string;
                    };
                    calendars: {
                      readOnly: boolean;
                      primary: true | null;
                      isSelected: boolean;
                      credentialId: number;
                      delegationCredentialId: string | null;
                      name?: string;
                      email?: string;
                      primaryEmail?: string;
                      integrationTitle?: string;
                      id?: string | undefined;
                      error?: string | null | undefined;
                      userId?: number | undefined;
                      eventTypeId?: number | null | undefined;
                      integration?: string | undefined;
                      domainWideDelegationCredentialId?: string | null | undefined;
                      googleChannelId?: string | null | undefined;
                      googleChannelKind?: string | null | undefined;
                      googleChannelResourceId?: string | null | undefined;
                      googleChannelResourceUri?: string | null | undefined;
                      googleChannelExpiration?: string | null | undefined;
                      externalId: string;
                    }[];
                    error?: undefined;
                  }
                | {
                    integration: {
                      installed?: boolean;
                      type:
                        | `${string}_calendar`
                        | `${string}_messaging`
                        | `${string}_payment`
                        | `${string}_video`
                        | `${string}_other`
                        | `${string}_automation`
                        | `${string}_analytics`
                        | `${string}_crm`
                        | `${string}_other_calendar`;
                      title?: string;
                      name: string;
                      description: string;
                      variant:
                        | "calendar"
                        | "payment"
                        | "conferencing"
                        | "video"
                        | "other"
                        | "other_calendar"
                        | "automation"
                        | "crm";
                      slug: string;
                      category?: string;
                      categories: import(".prisma/client").AppCategories[];
                      extendsFeature?: "EventType" | "User";
                      logo: string;
                      publisher: string;
                      url: string;
                      docsUrl?: string;
                      verified?: boolean;
                      trending?: boolean;
                      rating?: number;
                      reviews?: number;
                      isGlobal?: boolean;
                      simplePath?: string;
                      email: string;
                      key?: import(".prisma/client").Prisma.JsonValue;
                      feeType?: "monthly" | "usage-based" | "one-time" | "free";
                      price?: number;
                      commission?: number;
                      licenseRequired?: boolean;
                      teamsPlanRequired?: {
                        upgradeUrl: string;
                      };
                      appData?: import("@calcom/types/App").AppData;
                      paid?: import("@calcom/types/App").PaidAppData;
                      dirName?: string;
                      isTemplate?: boolean;
                      __template?: string;
                      dependencies?: string[];
                      concurrentMeetings?: boolean;
                      createdAt?: string;
                      isOAuth?: boolean;
                      delegationCredential?: {
                        workspacePlatformSlug: string;
                      };
                      locationOption: import("@calcom/app-store/utils").LocationOption | null;
                    };
                    credentialId: number;
                    delegationCredentialId: string | null | undefined;
                    error: {
                      message: string;
                    };
                    primary?: undefined;
                    calendars?: undefined;
                  }
              )[];
              destinationCalendar: {
                primary?: boolean;
                name?: string;
                readOnly?: boolean;
                email?: string;
                primaryEmail: string | null;
                credentialId: number | null;
                integrationTitle?: string;
                id: string | number;
                error?: string | null | undefined;
                userId: number | null;
                eventTypeId: number | null;
                integration: string;
                delegationCredentialId: string | null;
                domainWideDelegationCredentialId: string | null;
                googleChannelId?: string | null | undefined;
                googleChannelKind?: string | null | undefined;
                googleChannelResourceId?: string | null | undefined;
                googleChannelResourceUri?: string | null | undefined;
                googleChannelExpiration?: string | null | undefined;
                externalId: string;
              };
            };
          }>;
          setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              integration: string;
              externalId: string;
              eventTypeId?: number | null | undefined;
              bookingId?: number | null | undefined;
            };
            output: void;
          }>;
          integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              variant?: string | undefined;
              exclude?: string[] | undefined;
              onlyInstalled?: boolean | undefined;
              includeTeamInstalledApps?: boolean | undefined;
              extendsFeature?: "EventType" | undefined;
              teamId?: number | null | undefined;
              sortByMostPopular?: boolean | undefined;
              sortByInstalledFirst?: boolean | undefined;
              categories?:
                | (
                    | "calendar"
                    | "messaging"
                    | "other"
                    | "payment"
                    | "video"
                    | "web3"
                    | "automation"
                    | "analytics"
                    | "conferencing"
                    | "crm"
                  )[]
                | undefined;
              appId?: string | undefined;
            };
            output: {
              items: {
                dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
                userCredentialIds: number[];
                invalidCredentialIds: number[];
                teams: ({
                  teamId: number;
                  name: string;
                  logoUrl: string | null;
                  credentialId: number;
                  isAdmin: boolean;
                } | null)[];
                isInstalled: boolean | undefined;
                isSetupAlready: boolean | undefined;
                credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
                installed?: boolean;
                type:
                  | `${string}_calendar`
                  | `${string}_messaging`
                  | `${string}_payment`
                  | `${string}_video`
                  | `${string}_other`
                  | `${string}_automation`
                  | `${string}_analytics`
                  | `${string}_crm`
                  | `${string}_other_calendar`;
                title?: string;
                name: string;
                description: string;
                variant:
                  | "calendar"
                  | "payment"
                  | "conferencing"
                  | "video"
                  | "other"
                  | "other_calendar"
                  | "automation"
                  | "crm";
                slug: string;
                category?: string;
                categories: import(".prisma/client").AppCategories[];
                extendsFeature?: "EventType" | "User";
                logo: string;
                publisher: string;
                url: string;
                docsUrl?: string;
                verified?: boolean;
                trending?: boolean;
                rating?: number;
                reviews?: number;
                isGlobal?: boolean;
                simplePath?: string;
                email: string;
                feeType?: "monthly" | "usage-based" | "one-time" | "free";
                price?: number;
                commission?: number;
                licenseRequired?: boolean;
                teamsPlanRequired?: {
                  upgradeUrl: string;
                };
                appData?: import("@calcom/types/App").AppData;
                paid?: import("@calcom/types/App").PaidAppData;
                dirName?: string;
                isTemplate?: boolean;
                __template?: string;
                dependencies?: string[];
                concurrentMeetings?: boolean;
                createdAt?: string;
                isOAuth?: boolean;
                delegationCredential?: {
                  workspacePlatformSlug: string;
                };
                locationOption: import("@calcom/app-store/utils").LocationOption | null;
                enabled: boolean;
              }[];
            };
          }>;
          appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              appId: string;
            };
            output: {
              installed?: boolean;
              type:
                | `${string}_calendar`
                | `${string}_messaging`
                | `${string}_payment`
                | `${string}_video`
                | `${string}_other`
                | `${string}_automation`
                | `${string}_analytics`
                | `${string}_crm`
                | `${string}_other_calendar`;
              title?: string;
              name: string;
              description: string;
              variant:
                | "calendar"
                | "payment"
                | "conferencing"
                | "video"
                | "other"
                | "other_calendar"
                | "automation"
                | "crm";
              slug: string;
              category?: string;
              categories: import(".prisma/client").AppCategories[];
              extendsFeature?: "EventType" | "User";
              logo: string;
              publisher: string;
              url: string;
              docsUrl?: string;
              verified?: boolean;
              trending?: boolean;
              rating?: number;
              reviews?: number;
              isGlobal?: boolean;
              simplePath?: string;
              email: string;
              key?: import(".prisma/client").Prisma.JsonValue;
              feeType?: "monthly" | "usage-based" | "one-time" | "free";
              price?: number;
              commission?: number;
              licenseRequired?: boolean;
              teamsPlanRequired?: {
                upgradeUrl: string;
              };
              appData?: import("@calcom/types/App").AppData;
              paid?: import("@calcom/types/App").PaidAppData;
              dirName?: string;
              isTemplate?: boolean;
              __template?: string;
              dependencies?: string[];
              concurrentMeetings?: boolean;
              createdAt?: string;
              isOAuth?: boolean;
              delegationCredential?: {
                workspacePlatformSlug: string;
              };
              locationOption: import("@calcom/app-store/utils").LocationOption | null;
              isInstalled: number;
            };
          }>;
          appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              appType: string;
            };
            output: {
              credentials: (
                | {
                    id: number;
                    delegatedToId: string;
                    userId: number;
                    user: {
                      email: string;
                    };
                    key: {
                      access_token: string;
                    };
                    invalid: boolean;
                    teamId: null;
                    team: null;
                    delegatedTo: {
                      serviceAccountKey: import("zod").objectOutputType<
                        {
                          private_key: import("zod").ZodString;
                          client_email: import("zod").ZodOptional<import("zod").ZodString>;
                          client_id: import("zod").ZodString;
                          tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                        },
                        import("zod").ZodTypeAny,
                        "passthrough"
                      >;
                    } | null;
                    type:
                      | `${string}_calendar`
                      | `${string}_messaging`
                      | `${string}_payment`
                      | `${string}_video`
                      | `${string}_other`
                      | `${string}_automation`
                      | `${string}_analytics`
                      | `${string}_crm`
                      | `${string}_other_calendar`;
                    appId: string;
                  }
                | ({
                    user: {
                      name: string | null;
                    } | null;
                    team: {
                      name: string;
                    } | null;
                  } & {
                    key: import(".prisma/client").Prisma.JsonValue;
                    id: number;
                    type: string;
                    userId: number | null;
                    teamId: number | null;
                    subscriptionId: string | null;
                    billingCycleStart: number | null;
                    appId: string | null;
                    paymentStatus: string | null;
                    invalid: boolean | null;
                  })
              )[];
              userAdminTeams: number[];
            };
          }>;
          stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              isPremium: boolean;
              username: string | null;
            };
          }>;
          updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              username?: string | undefined;
              name?: string | undefined;
              email?: string | undefined;
              bio?: string | undefined;
              avatarUrl?: string | null | undefined;
              timeZone?: string | undefined;
              weekStart?: string | undefined;
              hideBranding?: boolean | undefined;
              allowDynamicBooking?: boolean | undefined;
              allowSEOIndexing?: boolean | undefined;
              receiveMonthlyDigestEmail?: boolean | undefined;
              brandColor?: string | undefined;
              darkBrandColor?: string | undefined;
              theme?: string | null | undefined;
              appTheme?: string | null | undefined;
              completedOnboarding?: boolean | undefined;
              locale?: string | undefined;
              timeFormat?: number | undefined;
              disableImpersonation?: boolean | undefined;
              metadata?:
                | {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?:
                      | {
                          connected?: boolean | undefined;
                          selectedParam?: string | undefined;
                          sleepValue?: number | undefined;
                        }
                      | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?:
                      | {
                          appSlug?: string | undefined;
                          appLink?: string | undefined;
                        }
                      | undefined;
                    defaultBookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?:
                      | {
                          username?: string | null | undefined;
                          lastMigrationTime?: string | undefined;
                          reverted?: boolean | undefined;
                          revertTime?: string | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              travelSchedules?:
                | {
                    startDate: Date;
                    timeZone: string;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                  }[]
                | undefined;
              secondaryEmails?:
                | {
                    id: number;
                    email: string;
                    isDeleted?: boolean | undefined;
                  }[]
                | undefined;
            };
            output: {
              email: string | undefined;
              avatarUrl: string | null;
              hasEmailBeenChanged: boolean | "" | undefined;
              sendEmailVerification: boolean;
              username?: string | undefined;
              name?: string | undefined;
              bio?: string | undefined;
              timeZone?: string | undefined;
              weekStart?: string | undefined;
              hideBranding?: boolean | undefined;
              allowDynamicBooking?: boolean | undefined;
              allowSEOIndexing?: boolean | undefined;
              receiveMonthlyDigestEmail?: boolean | undefined;
              brandColor?: string | undefined;
              darkBrandColor?: string | undefined;
              theme?: string | null | undefined;
              appTheme?: string | null | undefined;
              completedOnboarding?: boolean | undefined;
              locale?: string | undefined;
              timeFormat?: number | undefined;
              disableImpersonation?: boolean | undefined;
              metadata?:
                | {
                    proPaidForByTeamId?: number | undefined;
                    stripeCustomerId?: string | undefined;
                    vitalSettings?:
                      | {
                          connected?: boolean | undefined;
                          selectedParam?: string | undefined;
                          sleepValue?: number | undefined;
                        }
                      | undefined;
                    isPremium?: boolean | undefined;
                    sessionTimeout?: number | undefined;
                    defaultConferencingApp?:
                      | {
                          appSlug?: string | undefined;
                          appLink?: string | undefined;
                        }
                      | undefined;
                    defaultBookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    emailChangeWaitingForVerification?: string | undefined;
                    migratedToOrgFrom?:
                      | {
                          username?: string | null | undefined;
                          lastMigrationTime?: string | undefined;
                          reverted?: boolean | undefined;
                          revertTime?: string | undefined;
                        }
                      | undefined;
                  }
                | null
                | undefined;
              travelSchedules?:
                | {
                    startDate: Date;
                    timeZone: string;
                    id?: number | undefined;
                    endDate?: Date | undefined;
                  }[]
                | undefined;
              secondaryEmails?:
                | {
                    id: number;
                    email: string;
                    isDeleted: boolean;
                  }[]
                | undefined;
            };
          }>;
          unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
              message: string;
            };
          }>;
          eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              ids: number[];
            };
            output: void;
          }>;
          routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              ids: string[];
            };
            output: void;
          }>;
          workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              ids: number[];
            };
            output: void;
          }>;
          submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              rating: string;
              comment: string;
            };
            output: void;
          }>;
          locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId?: number | undefined;
            };
            output: {
              label: string;
              options: {
                label: string;
                value: string;
                disabled?: boolean;
                icon?: string;
                slug?: string;
                credentialId?: number;
              }[];
            }[];
          }>;
          deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              externalId?: string | undefined;
              teamId?: number | undefined;
            };
            output: void;
          }>;
          bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: number;
          }>;
          getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              roomName: string;
            };
            output:
              | {
                  data: import("zod").objectOutputType<
                    {
                      id: import("zod").ZodString;
                      room_name: import("zod").ZodString;
                      start_ts: import("zod").ZodNumber;
                      status: import("zod").ZodString;
                      max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                      duration: import("zod").ZodNumber;
                      share_token: import("zod").ZodString;
                    },
                    import("zod").ZodTypeAny,
                    "passthrough"
                  >[];
                  total_count: number;
                }
              | {}
              | undefined;
          }>;
          getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              teamUpgradeBanner: ({
                team: {
                  children: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  }[];
                } & {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
              orgUpgradeBanner: ({
                team: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              } & {
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                userId: number;
                teamId: number;
                disableImpersonation: boolean;
                accepted: boolean;
              })[];
              verifyEmailBanner: boolean;
              calendarCredentialBanner: boolean;
              invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
            };
          }>;
          getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              recordingId: string;
            };
            output:
              | {
                  download_link: string;
                }
              | undefined;
          }>;
          getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output:
              | {
                  appSlug?: string | undefined;
                  appLink?: string | undefined;
                }
              | undefined;
          }>;
          updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              appSlug?: string | undefined;
              appLink?: string | undefined;
            };
            output: {
              appSlug?: string | undefined;
              appLink?: string | undefined;
            };
          }>;
          shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              email: string;
              isVerified: boolean;
            };
          }>;
          teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  includeOrg?: boolean | undefined;
                }
              | undefined;
            output: (
              | {
                  teamId: number;
                  name: string;
                  slug: string | null;
                  image: string;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  readOnly: boolean;
                }
              | {
                  teamId: null;
                  name: string | null;
                  slug: string | null;
                  image: string;
                  readOnly: boolean;
                }
            )[];
          }>;
          connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              token: string;
            };
            output: {
              isBookingAlreadyAcceptedBySomeoneElse: boolean;
              meetingUrl: string;
            };
          }>;
          outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              offset: number;
              dateRange: {
                startDate: Date;
                endDate: Date;
              };
              toTeamUserId: number | null;
              reasonId: number;
              uuid?: string | null | undefined;
              forUserId?: number | null | undefined;
              notes?: string | null | undefined;
            };
            output: {} | undefined;
          }>;
          outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              limit: number;
              cursor?: number | null | undefined;
              fetchTeamMembersEntries?: boolean | undefined;
              searchTerm?: string | undefined;
            };
            output: {
              rows: {
                user: {
                  name: string | null;
                  id: number;
                  role: import(".prisma/client").$Enums.UserPermissionRole;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  locale: string | null;
                  startTime: number;
                  endTime: number;
                  creationSource: import(".prisma/client").$Enums.CreationSource | null;
                  email: string;
                  timeZone: string;
                  username: string | null;
                  emailVerified: Date | null;
                  bio: string | null;
                  avatarUrl: string | null;
                  weekStart: string;
                  bufferTime: number;
                  hideBranding: boolean;
                  theme: string | null;
                  appTheme: string | null;
                  createdDate: Date;
                  trialEndsAt: Date | null;
                  lastActiveAt: Date | null;
                  defaultScheduleId: number | null;
                  completedOnboarding: boolean;
                  timeFormat: number | null;
                  twoFactorSecret: string | null;
                  twoFactorEnabled: boolean;
                  backupCodes: string | null;
                  identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                  identityProviderId: string | null;
                  invitedTo: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  allowDynamicBooking: boolean | null;
                  allowSEOIndexing: boolean | null;
                  receiveMonthlyDigestEmail: boolean | null;
                  verified: boolean | null;
                  disableImpersonation: boolean;
                  locked: boolean;
                  isPlatformManaged: boolean;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  referralLinkId: string | null;
                  organizationId: number | null;
                  movedToProfileId: number | null;
                };
                id: number;
                end: Date;
                start: Date;
                uuid: string;
                notes: string | null;
                toUser: {
                  name: string | null;
                  email: string;
                  username: string | null;
                } | null;
                reason: {
                  id: number;
                  userId: number | null;
                  reason: string;
                  emoji: string;
                } | null;
                toUserId: number | null;
              }[];
              nextCursor: number | undefined;
              meta: {
                totalRowCount: number;
              };
            };
          }>;
          outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              outOfOfficeUid: string;
              userId?: number | null | undefined;
            };
            output: {};
          }>;
          addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              email: string;
            };
            output: {
              data: {
                id: number;
                userId: number;
                email: string;
                emailVerified: Date | null;
              };
              message: string;
            };
          }>;
          getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              startDate: Date;
              endDate: Date | null;
              timeZone: string;
            }[];
          }>;
          outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              userId: number | null;
              enabled: boolean;
              reason: string;
              emoji: string;
            }[];
          }>;
          addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              subscription: string;
            };
            output: {
              message: string;
            };
          }>;
          removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              subscription: string;
            };
            output: {
              message: string;
            };
          }>;
          markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingUid: string;
              attendees?:
                | {
                    email: string;
                    noShow: boolean;
                  }[]
                | undefined;
              noShowHost?: boolean | undefined;
            };
            output: {
              attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
              noShowHost: boolean;
              message: string;
            };
          }>;
        }
      >;
      public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          session: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: import("next-auth").Session | null;
          }>;
          i18n: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              locale: string;
              CalComVersion: string;
            };
            output: {
              i18n: import("next-i18next").SSRConfig;
              locale: string;
            };
          }>;
          countryCode: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              countryCode: string;
            };
          }>;
          submitRating: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              rating: number;
              bookingUid: string;
              comment?: string | undefined;
            };
            output: void;
          }>;
          markHostAsNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              noShowHost: boolean;
              bookingUid: string;
            };
            output: {
              attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
              noShowHost: boolean;
              message: string;
            };
          }>;
          samlTenantProduct: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              email: string;
            };
            output: {
              tenant: string;
              product: string;
            };
          }>;
          stripeCheckoutSession: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              stripeCustomerId?: string | undefined;
              checkoutSessionId?: string | undefined;
            };
            output:
              | {
                  valid: boolean;
                  hasPaymentFailed?: undefined;
                  isPremiumUsername?: undefined;
                  customer?: undefined;
                }
              | {
                  valid: boolean;
                  hasPaymentFailed: boolean;
                  isPremiumUsername: boolean;
                  customer: {
                    username: string;
                    email: string;
                    stripeCustomerId: string;
                  };
                };
          }>;
          slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
            import("@trpc/server/unstable-core-do-not-import").RootConfig<{
              ctx: import("../server/createContext").InnerContext;
              meta: object;
              errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (
                  v: import("superjson/dist/types").Class,
                  options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                ) => void;
                registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                  transformer: Omit<
                    import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                    "name"
                  >,
                  name: string
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>,
            {
              getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  startTime: string;
                  endTime: string;
                  eventTypeId?: number | undefined;
                  eventTypeSlug?: string | undefined;
                  timeZone?: string | undefined;
                  usernameList?: string[] | undefined;
                  debug?: boolean | undefined;
                  duration?: string | undefined;
                  rescheduleUid?: string | null | undefined;
                  isTeamEvent?: boolean | undefined;
                  orgSlug?: string | null | undefined;
                  teamMemberEmail?: string | null | undefined;
                  routedTeamMemberIds?: number[] | null | undefined;
                  skipContactOwner?: boolean | null | undefined;
                  _enableTroubleshooter?: boolean | undefined;
                  _bypassCalendarBusyTimes?: boolean | undefined;
                  _shouldServeCache?: boolean | undefined;
                  routingFormResponseId?: number | undefined;
                  email?: string | null | undefined;
                };
                output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
              }>;
              reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  eventTypeId: number;
                  slotUtcStartDate: string;
                  slotUtcEndDate: string;
                  bookingUid?: string | undefined;
                  _isDryRun?: boolean | undefined;
                };
                output: {
                  uid: string;
                };
              }>;
              isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  eventTypeId: number;
                  slots: {
                    utcStartIso: string;
                    utcEndIso: string;
                  }[];
                };
                output: {
                  slots: {
                    status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                    utcStartIso: string;
                    utcEndIso: string;
                  }[];
                };
              }>;
              removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  uid: string | null;
                };
                output: void;
              }>;
            }
          >;
          event: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              username: string;
              eventSlug: string;
              org: string | null;
              isTeamEvent?: boolean | undefined;
              fromRedirectOfNonOrgLink?: boolean | undefined;
            };
            output:
              | {
                  bookingFields: {
                    name: string;
                    type:
                      | "number"
                      | "boolean"
                      | "phone"
                      | "name"
                      | "address"
                      | "select"
                      | "textarea"
                      | "text"
                      | "checkbox"
                      | "radio"
                      | "email"
                      | "url"
                      | "multiselect"
                      | "multiemail"
                      | "radioInput";
                    label?: string | undefined;
                    options?:
                      | {
                          label: string;
                          value: string;
                        }[]
                      | undefined;
                    required?: boolean | undefined;
                    placeholder?: string | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?:
                      | Record<
                          string,
                          {
                            type: "phone" | "address" | "text";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                          }
                        >
                      | undefined;
                    minLength?: number | undefined;
                    excludeEmails?: string | undefined;
                    requireEmails?: string | undefined;
                    variant?: string | undefined;
                    variantsConfig?:
                      | {
                          variants: Record<
                            string,
                            {
                              fields: {
                                name: string;
                                type:
                                  | "number"
                                  | "boolean"
                                  | "phone"
                                  | "name"
                                  | "address"
                                  | "select"
                                  | "textarea"
                                  | "text"
                                  | "checkbox"
                                  | "radio"
                                  | "email"
                                  | "url"
                                  | "multiselect"
                                  | "multiemail"
                                  | "radioInput";
                                label?: string | undefined;
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                minLength?: number | undefined;
                                excludeEmails?: string | undefined;
                                requireEmails?: string | undefined;
                              }[];
                            }
                          >;
                        }
                      | undefined;
                    views?:
                      | {
                          id: string;
                          label: string;
                          description?: string | undefined;
                        }[]
                      | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?:
                      | "user"
                      | "system"
                      | "system-but-optional"
                      | "system-but-hidden"
                      | "user-readonly"
                      | undefined;
                    sources?:
                      | {
                          id: string;
                          type: string;
                          label: string;
                          editUrl?: string | undefined;
                          fieldRequired?: boolean | undefined;
                        }[]
                      | undefined;
                    disableOnPrefill?: boolean | undefined;
                  }[] &
                    import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                  subsetOfUsers: (
                    | {
                        metadata: undefined;
                        bookerUrl: string;
                        profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                        name: string | null;
                        id: number;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        emailVerified: Date | null;
                        bio: string | null;
                        avatarUrl: string | null;
                        weekStart: string;
                        bufferTime: number;
                        hideBranding: boolean;
                        theme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        lastActiveAt: Date | null;
                        completedOnboarding: boolean;
                        timeFormat: number | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        isPlatformManaged: boolean;
                        movedToProfileId: number | null;
                        teams: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      }
                    | {
                        metadata: undefined;
                        bookerUrl: string;
                        profile: {
                          organization: Omit<
                            {
                              name: string;
                              id: number;
                              metadata: import(".prisma/client").Prisma.JsonValue;
                              organizationSettings: {
                                allowSEOIndexing: boolean;
                                orgProfileRedirectsToVerifiedDomain: boolean;
                              } | null;
                              slug: string | null;
                              logoUrl: string | null;
                              bannerUrl: string | null;
                              isPlatform: boolean;
                            } & Omit<
                              Pick<
                                {
                                  id: number;
                                  name: string;
                                  slug: string | null;
                                  logoUrl: string | null;
                                  calVideoLogo: string | null;
                                  appLogo: string | null;
                                  appIconLogo: string | null;
                                  bio: string | null;
                                  hideBranding: boolean;
                                  isPrivate: boolean;
                                  hideBookATeamMember: boolean;
                                  createdAt: Date;
                                  metadata: import(".prisma/client").Prisma.JsonValue | null;
                                  theme: string | null;
                                  brandColor: string | null;
                                  darkBrandColor: string | null;
                                  bannerUrl: string | null;
                                  parentId: number | null;
                                  timeFormat: number | null;
                                  timeZone: string;
                                  weekStart: string;
                                  isOrganization: boolean;
                                  pendingPayment: boolean;
                                  isPlatform: boolean;
                                  createdByOAuthClientId: string | null;
                                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                  smsLockReviewedByAdmin: boolean;
                                  bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                  includeManagedEventsInLimits: boolean;
                                },
                                "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                              >,
                              "metadata"
                            > & {
                                requestedSlug: string | null;
                                metadata: {
                                  requestedSlug: string | null;
                                  paymentId?: string | undefined;
                                  subscriptionId?: string | null | undefined;
                                  subscriptionItemId?: string | null | undefined;
                                  orgSeats?: number | null | undefined;
                                  orgPricePerSeat?: number | null | undefined;
                                  migratedToOrgFrom?:
                                    | {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                      }
                                    | undefined;
                                  billingPeriod?:
                                    | import("@calcom/prisma/zod-utils").BillingPeriod
                                    | undefined;
                                };
                              },
                            "metadata"
                          > & {
                            requestedSlug: string | null;
                            metadata: {
                              requestedSlug: string | null;
                              paymentId?: string | undefined;
                              subscriptionId?: string | null | undefined;
                              subscriptionItemId?: string | null | undefined;
                              orgSeats?: number | null | undefined;
                              orgPricePerSeat?: number | null | undefined;
                              migratedToOrgFrom?:
                                | {
                                    teamSlug?: string | null | undefined;
                                    lastMigrationTime?: string | undefined;
                                    reverted?: boolean | undefined;
                                    lastRevertTime?: string | undefined;
                                  }
                                | undefined;
                              billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                            };
                          };
                          id: number;
                          uid: string;
                          userId: number;
                          createdAt: Date & string;
                          updatedAt: Date & string;
                          username: string;
                          organizationId: number;
                          upId: string;
                        };
                        name: string | null;
                        id: number;
                        locale: string | null;
                        startTime: number;
                        endTime: number;
                        email: string;
                        timeZone: string;
                        username: string | null;
                        emailVerified: Date | null;
                        bio: string | null;
                        avatarUrl: string | null;
                        weekStart: string;
                        bufferTime: number;
                        hideBranding: boolean;
                        theme: string | null;
                        createdDate: Date;
                        trialEndsAt: Date | null;
                        lastActiveAt: Date | null;
                        completedOnboarding: boolean;
                        timeFormat: number | null;
                        twoFactorSecret: string | null;
                        twoFactorEnabled: boolean;
                        backupCodes: string | null;
                        identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                        identityProviderId: string | null;
                        invitedTo: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        allowDynamicBooking: boolean | null;
                        allowSEOIndexing: boolean | null;
                        receiveMonthlyDigestEmail: boolean | null;
                        verified: boolean | null;
                        disableImpersonation: boolean;
                        locked: boolean;
                        isPlatformManaged: boolean;
                        movedToProfileId: number | null;
                        teams: {
                          id: number;
                          role: import(".prisma/client").$Enums.MembershipRole;
                          userId: number;
                          teamId: number;
                          disableImpersonation: boolean;
                          accepted: boolean;
                        }[];
                      }
                  )[];
                  users:
                    | (
                        | {
                            metadata: undefined;
                            bookerUrl: string;
                            profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
                            name: string | null;
                            id: number;
                            locale: string | null;
                            startTime: number;
                            endTime: number;
                            email: string;
                            timeZone: string;
                            username: string | null;
                            emailVerified: Date | null;
                            bio: string | null;
                            avatarUrl: string | null;
                            weekStart: string;
                            bufferTime: number;
                            hideBranding: boolean;
                            theme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            lastActiveAt: Date | null;
                            completedOnboarding: boolean;
                            timeFormat: number | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            verified: boolean | null;
                            disableImpersonation: boolean;
                            locked: boolean;
                            isPlatformManaged: boolean;
                            movedToProfileId: number | null;
                            teams: {
                              id: number;
                              role: import(".prisma/client").$Enums.MembershipRole;
                              userId: number;
                              teamId: number;
                              disableImpersonation: boolean;
                              accepted: boolean;
                            }[];
                          }
                        | {
                            metadata: undefined;
                            bookerUrl: string;
                            profile: {
                              organization: Omit<
                                {
                                  name: string;
                                  id: number;
                                  metadata: import(".prisma/client").Prisma.JsonValue;
                                  organizationSettings: {
                                    allowSEOIndexing: boolean;
                                    orgProfileRedirectsToVerifiedDomain: boolean;
                                  } | null;
                                  slug: string | null;
                                  logoUrl: string | null;
                                  bannerUrl: string | null;
                                  isPlatform: boolean;
                                } & Omit<
                                  Pick<
                                    {
                                      id: number;
                                      name: string;
                                      slug: string | null;
                                      logoUrl: string | null;
                                      calVideoLogo: string | null;
                                      appLogo: string | null;
                                      appIconLogo: string | null;
                                      bio: string | null;
                                      hideBranding: boolean;
                                      isPrivate: boolean;
                                      hideBookATeamMember: boolean;
                                      createdAt: Date;
                                      metadata: import(".prisma/client").Prisma.JsonValue | null;
                                      theme: string | null;
                                      brandColor: string | null;
                                      darkBrandColor: string | null;
                                      bannerUrl: string | null;
                                      parentId: number | null;
                                      timeFormat: number | null;
                                      timeZone: string;
                                      weekStart: string;
                                      isOrganization: boolean;
                                      pendingPayment: boolean;
                                      isPlatform: boolean;
                                      createdByOAuthClientId: string | null;
                                      smsLockState: import(".prisma/client").$Enums.SMSLockState;
                                      smsLockReviewedByAdmin: boolean;
                                      bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                                      includeManagedEventsInLimits: boolean;
                                    },
                                    | "name"
                                    | "id"
                                    | "metadata"
                                    | "slug"
                                    | "logoUrl"
                                    | "bannerUrl"
                                    | "isPlatform"
                                  >,
                                  "metadata"
                                > & {
                                    requestedSlug: string | null;
                                    metadata: {
                                      requestedSlug: string | null;
                                      paymentId?: string | undefined;
                                      subscriptionId?: string | null | undefined;
                                      subscriptionItemId?: string | null | undefined;
                                      orgSeats?: number | null | undefined;
                                      orgPricePerSeat?: number | null | undefined;
                                      migratedToOrgFrom?:
                                        | {
                                            teamSlug?: string | null | undefined;
                                            lastMigrationTime?: string | undefined;
                                            reverted?: boolean | undefined;
                                            lastRevertTime?: string | undefined;
                                          }
                                        | undefined;
                                      billingPeriod?:
                                        | import("@calcom/prisma/zod-utils").BillingPeriod
                                        | undefined;
                                    };
                                  },
                                "metadata"
                              > & {
                                requestedSlug: string | null;
                                metadata: {
                                  requestedSlug: string | null;
                                  paymentId?: string | undefined;
                                  subscriptionId?: string | null | undefined;
                                  subscriptionItemId?: string | null | undefined;
                                  orgSeats?: number | null | undefined;
                                  orgPricePerSeat?: number | null | undefined;
                                  migratedToOrgFrom?:
                                    | {
                                        teamSlug?: string | null | undefined;
                                        lastMigrationTime?: string | undefined;
                                        reverted?: boolean | undefined;
                                        lastRevertTime?: string | undefined;
                                      }
                                    | undefined;
                                  billingPeriod?:
                                    | import("@calcom/prisma/zod-utils").BillingPeriod
                                    | undefined;
                                };
                              };
                              id: number;
                              uid: string;
                              userId: number;
                              createdAt: Date & string;
                              updatedAt: Date & string;
                              username: string;
                              organizationId: number;
                              upId: string;
                            };
                            name: string | null;
                            id: number;
                            locale: string | null;
                            startTime: number;
                            endTime: number;
                            email: string;
                            timeZone: string;
                            username: string | null;
                            emailVerified: Date | null;
                            bio: string | null;
                            avatarUrl: string | null;
                            weekStart: string;
                            bufferTime: number;
                            hideBranding: boolean;
                            theme: string | null;
                            createdDate: Date;
                            trialEndsAt: Date | null;
                            lastActiveAt: Date | null;
                            completedOnboarding: boolean;
                            timeFormat: number | null;
                            twoFactorSecret: string | null;
                            twoFactorEnabled: boolean;
                            backupCodes: string | null;
                            identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                            identityProviderId: string | null;
                            invitedTo: number | null;
                            brandColor: string | null;
                            darkBrandColor: string | null;
                            allowDynamicBooking: boolean | null;
                            allowSEOIndexing: boolean | null;
                            receiveMonthlyDigestEmail: boolean | null;
                            verified: boolean | null;
                            disableImpersonation: boolean;
                            locked: boolean;
                            isPlatformManaged: boolean;
                            movedToProfileId: number | null;
                            teams: {
                              id: number;
                              role: import(".prisma/client").$Enums.MembershipRole;
                              userId: number;
                              teamId: number;
                              disableImpersonation: boolean;
                              accepted: boolean;
                            }[];
                          }
                      )[]
                    | undefined;
                  locations: (Pick<
                    Partial<import("@calcom/app-store/locations").LocationObject>,
                    "link" | "address"
                  > &
                    Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                  profile: {
                    image?: string | undefined;
                    name?: string | undefined;
                    username?: string | null | undefined;
                    weekStart: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    theme: null;
                    bookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                  };
                  entity: {
                    considerUnpublished: boolean;
                    fromRedirectOfNonOrgLink: boolean;
                    orgSlug: string | null;
                    name: string | null;
                    teamSlug: null;
                    logoUrl: null;
                  };
                  isInstantEvent: boolean;
                  instantMeetingParameters: never[];
                  showInstantEventConnectNowModal: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  fieldTranslations: never[];
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?:
                      | {
                          alby?:
                            | {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                              }
                            | undefined;
                          basecamp3?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          campsite?: {} | undefined;
                          closecom?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          dailyvideo?: {} | undefined;
                          fathom?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          feishucalendar?: {} | undefined;
                          ga4?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          giphy?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                              }
                            | undefined;
                          googlecalendar?: {} | undefined;
                          googlevideo?: {} | undefined;
                          gtm?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          hitpay?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          hubspot?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          insihts?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          intercom?: {} | undefined;
                          jelly?: {} | undefined;
                          jitsivideo?: {} | undefined;
                          larkcalendar?: {} | undefined;
                          make?: {} | undefined;
                          matomo?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          metapixel?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          "mock-payment-app"?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          nextcloudtalk?: {} | undefined;
                          office365calendar?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          office365video?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          paypal?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          "pipedrive-crm"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          plausible?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          posthog?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                              }
                            | undefined;
                          qr_code?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "routing-forms"?: any;
                          salesforce?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                roundRobinSkipCheckRecordOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                                createEventOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                createNewContactUnderAccount?: boolean | undefined;
                                createLeadIfAccountNull?: boolean | undefined;
                                onBookingWriteToEventObject?: boolean | undefined;
                                onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                createEventOnLeadCheckForContact?: boolean | undefined;
                                onBookingChangeRecordOwner?: boolean | undefined;
                                onBookingChangeRecordOwnerName?: string | undefined;
                                sendNoShowAttendeeData?: boolean | undefined;
                                sendNoShowAttendeeDataField?: string | undefined;
                                onBookingWriteToRecord?: boolean | undefined;
                                onBookingWriteToRecordFields?:
                                  | Record<
                                      string,
                                      {
                                        value: string;
                                        fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                        whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                      }
                                    >
                                  | undefined;
                                ignoreGuests?: boolean | undefined;
                              }
                            | undefined;
                          shimmervideo?: {} | undefined;
                          stripe?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                refundDaysCount?: number | undefined;
                                refundCountCalendarDays?: boolean | undefined;
                              }
                            | undefined;
                          tandemvideo?: {} | undefined;
                          "booking-pages-tag"?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "event-type-app-card"?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          twipla?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          umami?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          vital?: {} | undefined;
                          webex?: {} | undefined;
                          wordpress?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zapier?: {} | undefined;
                          "zoho-bigin"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zohocalendar?: {} | undefined;
                          zohocrm?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zoomvideo?: {} | undefined;
                        }
                      | undefined;
                  } | null;
                  isDynamic: boolean;
                  periodCountCalendarDays: boolean;
                  periodStartDate: null;
                  periodEndDate: null;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  periodType: "UNLIMITED";
                  periodDays: null;
                  slotInterval: null;
                  offsetStart: number;
                  customInputs: {
                    id: number;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    label: string;
                    eventTypeId: number;
                    required: boolean;
                    placeholder: string;
                    options?:
                      | {
                          type: string;
                          label: string;
                        }[]
                      | null
                      | undefined;
                    hasToBeCreated?: boolean | undefined;
                  }[];
                  disableGuests: boolean;
                  minimumBookingNotice: number;
                  schedule: null;
                  timeZone: null;
                  successRedirectUrl: string;
                  forwardParamsSuccessRedirect: boolean;
                  teamId: null;
                  scheduleId: null;
                  availability: never[];
                  price: number;
                  currency: string;
                  schedulingType: "COLLECTIVE";
                  seatsPerTimeSlot: null;
                  seatsShowAttendees: null;
                  seatsShowAvailabilityCount: null;
                  onlyShowFirstAvailableSlot: boolean;
                  allowReschedulingPastBookings: boolean;
                  id: number;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  recurringEvent: null;
                  destinationCalendar: null;
                  team: null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  bookingLimits: null;
                  durationLimits: null;
                  hidden: boolean;
                  userId: number;
                  parentId: null;
                  parent: null;
                  owner: null;
                  workflows: never[];
                  hosts: never[];
                  subsetOfHosts: never[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: null;
                  isRRWeightsEnabled: boolean;
                  rescheduleWithSameRoundRobinHost: boolean;
                  useEventTypeDestinationCalendarEmail: boolean;
                  secondaryEmailId: null;
                  secondaryEmail: null;
                  maxLeadThreshold: null;
                  useEventLevelSelectedCalendars: boolean;
                  length: number;
                  slug: string;
                  title: string;
                  eventName: string;
                  description: string;
                  descriptionAsSafeHTML: string;
                  position: number;
                }
              | {
                  bookerLayouts: {
                    enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                    defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                  } | null;
                  description: string;
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?:
                      | {
                          alby?:
                            | {
                                price: number;
                                currency: string;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                              }
                            | undefined;
                          basecamp3?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          campsite?: {} | undefined;
                          closecom?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          dailyvideo?: {} | undefined;
                          fathom?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          feishucalendar?: {} | undefined;
                          ga4?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          giphy?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                thankYouPage?: string | undefined;
                              }
                            | undefined;
                          googlecalendar?: {} | undefined;
                          googlevideo?: {} | undefined;
                          gtm?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          hitpay?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          hubspot?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          insihts?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          intercom?: {} | undefined;
                          jelly?: {} | undefined;
                          jitsivideo?: {} | undefined;
                          larkcalendar?: {} | undefined;
                          make?: {} | undefined;
                          matomo?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                MATOMO_URL?: string | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          metapixel?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          "mock-payment-app"?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          nextcloudtalk?: {} | undefined;
                          office365calendar?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          office365video?:
                            | {
                                client_id: string;
                                client_secret: string;
                              }
                            | undefined;
                          paypal?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                              }
                            | undefined;
                          "pipedrive-crm"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          plausible?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                PLAUSIBLE_URL?: string | undefined;
                                trackingId?: string | undefined;
                              }
                            | undefined;
                          posthog?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                TRACKING_ID?: string | undefined;
                                API_HOST?: string | undefined;
                              }
                            | undefined;
                          qr_code?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "routing-forms"?: any;
                          salesforce?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                roundRobinLeadSkip?: boolean | undefined;
                                roundRobinSkipCheckRecordOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                                skipContactCreation?: boolean | undefined;
                                createEventOn?:
                                  | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                  | undefined;
                                createNewContactUnderAccount?: boolean | undefined;
                                createLeadIfAccountNull?: boolean | undefined;
                                onBookingWriteToEventObject?: boolean | undefined;
                                onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                                createEventOnLeadCheckForContact?: boolean | undefined;
                                onBookingChangeRecordOwner?: boolean | undefined;
                                onBookingChangeRecordOwnerName?: string | undefined;
                                sendNoShowAttendeeData?: boolean | undefined;
                                sendNoShowAttendeeDataField?: string | undefined;
                                onBookingWriteToRecord?: boolean | undefined;
                                onBookingWriteToRecordFields?:
                                  | Record<
                                      string,
                                      {
                                        value: string;
                                        fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                        whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                      }
                                    >
                                  | undefined;
                                ignoreGuests?: boolean | undefined;
                              }
                            | undefined;
                          shimmervideo?: {} | undefined;
                          stripe?:
                            | {
                                price: number;
                                currency: string;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                                paymentOption?: string | undefined;
                                enabled?: boolean | undefined;
                                refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                                refundDaysCount?: number | undefined;
                                refundCountCalendarDays?: boolean | undefined;
                              }
                            | undefined;
                          tandemvideo?: {} | undefined;
                          "booking-pages-tag"?:
                            | {
                                trackingId: string;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          "event-type-app-card"?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          twipla?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                              }
                            | undefined;
                          umami?:
                            | {
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                                SITE_ID?: string | undefined;
                                SCRIPT_URL?: string | undefined;
                              }
                            | undefined;
                          vital?: {} | undefined;
                          webex?: {} | undefined;
                          wordpress?:
                            | {
                                isSunrise: boolean;
                                credentialId?: number | undefined;
                                enabled?: boolean | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zapier?: {} | undefined;
                          "zoho-bigin"?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zohocalendar?: {} | undefined;
                          zohocrm?:
                            | {
                                enabled?: boolean | undefined;
                                credentialId?: number | undefined;
                                appCategories?: string[] | undefined;
                              }
                            | undefined;
                          zoomvideo?: {} | undefined;
                        }
                      | undefined;
                  } | null;
                  customInputs: {
                    id: number;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    label: string;
                    eventTypeId: number;
                    required: boolean;
                    placeholder: string;
                    options?:
                      | {
                          type: string;
                          label: string;
                        }[]
                      | null
                      | undefined;
                    hasToBeCreated?: boolean | undefined;
                  }[];
                  locations: (Pick<
                    Partial<import("@calcom/app-store/locations").LocationObject>,
                    "link" | "address"
                  > &
                    Omit<import("@calcom/app-store/locations").LocationObject, "link" | "address">)[];
                  bookingFields: {
                    name: string;
                    type:
                      | "number"
                      | "boolean"
                      | "phone"
                      | "name"
                      | "address"
                      | "select"
                      | "textarea"
                      | "text"
                      | "checkbox"
                      | "radio"
                      | "email"
                      | "url"
                      | "multiselect"
                      | "multiemail"
                      | "radioInput";
                    label?: string | undefined;
                    options?:
                      | {
                          label: string;
                          value: string;
                        }[]
                      | undefined;
                    required?: boolean | undefined;
                    placeholder?: string | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?:
                      | Record<
                          string,
                          {
                            type: "phone" | "address" | "text";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                          }
                        >
                      | undefined;
                    minLength?: number | undefined;
                    excludeEmails?: string | undefined;
                    requireEmails?: string | undefined;
                    variant?: string | undefined;
                    variantsConfig?:
                      | {
                          variants: Record<
                            string,
                            {
                              fields: {
                                name: string;
                                type:
                                  | "number"
                                  | "boolean"
                                  | "phone"
                                  | "name"
                                  | "address"
                                  | "select"
                                  | "textarea"
                                  | "text"
                                  | "checkbox"
                                  | "radio"
                                  | "email"
                                  | "url"
                                  | "multiselect"
                                  | "multiemail"
                                  | "radioInput";
                                label?: string | undefined;
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                minLength?: number | undefined;
                                excludeEmails?: string | undefined;
                                requireEmails?: string | undefined;
                              }[];
                            }
                          >;
                        }
                      | undefined;
                    views?:
                      | {
                          id: string;
                          label: string;
                          description?: string | undefined;
                        }[]
                      | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?:
                      | "user"
                      | "system"
                      | "system-but-optional"
                      | "system-but-hidden"
                      | "user-readonly"
                      | undefined;
                    sources?:
                      | {
                          id: string;
                          type: string;
                          label: string;
                          editUrl?: string | undefined;
                          fieldRequired?: boolean | undefined;
                        }[]
                      | undefined;
                    disableOnPrefill?: boolean | undefined;
                  }[] &
                    import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
                  recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                  profile: {
                    username: string | null | undefined;
                    name: string | null;
                    weekStart: string;
                    image: string;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    theme: string | null;
                    bookerLayouts: {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    } | null;
                  };
                  subsetOfUsers: {
                    username: string | null;
                    name: string | null;
                    weekStart: string;
                    organizationId: any;
                    avatarUrl: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    bookerUrl: string;
                  }[];
                  users:
                    | {
                        username: string | null;
                        name: string | null;
                        weekStart: string;
                        organizationId: any;
                        avatarUrl: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                        bookerUrl: string;
                      }[]
                    | undefined;
                  entity: {
                    logoUrl?: string | undefined;
                    name: any;
                    fromRedirectOfNonOrgLink: boolean;
                    considerUnpublished: boolean;
                    orgSlug: string | null;
                    teamSlug: string | null;
                  };
                  isDynamic: boolean;
                  isInstantEvent: boolean;
                  showInstantEventConnectNowModal: boolean;
                  instantMeetingParameters: string[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                  assignAllTeamMembers: boolean;
                  owner:
                    | ({
                        name: string | null;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        username: string | null;
                        avatarUrl: string | null;
                        weekStart: string;
                        theme: string | null;
                        defaultScheduleId: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        organization: {
                          name: string;
                          id: number;
                          slug: string | null;
                          bannerUrl: string | null;
                        } | null;
                      } & {
                        nonProfileUsername: string | null;
                        profile: import("@calcom/types/UserProfile").UserProfile;
                      })
                    | null;
                  subsetOfHosts: {
                    user: {
                      name: string | null;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      username: string | null;
                      avatarUrl: string | null;
                      weekStart: string;
                      theme: string | null;
                      defaultScheduleId: number | null;
                      brandColor: string | null;
                      darkBrandColor: string | null;
                      organization: {
                        name: string;
                        id: number;
                        slug: string | null;
                        bannerUrl: string | null;
                      } | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    };
                  }[];
                  hosts:
                    | {
                        user: {
                          name: string | null;
                          id: number;
                          metadata: import(".prisma/client").Prisma.JsonValue;
                          username: string | null;
                          avatarUrl: string | null;
                          weekStart: string;
                          theme: string | null;
                          defaultScheduleId: number | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          organization: {
                            name: string;
                            id: number;
                            slug: string | null;
                            bannerUrl: string | null;
                          } | null;
                        } & {
                          nonProfileUsername: string | null;
                          profile: import("@calcom/types/UserProfile").UserProfile;
                        };
                      }[]
                    | undefined;
                  id: number;
                  length: number;
                  title: string;
                  team: {
                    name: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      name: string;
                      slug: string | null;
                      logoUrl: string | null;
                      bannerUrl: string | null;
                    } | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    logoUrl: string | null;
                    isPrivate: boolean;
                  } | null;
                  schedule: {
                    id: number;
                    timeZone: string | null;
                  } | null;
                  slug: string;
                  hidden: boolean;
                  teamId: number | null;
                  eventName: string | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresBookerEmailVerification: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  disableGuests: boolean;
                  seatsPerTimeSlot: number | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  price: number;
                  currency: string;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  rescheduleWithSameRoundRobinHost: boolean;
                  workflows: ({
                    workflow: {
                      steps: {
                        id: number;
                        template: import(".prisma/client").$Enums.WorkflowTemplates;
                        action: import(".prisma/client").$Enums.WorkflowActions;
                        workflowId: number;
                        stepNumber: number;
                        sendTo: string | null;
                        reminderBody: string | null;
                        emailSubject: string | null;
                        numberRequired: boolean | null;
                        sender: string | null;
                        numberVerificationPending: boolean;
                        includeCalendarEvent: boolean;
                      }[];
                    } & {
                      name: string;
                      id: number;
                      time: number | null;
                      userId: number | null;
                      position: number;
                      teamId: number | null;
                      isActiveOnAll: boolean;
                      trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                      timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    };
                  } & {
                    id: number;
                    eventTypeId: number;
                    workflowId: number;
                  })[];
                  instantMeetingSchedule: {
                    id: number;
                    timeZone: string | null;
                  } | null;
                  fieldTranslations: {
                    field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                    targetLocale: string;
                    translatedText: string;
                  }[];
                }
              | null;
          }>;
          ssoConnections: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output:
              | {
                  connectionExists: null;
                }
              | {
                  connectionExists: boolean;
                };
          }>;
          checkIfUserEmailVerificationRequired: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              email: string;
              userSessionEmail?: string | undefined;
            };
            output: boolean;
          }>;
        }
      >;
      auth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          changePassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              oldPassword: string;
              newPassword: string;
            };
            output: void;
          }>;
          verifyPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              passwordInput: string;
            };
            output: void;
          }>;
          verifyCodeUnAuthenticated: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              code: string;
              email: string;
            };
            output: true;
          }>;
          sendVerifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              email: string;
              username?: string | undefined;
              language?: string | undefined;
              isVerifyingEmail?: boolean | undefined;
            };
            output: {
              ok: boolean;
              skipped: boolean;
            };
          }>;
          resendVerifyEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input:
              | {
                  email: string;
                }
              | undefined;
            output: {
              ok: boolean;
              skipped: boolean;
            };
          }>;
          createAccountPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: void;
          }>;
        }
      >;
      deploymentSetup: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              licenseKey?: string | undefined;
            };
            output: void;
          }>;
        }
      >;
      bookings: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              filters: {
                teamIds?: number[] | undefined;
                userIds?: number[] | undefined;
                status?: "past" | "upcoming" | "recurring" | "cancelled" | "unconfirmed" | undefined;
                eventTypeIds?: number[] | undefined;
                attendeeEmail?:
                  | string
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                      data: {
                        operator:
                          | "endsWith"
                          | "startsWith"
                          | "equals"
                          | "notEquals"
                          | "contains"
                          | "notContains"
                          | "isEmpty"
                          | "isNotEmpty";
                        operand: string;
                      };
                    }
                  | undefined;
                attendeeName?:
                  | string
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                      data: {
                        operator:
                          | "endsWith"
                          | "startsWith"
                          | "equals"
                          | "notEquals"
                          | "contains"
                          | "notContains"
                          | "isEmpty"
                          | "isNotEmpty";
                        operand: string;
                      };
                    }
                  | undefined;
                afterStartDate?: string | undefined;
                beforeEndDate?: string | undefined;
                afterUpdatedDate?: string | undefined;
                beforeUpdatedDate?: string | undefined;
              };
              limit?: number | null | undefined;
              cursor?: number | null | undefined;
            };
            output: {
              bookings: {
                eventType: {
                  recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                  eventTypeColor: {
                    lightEventTypeColor: string;
                    darkEventTypeColor: string;
                  } | null;
                  price: number;
                  currency: string;
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  id?: number | undefined;
                  length?: number | undefined;
                  title?: string | undefined;
                  team?:
                    | {
                        name: string;
                        id: number;
                        slug: string | null;
                      }
                    | null
                    | undefined;
                  slug?: string | undefined;
                  eventName?: string | null | undefined;
                  disableGuests?: boolean | undefined;
                  seatsShowAttendees?: boolean | null | undefined;
                  seatsShowAvailabilityCount?: boolean | null | undefined;
                  schedulingType?: import(".prisma/client").$Enums.SchedulingType | null | undefined;
                  allowReschedulingPastBookings?: boolean | undefined;
                };
                startTime: string;
                endTime: string;
                payment: {
                  currency: string;
                  paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
                  success: boolean;
                  amount: number;
                }[];
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                } | null;
                id: number;
                title: string;
                metadata: import(".prisma/client").Prisma.JsonValue;
                status: import(".prisma/client").$Enums.BookingStatus;
                description: string | null;
                assignmentReason: {
                  id: number;
                  createdAt: Date;
                  bookingId: number;
                  reasonEnum: import(".prisma/client").$Enums.AssignmentReasonEnum;
                  reasonString: string;
                }[];
                references: {
                  id: number;
                  type: string;
                  uid: string;
                  credentialId: number | null;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                  deleted: boolean | null;
                  bookingId: number | null;
                  meetingId: string | null;
                  thirdPartyRecurringEventId: string | null;
                  meetingPassword: string | null;
                  meetingUrl: string | null;
                  externalCalendarId: string | null;
                }[];
                attendees: {
                  name: string;
                  id: number;
                  locale: string | null;
                  email: string;
                  timeZone: string;
                  phoneNumber: string | null;
                  noShow: boolean | null;
                  bookingId: number | null;
                }[];
                seatsReferences: {
                  attendee: {
                    email: string;
                  };
                  referenceUid: string;
                }[];
                routedFromRoutingFormReponse: {
                  id: number;
                } | null;
                uid: string;
                userPrimaryEmail: string | null;
                customInputs: import(".prisma/client").Prisma.JsonValue;
                responses: import(".prisma/client").Prisma.JsonValue;
                location: string | null;
                paid: boolean;
                rescheduled: boolean | null;
                recurringEventId: string | null;
                isRecorded: boolean;
              }[];
              recurringInfo: {
                recurringEventId: string | null;
                count: number;
                firstDate: Date | null;
                bookings: {
                  [key: string]: Date[];
                };
              }[];
              nextCursor: number | null;
            };
          }>;
          requestReschedule: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingId: string;
              rescheduleReason?: string | undefined;
            };
            output: void;
          }>;
          editLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingId: number;
              credentialId: number | null;
              newLocation: string;
            };
            output: {
              message: string;
            };
          }>;
          addGuests: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              guests: string[];
              bookingId: number;
            };
            output: {
              message: string;
            };
          }>;
          confirm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingId: number;
              confirmed: boolean;
              recurringEventId?: string | undefined;
              reason?: string | undefined;
              emailsEnabled?: boolean | undefined;
              platformClientParams?:
                | {
                    platformClientId?: string | undefined;
                    platformRescheduleUrl?: string | null | undefined;
                    platformCancelUrl?: string | null | undefined;
                    platformBookingUrl?: string | null | undefined;
                    platformBookingLocation?: string | undefined;
                  }
                | undefined;
            };
            output: {
              message: string;
              status: "ACCEPTED" | "REJECTED";
            };
          }>;
          getBookingAttendees: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              seatReferenceUid: string;
            };
            output: number;
          }>;
          find: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              bookingUid?: string | undefined;
            };
            output: {
              booking: {
                id: number;
                status: import(".prisma/client").$Enums.BookingStatus;
                description: string | null;
                uid: string;
                eventTypeId: number | null;
                startTime: Date;
                endTime: Date;
                paid: boolean;
              } | null;
            };
          }>;
          getInstantBookingLocation: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              bookingId: number;
            };
            output: {
              booking: {
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                status: import(".prisma/client").$Enums.BookingStatus;
                description: string | null;
                uid: string;
                eventTypeId: number | null;
                startTime: Date;
                endTime: Date;
                location: string | null;
              } | null;
            };
          }>;
        }
      >;
      eventTypes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  filters?:
                    | {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                      }
                    | undefined;
                  forRoutingForms?: boolean | undefined;
                }
              | null
              | undefined;
            output: {
              allUsersAcrossAllEventTypes: Map<
                number,
                {
                  name: string | null;
                  id: number;
                  username: string | null;
                  avatarUrl: string | null;
                } & {
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                }
              >;
              eventTypeGroups: {
                eventTypes: {
                  userIds: number[];
                  safeDescription: string | undefined;
                  metadata: {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  } | null;
                  children: {
                    users: ({
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    } & {
                      nonProfileUsername: string | null;
                      profile: import("@calcom/types/UserProfile").UserProfile;
                    })[];
                    id: number;
                    length: number;
                    title: string;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    description: string | null;
                    userId: number | null;
                    timeZone: string | null;
                    slug: string;
                    position: number;
                    locations: import(".prisma/client").Prisma.JsonValue;
                    offsetStart: number;
                    hidden: boolean;
                    profileId: number | null;
                    teamId: number | null;
                    useEventLevelSelectedCalendars: boolean;
                    eventName: string | null;
                    parentId: number | null;
                    bookingFields: import(".prisma/client").Prisma.JsonValue;
                    periodType: import(".prisma/client").$Enums.PeriodType;
                    periodStartDate: Date | null;
                    periodEndDate: Date | null;
                    periodDays: number | null;
                    periodCountCalendarDays: boolean | null;
                    lockTimeZoneToggleOnBookingPage: boolean;
                    requiresConfirmation: boolean;
                    requiresConfirmationWillBlockSlot: boolean;
                    requiresConfirmationForFreeEmail: boolean;
                    requiresBookerEmailVerification: boolean;
                    canSendCalVideoTranscriptionEmails: boolean;
                    autoTranslateDescriptionEnabled: boolean;
                    recurringEvent: import(".prisma/client").Prisma.JsonValue;
                    disableGuests: boolean;
                    hideCalendarNotes: boolean;
                    hideCalendarEventDetails: boolean;
                    minimumBookingNotice: number;
                    beforeEventBuffer: number;
                    afterEventBuffer: number;
                    seatsPerTimeSlot: number | null;
                    onlyShowFirstAvailableSlot: boolean;
                    seatsShowAttendees: boolean | null;
                    seatsShowAvailabilityCount: boolean | null;
                    schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                    scheduleId: number | null;
                    price: number;
                    currency: string;
                    slotInterval: number | null;
                    successRedirectUrl: string | null;
                    forwardParamsSuccessRedirect: boolean | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    durationLimits: import(".prisma/client").Prisma.JsonValue;
                    isInstantEvent: boolean;
                    instantMeetingExpiryTimeOffsetInSeconds: number;
                    instantMeetingScheduleId: number | null;
                    instantMeetingParameters: string[];
                    assignAllTeamMembers: boolean;
                    assignRRMembersUsingSegment: boolean;
                    rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                    useEventTypeDestinationCalendarEmail: boolean;
                    isRRWeightsEnabled: boolean;
                    maxLeadThreshold: number | null;
                    allowReschedulingPastBookings: boolean;
                    eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                    rescheduleWithSameRoundRobinHost: boolean;
                    secondaryEmailId: number | null;
                  }[];
                  id: number;
                  length: number;
                  title: string;
                  description: string | null;
                  hashedLink: {
                    link: string;
                    id: number;
                    eventTypeId: number;
                  }[];
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                  hosts: ({
                    user: {
                      name: string | null;
                      id: number;
                      username: string | null;
                      avatarUrl: string | null;
                    };
                  } & {
                    userId: number;
                    eventTypeId: number;
                    createdAt: Date;
                    scheduleId: number | null;
                    isFixed: boolean;
                    priority: number | null;
                    weight: number | null;
                    weightAdjustment: number | null;
                  })[];
                  aiPhoneCallConfig: {
                    id: number;
                    eventTypeId: number;
                    enabled: boolean;
                    templateType: string;
                    schedulerName: string | null;
                    generalPrompt: string | null;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    guestName: string | null;
                    guestEmail: string | null;
                    guestCompany: string | null;
                    beginMessage: string | null;
                    llmId: string | null;
                  } | null;
                }[];
                teamId?: number | null;
                parentId?: number | null;
                bookerUrl: string;
                membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                profile: {
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                };
                metadata: {
                  membershipCount: number;
                  readOnly: boolean;
                };
              }[];
              profiles: {
                teamId: number | null | undefined;
                membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                membershipCount: number;
                readOnly: boolean;
                slug: (string | null) | null;
                name: string | null;
                image: string;
                eventTypesLockedByOrg?: boolean;
              }[];
            };
          }>;
          getUserEventGroups: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  filters?:
                    | {
                        teamIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                        schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                      }
                    | undefined;
                  forRoutingForms?: boolean | undefined;
                }
              | null
              | undefined;
            output: {
              eventTypeGroups: {
                teamId?: number | null;
                parentId?: number | null;
                bookerUrl: string;
                membershipRole?: import("@calcom/prisma/enums").MembershipRole | null;
                profile: {
                  slug: (string | null) | null;
                  name: string | null;
                  image: string;
                  eventTypesLockedByOrg?: boolean;
                };
                metadata: {
                  membershipCount: number;
                  readOnly: boolean;
                };
              }[];
              profiles: {
                teamId: number | null | undefined;
                membershipRole: import("@calcom/prisma/enums").MembershipRole | null | undefined;
                membershipCount: number;
                readOnly: boolean;
                slug: (string | null) | null;
                name: string | null;
                image: string;
                eventTypesLockedByOrg?: boolean;
              }[];
            };
          }>;
          getEventTypesFromGroup: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              group: {
                teamId?: number | null | undefined;
                parentId?: number | null | undefined;
              };
              filters?:
                | {
                    teamIds?: number[] | undefined;
                    upIds?: string[] | undefined;
                    schedulingTypes?: ("ROUND_ROBIN" | "COLLECTIVE" | "MANAGED")[] | undefined;
                  }
                | undefined;
              forRoutingForms?: boolean | undefined;
              cursor?: number | null | undefined;
              limit?: number | undefined;
              searchQuery?: string | undefined;
            };
            output: {
              eventTypes: {
                safeDescription: string | undefined;
                users: ({
                  name: string | null;
                  id: number;
                  username: string | null;
                  avatarUrl: string | null;
                } & {
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                })[];
                metadata: {
                  config?:
                    | {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                      }
                    | undefined;
                  smartContractAddress?: string | undefined;
                  blockchainId?: number | undefined;
                  multipleDuration?: number[] | undefined;
                  giphyThankYouPage?: string | undefined;
                  additionalNotesRequired?: boolean | undefined;
                  disableSuccessPage?: boolean | undefined;
                  disableStandardEmails?:
                    | {
                        all?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                        confirmation?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  managedEventConfig?:
                    | {
                        unlockedFields?:
                          | {
                              users?: true | undefined;
                              children?: true | undefined;
                              length?: true | undefined;
                              title?: true | undefined;
                              metadata?: true | undefined;
                              description?: true | undefined;
                              destinationCalendar?: true | undefined;
                              profile?: true | undefined;
                              team?: true | undefined;
                              schedule?: true | undefined;
                              availability?: true | undefined;
                              hashedLink?: true | undefined;
                              secondaryEmail?: true | undefined;
                              userId?: true | undefined;
                              customInputs?: true | undefined;
                              timeZone?: true | undefined;
                              slug?: true | undefined;
                              position?: true | undefined;
                              locations?: true | undefined;
                              offsetStart?: true | undefined;
                              hidden?: true | undefined;
                              profileId?: true | undefined;
                              teamId?: true | undefined;
                              useEventLevelSelectedCalendars?: true | undefined;
                              eventName?: true | undefined;
                              parentId?: true | undefined;
                              bookingFields?: true | undefined;
                              periodType?: true | undefined;
                              periodStartDate?: true | undefined;
                              periodEndDate?: true | undefined;
                              periodDays?: true | undefined;
                              periodCountCalendarDays?: true | undefined;
                              lockTimeZoneToggleOnBookingPage?: true | undefined;
                              requiresConfirmation?: true | undefined;
                              requiresConfirmationWillBlockSlot?: true | undefined;
                              requiresConfirmationForFreeEmail?: true | undefined;
                              requiresBookerEmailVerification?: true | undefined;
                              canSendCalVideoTranscriptionEmails?: true | undefined;
                              autoTranslateDescriptionEnabled?: true | undefined;
                              recurringEvent?: true | undefined;
                              disableGuests?: true | undefined;
                              hideCalendarNotes?: true | undefined;
                              hideCalendarEventDetails?: true | undefined;
                              minimumBookingNotice?: true | undefined;
                              beforeEventBuffer?: true | undefined;
                              afterEventBuffer?: true | undefined;
                              seatsPerTimeSlot?: true | undefined;
                              onlyShowFirstAvailableSlot?: true | undefined;
                              seatsShowAttendees?: true | undefined;
                              seatsShowAvailabilityCount?: true | undefined;
                              schedulingType?: true | undefined;
                              scheduleId?: true | undefined;
                              price?: true | undefined;
                              currency?: true | undefined;
                              slotInterval?: true | undefined;
                              successRedirectUrl?: true | undefined;
                              forwardParamsSuccessRedirect?: true | undefined;
                              bookingLimits?: true | undefined;
                              durationLimits?: true | undefined;
                              isInstantEvent?: true | undefined;
                              instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                              instantMeetingScheduleId?: true | undefined;
                              instantMeetingParameters?: true | undefined;
                              assignAllTeamMembers?: true | undefined;
                              assignRRMembersUsingSegment?: true | undefined;
                              rrSegmentQueryValue?: true | undefined;
                              useEventTypeDestinationCalendarEmail?: true | undefined;
                              isRRWeightsEnabled?: true | undefined;
                              maxLeadThreshold?: true | undefined;
                              allowReschedulingPastBookings?: true | undefined;
                              eventTypeColor?: true | undefined;
                              rescheduleWithSameRoundRobinHost?: true | undefined;
                              secondaryEmailId?: true | undefined;
                              hosts?: true | undefined;
                              owner?: true | undefined;
                              bookings?: true | undefined;
                              webhooks?: true | undefined;
                              parent?: true | undefined;
                              workflows?: true | undefined;
                              instantMeetingSchedule?: true | undefined;
                              aiPhoneCallConfig?: true | undefined;
                              fieldTranslations?: true | undefined;
                              selectedCalendars?: true | undefined;
                              _count?: true | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  requiresConfirmationThreshold?:
                    | {
                        time: number;
                        unit:
                          | "milliseconds"
                          | "seconds"
                          | "minutes"
                          | "hours"
                          | "days"
                          | "months"
                          | "years"
                          | "dates";
                      }
                    | undefined;
                  bookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  apps?: unknown;
                } | null;
                children: {
                  users: ({
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  })[];
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                }[];
                id: number;
                length: number;
                title: string;
                description: string | null;
                hashedLink: {
                  link: string;
                  id: number;
                  eventTypeId: number;
                }[];
                userId: number | null;
                timeZone: string | null;
                slug: string;
                position: number;
                locations: import(".prisma/client").Prisma.JsonValue;
                offsetStart: number;
                hidden: boolean;
                profileId: number | null;
                teamId: number | null;
                useEventLevelSelectedCalendars: boolean;
                eventName: string | null;
                parentId: number | null;
                bookingFields: import(".prisma/client").Prisma.JsonValue;
                periodType: import(".prisma/client").$Enums.PeriodType;
                periodStartDate: Date | null;
                periodEndDate: Date | null;
                periodDays: number | null;
                periodCountCalendarDays: boolean | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresConfirmationWillBlockSlot: boolean;
                requiresConfirmationForFreeEmail: boolean;
                requiresBookerEmailVerification: boolean;
                canSendCalVideoTranscriptionEmails: boolean;
                autoTranslateDescriptionEnabled: boolean;
                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                disableGuests: boolean;
                hideCalendarNotes: boolean;
                hideCalendarEventDetails: boolean;
                minimumBookingNotice: number;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                seatsPerTimeSlot: number | null;
                onlyShowFirstAvailableSlot: boolean;
                seatsShowAttendees: boolean | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                scheduleId: number | null;
                price: number;
                currency: string;
                slotInterval: number | null;
                successRedirectUrl: string | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                durationLimits: import(".prisma/client").Prisma.JsonValue;
                isInstantEvent: boolean;
                instantMeetingExpiryTimeOffsetInSeconds: number;
                instantMeetingScheduleId: number | null;
                instantMeetingParameters: string[];
                assignAllTeamMembers: boolean;
                assignRRMembersUsingSegment: boolean;
                rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                useEventTypeDestinationCalendarEmail: boolean;
                isRRWeightsEnabled: boolean;
                maxLeadThreshold: number | null;
                allowReschedulingPastBookings: boolean;
                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                rescheduleWithSameRoundRobinHost: boolean;
                secondaryEmailId: number | null;
                hosts: ({
                  user: {
                    name: string | null;
                    id: number;
                    username: string | null;
                    avatarUrl: string | null;
                  };
                } & {
                  userId: number;
                  eventTypeId: number;
                  createdAt: Date;
                  scheduleId: number | null;
                  isFixed: boolean;
                  priority: number | null;
                  weight: number | null;
                  weightAdjustment: number | null;
                })[];
                aiPhoneCallConfig: {
                  id: number;
                  eventTypeId: number;
                  enabled: boolean;
                  templateType: string;
                  schedulerName: string | null;
                  generalPrompt: string | null;
                  yourPhoneNumber: string;
                  numberToCall: string;
                  guestName: string | null;
                  guestEmail: string | null;
                  guestCompany: string | null;
                  beginMessage: string | null;
                  llmId: string | null;
                } | null;
              }[];
              nextCursor: number | null | undefined;
            };
          }>;
          getTeamAndEventTypeOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  teamId?: number | undefined;
                  isOrg?: boolean | undefined;
                }
              | null
              | undefined;
            output: {
              eventTypeOptions: {
                value: string;
                label: string;
              }[];
              teamOptions: {
                value: string;
                label: string;
              }[];
            };
          }>;
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              length: number;
              title: string;
              metadata: import(".prisma/client").Prisma.JsonValue;
              description: string | null;
              slug: string;
              hidden: boolean;
              schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
            }[];
          }>;
          listWithTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              title: string;
              team: {
                name: string;
                id: number;
              } | null;
              slug: string;
            }[];
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              length: number;
              title: string;
              slug: string;
              metadata?:
                | {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  }
                | null
                | undefined;
              description?: string | null | undefined;
              locations?:
                | {
                    type: string;
                    address?: string | undefined;
                    link?: string | undefined;
                    displayLocationPublicly?: boolean | undefined;
                    hostPhoneNumber?: string | undefined;
                    credentialId?: number | undefined;
                    teamName?: string | undefined;
                  }[]
                | undefined;
              hidden?: boolean | undefined;
              teamId?: number | null | undefined;
              disableGuests?: boolean | undefined;
              minimumBookingNotice?: number | undefined;
              beforeEventBuffer?: number | undefined;
              afterEventBuffer?: number | undefined;
              schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
              scheduleId?: number | undefined;
              slotInterval?: number | null | undefined;
            };
            output: {
              eventType: {
                id: number;
                length: number;
                title: string;
                metadata: import(".prisma/client").Prisma.JsonValue;
                description: string | null;
                userId: number | null;
                timeZone: string | null;
                slug: string;
                position: number;
                locations: import(".prisma/client").Prisma.JsonValue;
                offsetStart: number;
                hidden: boolean;
                profileId: number | null;
                teamId: number | null;
                useEventLevelSelectedCalendars: boolean;
                eventName: string | null;
                parentId: number | null;
                bookingFields: import(".prisma/client").Prisma.JsonValue;
                periodType: import(".prisma/client").$Enums.PeriodType;
                periodStartDate: Date | null;
                periodEndDate: Date | null;
                periodDays: number | null;
                periodCountCalendarDays: boolean | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresConfirmationWillBlockSlot: boolean;
                requiresConfirmationForFreeEmail: boolean;
                requiresBookerEmailVerification: boolean;
                canSendCalVideoTranscriptionEmails: boolean;
                autoTranslateDescriptionEnabled: boolean;
                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                disableGuests: boolean;
                hideCalendarNotes: boolean;
                hideCalendarEventDetails: boolean;
                minimumBookingNotice: number;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                seatsPerTimeSlot: number | null;
                onlyShowFirstAvailableSlot: boolean;
                seatsShowAttendees: boolean | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                scheduleId: number | null;
                price: number;
                currency: string;
                slotInterval: number | null;
                successRedirectUrl: string | null;
                forwardParamsSuccessRedirect: boolean | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                durationLimits: import(".prisma/client").Prisma.JsonValue;
                isInstantEvent: boolean;
                instantMeetingExpiryTimeOffsetInSeconds: number;
                instantMeetingScheduleId: number | null;
                instantMeetingParameters: string[];
                assignAllTeamMembers: boolean;
                assignRRMembersUsingSegment: boolean;
                rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                useEventTypeDestinationCalendarEmail: boolean;
                isRRWeightsEnabled: boolean;
                maxLeadThreshold: number | null;
                allowReschedulingPastBookings: boolean;
                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                rescheduleWithSameRoundRobinHost: boolean;
                secondaryEmailId: number | null;
              };
            };
          }>;
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id: number;
              eventTypeId?: number | undefined;
              users?: number[] | undefined;
            };
            output: {
              eventType: {
                schedule: number | null;
                instantMeetingSchedule: number | null;
                scheduleName: string | null;
                recurringEvent: import("@calcom/types/Calendar").RecurringEvent | null;
                bookingLimits: Partial<
                  Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                > | null;
                durationLimits: Partial<
                  Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
                > | null;
                eventTypeColor: {
                  lightEventTypeColor: string;
                  darkEventTypeColor: string;
                } | null;
                locations: import("@calcom/app-store/locations").LocationObject[];
                metadata: {
                  config?:
                    | {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                      }
                    | undefined;
                  smartContractAddress?: string | undefined;
                  blockchainId?: number | undefined;
                  multipleDuration?: number[] | undefined;
                  giphyThankYouPage?: string | undefined;
                  additionalNotesRequired?: boolean | undefined;
                  disableSuccessPage?: boolean | undefined;
                  disableStandardEmails?:
                    | {
                        all?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                        confirmation?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  managedEventConfig?:
                    | {
                        unlockedFields?:
                          | {
                              users?: true | undefined;
                              children?: true | undefined;
                              length?: true | undefined;
                              title?: true | undefined;
                              metadata?: true | undefined;
                              description?: true | undefined;
                              destinationCalendar?: true | undefined;
                              profile?: true | undefined;
                              team?: true | undefined;
                              schedule?: true | undefined;
                              availability?: true | undefined;
                              hashedLink?: true | undefined;
                              secondaryEmail?: true | undefined;
                              userId?: true | undefined;
                              customInputs?: true | undefined;
                              timeZone?: true | undefined;
                              slug?: true | undefined;
                              position?: true | undefined;
                              locations?: true | undefined;
                              offsetStart?: true | undefined;
                              hidden?: true | undefined;
                              profileId?: true | undefined;
                              teamId?: true | undefined;
                              useEventLevelSelectedCalendars?: true | undefined;
                              eventName?: true | undefined;
                              parentId?: true | undefined;
                              bookingFields?: true | undefined;
                              periodType?: true | undefined;
                              periodStartDate?: true | undefined;
                              periodEndDate?: true | undefined;
                              periodDays?: true | undefined;
                              periodCountCalendarDays?: true | undefined;
                              lockTimeZoneToggleOnBookingPage?: true | undefined;
                              requiresConfirmation?: true | undefined;
                              requiresConfirmationWillBlockSlot?: true | undefined;
                              requiresConfirmationForFreeEmail?: true | undefined;
                              requiresBookerEmailVerification?: true | undefined;
                              canSendCalVideoTranscriptionEmails?: true | undefined;
                              autoTranslateDescriptionEnabled?: true | undefined;
                              recurringEvent?: true | undefined;
                              disableGuests?: true | undefined;
                              hideCalendarNotes?: true | undefined;
                              hideCalendarEventDetails?: true | undefined;
                              minimumBookingNotice?: true | undefined;
                              beforeEventBuffer?: true | undefined;
                              afterEventBuffer?: true | undefined;
                              seatsPerTimeSlot?: true | undefined;
                              onlyShowFirstAvailableSlot?: true | undefined;
                              seatsShowAttendees?: true | undefined;
                              seatsShowAvailabilityCount?: true | undefined;
                              schedulingType?: true | undefined;
                              scheduleId?: true | undefined;
                              price?: true | undefined;
                              currency?: true | undefined;
                              slotInterval?: true | undefined;
                              successRedirectUrl?: true | undefined;
                              forwardParamsSuccessRedirect?: true | undefined;
                              bookingLimits?: true | undefined;
                              durationLimits?: true | undefined;
                              isInstantEvent?: true | undefined;
                              instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                              instantMeetingScheduleId?: true | undefined;
                              instantMeetingParameters?: true | undefined;
                              assignAllTeamMembers?: true | undefined;
                              assignRRMembersUsingSegment?: true | undefined;
                              rrSegmentQueryValue?: true | undefined;
                              useEventTypeDestinationCalendarEmail?: true | undefined;
                              isRRWeightsEnabled?: true | undefined;
                              maxLeadThreshold?: true | undefined;
                              allowReschedulingPastBookings?: true | undefined;
                              eventTypeColor?: true | undefined;
                              rescheduleWithSameRoundRobinHost?: true | undefined;
                              secondaryEmailId?: true | undefined;
                              hosts?: true | undefined;
                              owner?: true | undefined;
                              bookings?: true | undefined;
                              webhooks?: true | undefined;
                              parent?: true | undefined;
                              workflows?: true | undefined;
                              instantMeetingSchedule?: true | undefined;
                              aiPhoneCallConfig?: true | undefined;
                              fieldTranslations?: true | undefined;
                              selectedCalendars?: true | undefined;
                              _count?: true | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  requiresConfirmationThreshold?:
                    | {
                        time: number;
                        unit:
                          | "milliseconds"
                          | "seconds"
                          | "minutes"
                          | "hours"
                          | "days"
                          | "months"
                          | "years"
                          | "dates";
                      }
                    | undefined;
                  bookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  apps?:
                    | {
                        alby?:
                          | {
                              price: number;
                              currency: string;
                              appCategories?: string[] | undefined;
                              paymentOption?: string | undefined;
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                            }
                          | undefined;
                        basecamp3?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        campsite?: {} | undefined;
                        closecom?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        dailyvideo?: {} | undefined;
                        fathom?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              trackingId?: string | undefined;
                            }
                          | undefined;
                        feishucalendar?: {} | undefined;
                        ga4?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              trackingId?: string | undefined;
                            }
                          | undefined;
                        giphy?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              thankYouPage?: string | undefined;
                            }
                          | undefined;
                        googlecalendar?: {} | undefined;
                        googlevideo?: {} | undefined;
                        gtm?:
                          | {
                              trackingId: string;
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        hitpay?:
                          | {
                              price: number;
                              currency: string;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                              paymentOption?: string | undefined;
                              enabled?: boolean | undefined;
                            }
                          | undefined;
                        hubspot?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        insihts?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              SITE_ID?: string | undefined;
                              SCRIPT_URL?: string | undefined;
                            }
                          | undefined;
                        intercom?: {} | undefined;
                        jelly?: {} | undefined;
                        jitsivideo?: {} | undefined;
                        larkcalendar?: {} | undefined;
                        make?: {} | undefined;
                        matomo?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              MATOMO_URL?: string | undefined;
                              SITE_ID?: string | undefined;
                            }
                          | undefined;
                        metapixel?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              trackingId?: string | undefined;
                            }
                          | undefined;
                        "mock-payment-app"?:
                          | {
                              price: number;
                              currency: string;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                              paymentOption?: string | undefined;
                              enabled?: boolean | undefined;
                            }
                          | undefined;
                        nextcloudtalk?: {} | undefined;
                        office365calendar?:
                          | {
                              client_id: string;
                              client_secret: string;
                            }
                          | undefined;
                        office365video?:
                          | {
                              client_id: string;
                              client_secret: string;
                            }
                          | undefined;
                        paypal?:
                          | {
                              price: number;
                              currency: string;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                              paymentOption?: string | undefined;
                              enabled?: boolean | undefined;
                            }
                          | undefined;
                        "pipedrive-crm"?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        plausible?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              PLAUSIBLE_URL?: string | undefined;
                              trackingId?: string | undefined;
                            }
                          | undefined;
                        posthog?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              TRACKING_ID?: string | undefined;
                              API_HOST?: string | undefined;
                            }
                          | undefined;
                        qr_code?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        "routing-forms"?: any;
                        salesforce?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              roundRobinLeadSkip?: boolean | undefined;
                              roundRobinSkipCheckRecordOn?:
                                | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                | undefined;
                              ifFreeEmailDomainSkipOwnerCheck?: boolean | undefined;
                              skipContactCreation?: boolean | undefined;
                              createEventOn?:
                                | import("@calcom/app-store/salesforce/lib/enums").SalesforceRecordEnum
                                | undefined;
                              createNewContactUnderAccount?: boolean | undefined;
                              createLeadIfAccountNull?: boolean | undefined;
                              onBookingWriteToEventObject?: boolean | undefined;
                              onBookingWriteToEventObjectMap?: Record<string, any> | undefined;
                              createEventOnLeadCheckForContact?: boolean | undefined;
                              onBookingChangeRecordOwner?: boolean | undefined;
                              onBookingChangeRecordOwnerName?: string | undefined;
                              sendNoShowAttendeeData?: boolean | undefined;
                              sendNoShowAttendeeDataField?: string | undefined;
                              onBookingWriteToRecord?: boolean | undefined;
                              onBookingWriteToRecordFields?:
                                | Record<
                                    string,
                                    {
                                      value: string;
                                      fieldType: import("@calcom/app-store/salesforce/lib/enums").SalesforceFieldType;
                                      whenToWrite: import("@calcom/app-store/salesforce/lib/enums").WhenToWriteToRecord;
                                    }
                                  >
                                | undefined;
                              ignoreGuests?: boolean | undefined;
                            }
                          | undefined;
                        shimmervideo?: {} | undefined;
                        stripe?:
                          | {
                              price: number;
                              currency: string;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                              paymentOption?: string | undefined;
                              enabled?: boolean | undefined;
                              refundPolicy?: import("@calcom/lib/payment/types").RefundPolicy | undefined;
                              refundDaysCount?: number | undefined;
                              refundCountCalendarDays?: boolean | undefined;
                            }
                          | undefined;
                        tandemvideo?: {} | undefined;
                        "booking-pages-tag"?:
                          | {
                              trackingId: string;
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        "event-type-app-card"?:
                          | {
                              isSunrise: boolean;
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        twipla?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              SITE_ID?: string | undefined;
                            }
                          | undefined;
                        umami?:
                          | {
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                              SITE_ID?: string | undefined;
                              SCRIPT_URL?: string | undefined;
                            }
                          | undefined;
                        vital?: {} | undefined;
                        webex?: {} | undefined;
                        wordpress?:
                          | {
                              isSunrise: boolean;
                              credentialId?: number | undefined;
                              enabled?: boolean | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        zapier?: {} | undefined;
                        "zoho-bigin"?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        zohocalendar?: {} | undefined;
                        zohocrm?:
                          | {
                              enabled?: boolean | undefined;
                              credentialId?: number | undefined;
                              appCategories?: string[] | undefined;
                            }
                          | undefined;
                        zoomvideo?: {} | undefined;
                      }
                    | undefined;
                };
                customInputs: {
                  id: number;
                  type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                  label: string;
                  eventTypeId: number;
                  required: boolean;
                  placeholder: string;
                  options?:
                    | {
                        type: string;
                        label: string;
                      }[]
                    | null
                    | undefined;
                  hasToBeCreated?: boolean | undefined;
                }[];
                users: {
                  name: string | null;
                  id: number;
                  locale: string | null;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  defaultScheduleId: number | null;
                }[];
                bookerUrl: string;
                children: {
                  owner: {
                    avatar: string;
                    email: string;
                    name: string;
                    username: string;
                    membership: import(".prisma/client").$Enums.MembershipRole;
                    id: number;
                    avatarUrl: string | null;
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  };
                  created: boolean;
                  slug: string;
                  hidden: boolean;
                }[];
                id: number;
                length: number;
                title: string;
                description: string | null;
                destinationCalendar: {
                  id: number;
                  userId: number | null;
                  eventTypeId: number | null;
                  integration: string;
                  externalId: string;
                  primaryEmail: string | null;
                  credentialId: number | null;
                  delegationCredentialId: string | null;
                  domainWideDelegationCredentialId: string | null;
                } | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  parentId: number | null;
                  parent: {
                    organizationSettings: {
                      lockEventTypeCreationForUsers: boolean;
                    } | null;
                    slug: string | null;
                  } | null;
                  members: {
                    user: {
                      name: string | null;
                      id: number;
                      locale: string | null;
                      email: string;
                      username: string | null;
                      avatarUrl: string | null;
                      defaultScheduleId: number | null;
                      eventTypes: {
                        slug: string;
                      }[];
                    };
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                  }[];
                } | null;
                hashedLink: {
                  link: string;
                  id: number;
                  eventTypeId: number;
                }[];
                userId: number | null;
                timeZone: string | null;
                slug: string;
                offsetStart: number;
                hidden: boolean;
                teamId: number | null;
                useEventLevelSelectedCalendars: boolean;
                eventName: string | null;
                bookingFields: import(".prisma/client").Prisma.JsonValue;
                periodType: import(".prisma/client").$Enums.PeriodType;
                periodStartDate: Date | null;
                periodEndDate: Date | null;
                periodDays: number | null;
                periodCountCalendarDays: boolean | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresConfirmationWillBlockSlot: boolean;
                requiresConfirmationForFreeEmail: boolean;
                requiresBookerEmailVerification: boolean;
                canSendCalVideoTranscriptionEmails: boolean;
                autoTranslateDescriptionEnabled: boolean;
                disableGuests: boolean;
                hideCalendarNotes: boolean;
                hideCalendarEventDetails: boolean;
                minimumBookingNotice: number;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                seatsPerTimeSlot: number | null;
                onlyShowFirstAvailableSlot: boolean;
                seatsShowAttendees: boolean | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                price: number;
                currency: string;
                slotInterval: number | null;
                successRedirectUrl: string | null;
                forwardParamsSuccessRedirect: boolean | null;
                isInstantEvent: boolean;
                instantMeetingExpiryTimeOffsetInSeconds: number;
                instantMeetingParameters: string[];
                assignAllTeamMembers: boolean;
                assignRRMembersUsingSegment: boolean;
                rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                useEventTypeDestinationCalendarEmail: boolean;
                isRRWeightsEnabled: boolean;
                maxLeadThreshold: number | null;
                allowReschedulingPastBookings: boolean;
                rescheduleWithSameRoundRobinHost: boolean;
                secondaryEmailId: number | null;
                hosts: {
                  userId: number;
                  scheduleId: number | null;
                  isFixed: boolean;
                  priority: number | null;
                  weight: number | null;
                }[];
                owner: {
                  id: number;
                } | null;
                webhooks: {
                  id: string;
                  eventTypeId: number | null;
                  secret: string | null;
                  subscriberUrl: string;
                  payloadTemplate: string | null;
                  active: boolean;
                  eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
                }[];
                parent: {
                  id: number;
                  teamId: number | null;
                } | null;
                workflows: ({
                  workflow: {
                    name: string;
                    id: number;
                    time: number | null;
                    team: {
                      name: string;
                      id: number;
                      slug: string | null;
                      members: {
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                      }[];
                    } | null;
                    userId: number | null;
                    teamId: number | null;
                    steps: {
                      id: number;
                      template: import(".prisma/client").$Enums.WorkflowTemplates;
                      action: import(".prisma/client").$Enums.WorkflowActions;
                      workflowId: number;
                      stepNumber: number;
                      sendTo: string | null;
                      reminderBody: string | null;
                      emailSubject: string | null;
                      numberRequired: boolean | null;
                      sender: string | null;
                      numberVerificationPending: boolean;
                      includeCalendarEvent: boolean;
                    }[];
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                    activeOn: {
                      eventType: {
                        id: number;
                        title: string;
                        parentId: number | null;
                        _count: {
                          children: number;
                        };
                      };
                    }[];
                  };
                } & {
                  id: number;
                  eventTypeId: number;
                  workflowId: number;
                })[];
                aiPhoneCallConfig: {
                  id: number;
                  eventTypeId: number;
                  enabled: boolean;
                  templateType: string;
                  schedulerName: string | null;
                  generalPrompt: string | null;
                  yourPhoneNumber: string;
                  numberToCall: string;
                  guestName: string | null;
                  guestEmail: string | null;
                  guestCompany: string | null;
                  beginMessage: string | null;
                  llmId: string | null;
                } | null;
                fieldTranslations: {
                  field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                  targetLocale: string;
                  translatedText: string;
                }[];
              } & {
                users: ({
                  name: string | null;
                  id: number;
                  locale: string | null;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  defaultScheduleId: number | null;
                } & {
                  avatar: string;
                })[];
                periodStartDate: string | null;
                periodEndDate: string | null;
                bookingFields: {
                  name: string;
                  type:
                    | "number"
                    | "boolean"
                    | "phone"
                    | "name"
                    | "address"
                    | "select"
                    | "textarea"
                    | "text"
                    | "checkbox"
                    | "radio"
                    | "email"
                    | "url"
                    | "multiselect"
                    | "multiemail"
                    | "radioInput";
                  label?: string | undefined;
                  options?:
                    | {
                        label: string;
                        value: string;
                      }[]
                    | undefined;
                  required?: boolean | undefined;
                  placeholder?: string | undefined;
                  maxLength?: number | undefined;
                  defaultLabel?: string | undefined;
                  defaultPlaceholder?: string | undefined;
                  labelAsSafeHtml?: string | undefined;
                  getOptionsAt?: string | undefined;
                  optionsInputs?:
                    | Record<
                        string,
                        {
                          type: "phone" | "address" | "text";
                          required?: boolean | undefined;
                          placeholder?: string | undefined;
                        }
                      >
                    | undefined;
                  minLength?: number | undefined;
                  excludeEmails?: string | undefined;
                  requireEmails?: string | undefined;
                  variant?: string | undefined;
                  variantsConfig?:
                    | {
                        variants: Record<
                          string,
                          {
                            fields: {
                              name: string;
                              type:
                                | "number"
                                | "boolean"
                                | "phone"
                                | "name"
                                | "address"
                                | "select"
                                | "textarea"
                                | "text"
                                | "checkbox"
                                | "radio"
                                | "email"
                                | "url"
                                | "multiselect"
                                | "multiemail"
                                | "radioInput";
                              label?: string | undefined;
                              required?: boolean | undefined;
                              placeholder?: string | undefined;
                              maxLength?: number | undefined;
                              labelAsSafeHtml?: string | undefined;
                              minLength?: number | undefined;
                              excludeEmails?: string | undefined;
                              requireEmails?: string | undefined;
                            }[];
                          }
                        >;
                      }
                    | undefined;
                  views?:
                    | {
                        id: string;
                        label: string;
                        description?: string | undefined;
                      }[]
                    | undefined;
                  hideWhenJustOneOption?: boolean | undefined;
                  hidden?: boolean | undefined;
                  editable?:
                    | "user"
                    | "system"
                    | "system-but-optional"
                    | "system-but-hidden"
                    | "user-readonly"
                    | undefined;
                  sources?:
                    | {
                        id: string;
                        type: string;
                        label: string;
                        editUrl?: string | undefined;
                        fieldRequired?: boolean | undefined;
                      }[]
                    | undefined;
                  disableOnPrefill?: boolean | undefined;
                }[] &
                  import("zod").BRAND<"HAS_SYSTEM_FIELDS">;
              };
              locationOptions: {
                label: string;
                options: {
                  label: string;
                  value: string;
                  disabled?: boolean;
                  icon?: string;
                  slug?: string;
                  credentialId?: number;
                }[];
              }[];
              destinationCalendar: {
                id: number;
                userId: number | null;
                eventTypeId: number | null;
                integration: string;
                externalId: string;
                primaryEmail: string | null;
                credentialId: number | null;
                delegationCredentialId: string | null;
                domainWideDelegationCredentialId: string | null;
              } | null;
              team: {
                name: string;
                id: number;
                slug: string | null;
                parentId: number | null;
                parent: {
                  organizationSettings: {
                    lockEventTypeCreationForUsers: boolean;
                  } | null;
                  slug: string | null;
                } | null;
                members: {
                  user: {
                    name: string | null;
                    id: number;
                    locale: string | null;
                    email: string;
                    username: string | null;
                    avatarUrl: string | null;
                    defaultScheduleId: number | null;
                    eventTypes: {
                      slug: string;
                    }[];
                  };
                  role: import(".prisma/client").$Enums.MembershipRole;
                  accepted: boolean;
                }[];
              } | null;
              teamMembers: {
                profileId: number | null;
                eventTypes: string[];
                membership: import(".prisma/client").$Enums.MembershipRole;
                name: string | null;
                id: number;
                locale: string | null;
                email: string;
                username: string | null;
                avatarUrl: string | null;
                defaultScheduleId: number | null;
                nonProfileUsername: string | null;
                profile: import("@calcom/types/UserProfile").UserProfile;
                avatar: string;
              }[];
              currentUserMembership: {
                user: {
                  name: string | null;
                  id: number;
                  locale: string | null;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  defaultScheduleId: number | null;
                  eventTypes: {
                    slug: string;
                  }[];
                };
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              } | null;
              isUserOrganizationAdmin: boolean;
            };
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              eventTypeId?: number | undefined;
              users?: (number[] & (string | number)[]) | undefined;
              children?:
                | {
                    hidden: boolean;
                    owner: {
                      name: string;
                      id: number;
                      email: string;
                      eventTypeSlugs: string[];
                    };
                  }[]
                | undefined;
              length?: number | undefined;
              title?: string | undefined;
              metadata?:
                | {
                    config?:
                      | {
                          useHostSchedulesForTeamEvent?: boolean | undefined;
                        }
                      | undefined;
                    smartContractAddress?: string | undefined;
                    blockchainId?: number | undefined;
                    multipleDuration?: number[] | undefined;
                    giphyThankYouPage?: string | undefined;
                    additionalNotesRequired?: boolean | undefined;
                    disableSuccessPage?: boolean | undefined;
                    disableStandardEmails?:
                      | {
                          all?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                          confirmation?:
                            | {
                                host?: boolean | undefined;
                                attendee?: boolean | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    managedEventConfig?:
                      | {
                          unlockedFields?:
                            | {
                                users?: true | undefined;
                                children?: true | undefined;
                                length?: true | undefined;
                                title?: true | undefined;
                                metadata?: true | undefined;
                                description?: true | undefined;
                                destinationCalendar?: true | undefined;
                                profile?: true | undefined;
                                team?: true | undefined;
                                schedule?: true | undefined;
                                availability?: true | undefined;
                                hashedLink?: true | undefined;
                                secondaryEmail?: true | undefined;
                                userId?: true | undefined;
                                customInputs?: true | undefined;
                                timeZone?: true | undefined;
                                slug?: true | undefined;
                                position?: true | undefined;
                                locations?: true | undefined;
                                offsetStart?: true | undefined;
                                hidden?: true | undefined;
                                profileId?: true | undefined;
                                teamId?: true | undefined;
                                useEventLevelSelectedCalendars?: true | undefined;
                                eventName?: true | undefined;
                                parentId?: true | undefined;
                                bookingFields?: true | undefined;
                                periodType?: true | undefined;
                                periodStartDate?: true | undefined;
                                periodEndDate?: true | undefined;
                                periodDays?: true | undefined;
                                periodCountCalendarDays?: true | undefined;
                                lockTimeZoneToggleOnBookingPage?: true | undefined;
                                requiresConfirmation?: true | undefined;
                                requiresConfirmationWillBlockSlot?: true | undefined;
                                requiresConfirmationForFreeEmail?: true | undefined;
                                requiresBookerEmailVerification?: true | undefined;
                                canSendCalVideoTranscriptionEmails?: true | undefined;
                                autoTranslateDescriptionEnabled?: true | undefined;
                                recurringEvent?: true | undefined;
                                disableGuests?: true | undefined;
                                hideCalendarNotes?: true | undefined;
                                hideCalendarEventDetails?: true | undefined;
                                minimumBookingNotice?: true | undefined;
                                beforeEventBuffer?: true | undefined;
                                afterEventBuffer?: true | undefined;
                                seatsPerTimeSlot?: true | undefined;
                                onlyShowFirstAvailableSlot?: true | undefined;
                                seatsShowAttendees?: true | undefined;
                                seatsShowAvailabilityCount?: true | undefined;
                                schedulingType?: true | undefined;
                                scheduleId?: true | undefined;
                                price?: true | undefined;
                                currency?: true | undefined;
                                slotInterval?: true | undefined;
                                successRedirectUrl?: true | undefined;
                                forwardParamsSuccessRedirect?: true | undefined;
                                bookingLimits?: true | undefined;
                                durationLimits?: true | undefined;
                                isInstantEvent?: true | undefined;
                                instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                                instantMeetingScheduleId?: true | undefined;
                                instantMeetingParameters?: true | undefined;
                                assignAllTeamMembers?: true | undefined;
                                assignRRMembersUsingSegment?: true | undefined;
                                rrSegmentQueryValue?: true | undefined;
                                useEventTypeDestinationCalendarEmail?: true | undefined;
                                isRRWeightsEnabled?: true | undefined;
                                maxLeadThreshold?: true | undefined;
                                allowReschedulingPastBookings?: true | undefined;
                                eventTypeColor?: true | undefined;
                                rescheduleWithSameRoundRobinHost?: true | undefined;
                                secondaryEmailId?: true | undefined;
                                hosts?: true | undefined;
                                owner?: true | undefined;
                                bookings?: true | undefined;
                                webhooks?: true | undefined;
                                parent?: true | undefined;
                                workflows?: true | undefined;
                                instantMeetingSchedule?: true | undefined;
                                aiPhoneCallConfig?: true | undefined;
                                fieldTranslations?: true | undefined;
                                selectedCalendars?: true | undefined;
                                _count?: true | undefined;
                              }
                            | undefined;
                        }
                      | undefined;
                    requiresConfirmationThreshold?:
                      | {
                          time: number;
                          unit:
                            | "milliseconds"
                            | "seconds"
                            | "minutes"
                            | "hours"
                            | "days"
                            | "months"
                            | "years"
                            | "dates";
                        }
                      | undefined;
                    bookerLayouts?:
                      | {
                          enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                          defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                        }
                      | null
                      | undefined;
                    apps?: unknown;
                  }
                | null
                | undefined;
              description?: string | null | undefined;
              destinationCalendar?:
                | {
                    integration: string;
                    externalId: string;
                  }
                | null
                | undefined;
              schedule?: number | null | undefined;
              userId?: number | null | undefined;
              customInputs?:
                | {
                    id: number;
                    type: "TEXT" | "TEXTLONG" | "NUMBER" | "BOOL" | "RADIO" | "PHONE";
                    label: string;
                    eventTypeId: number;
                    required: boolean;
                    placeholder: string;
                    options?:
                      | {
                          type: string;
                          label: string;
                        }[]
                      | null
                      | undefined;
                    hasToBeCreated?: boolean | undefined;
                  }[]
                | undefined;
              timeZone?: string | null | undefined;
              slug?: string | undefined;
              position?: number | undefined;
              locations?:
                | {
                    type: string;
                    address?: string | undefined;
                    link?: string | undefined;
                    displayLocationPublicly?: boolean | undefined;
                    hostPhoneNumber?: string | undefined;
                    credentialId?: number | undefined;
                    teamName?: string | undefined;
                  }[]
                | undefined;
              offsetStart?: number | undefined;
              hidden?: boolean | undefined;
              profileId?: number | null | undefined;
              teamId?: number | null | undefined;
              useEventLevelSelectedCalendars?: boolean | undefined;
              eventName?: string | null | undefined;
              parentId?: number | null | undefined;
              bookingFields?:
                | {
                    name: string;
                    type:
                      | "number"
                      | "boolean"
                      | "phone"
                      | "name"
                      | "address"
                      | "select"
                      | "textarea"
                      | "text"
                      | "checkbox"
                      | "radio"
                      | "email"
                      | "url"
                      | "multiselect"
                      | "multiemail"
                      | "radioInput";
                    label?: string | undefined;
                    options?:
                      | {
                          label: string;
                          value: string;
                        }[]
                      | undefined;
                    required?: boolean | undefined;
                    placeholder?: string | undefined;
                    maxLength?: number | undefined;
                    defaultLabel?: string | undefined;
                    defaultPlaceholder?: string | undefined;
                    labelAsSafeHtml?: string | undefined;
                    getOptionsAt?: string | undefined;
                    optionsInputs?:
                      | Record<
                          string,
                          {
                            type: "phone" | "address" | "text";
                            required?: boolean | undefined;
                            placeholder?: string | undefined;
                          }
                        >
                      | undefined;
                    minLength?: number | undefined;
                    excludeEmails?: string | undefined;
                    requireEmails?: string | undefined;
                    variant?: string | undefined;
                    variantsConfig?:
                      | {
                          variants: Record<
                            string,
                            {
                              fields: {
                                name: string;
                                type:
                                  | "number"
                                  | "boolean"
                                  | "phone"
                                  | "name"
                                  | "address"
                                  | "select"
                                  | "textarea"
                                  | "text"
                                  | "checkbox"
                                  | "radio"
                                  | "email"
                                  | "url"
                                  | "multiselect"
                                  | "multiemail"
                                  | "radioInput";
                                label?: string | undefined;
                                required?: boolean | undefined;
                                placeholder?: string | undefined;
                                maxLength?: number | undefined;
                                labelAsSafeHtml?: string | undefined;
                                minLength?: number | undefined;
                                excludeEmails?: string | undefined;
                                requireEmails?: string | undefined;
                              }[];
                            }
                          >;
                        }
                      | undefined;
                    views?:
                      | {
                          id: string;
                          label: string;
                          description?: string | undefined;
                        }[]
                      | undefined;
                    hideWhenJustOneOption?: boolean | undefined;
                    hidden?: boolean | undefined;
                    editable?:
                      | "user"
                      | "system"
                      | "system-but-optional"
                      | "system-but-hidden"
                      | "user-readonly"
                      | undefined;
                    sources?:
                      | {
                          id: string;
                          type: string;
                          label: string;
                          editUrl?: string | undefined;
                          fieldRequired?: boolean | undefined;
                        }[]
                      | undefined;
                    disableOnPrefill?: boolean | undefined;
                  }[]
                | undefined;
              periodType?: "UNLIMITED" | "ROLLING" | "ROLLING_WINDOW" | "RANGE" | undefined;
              periodStartDate?: Date | null | undefined;
              periodEndDate?: Date | null | undefined;
              periodDays?: number | null | undefined;
              periodCountCalendarDays?: boolean | null | undefined;
              lockTimeZoneToggleOnBookingPage?: boolean | undefined;
              requiresConfirmation?: boolean | undefined;
              requiresConfirmationWillBlockSlot?: boolean | undefined;
              requiresConfirmationForFreeEmail?: boolean | undefined;
              requiresBookerEmailVerification?: boolean | undefined;
              canSendCalVideoTranscriptionEmails?: boolean | undefined;
              autoTranslateDescriptionEnabled?: boolean | undefined;
              recurringEvent?:
                | {
                    count: number;
                    interval: number;
                    freq: import("@calcom/prisma/zod-utils").Frequency;
                    dtstart?: Date | undefined;
                    until?: Date | undefined;
                    tzid?: string | undefined;
                  }
                | null
                | undefined;
              disableGuests?: boolean | undefined;
              hideCalendarNotes?: boolean | undefined;
              hideCalendarEventDetails?: boolean | undefined;
              minimumBookingNotice?: number | undefined;
              beforeEventBuffer?: number | undefined;
              afterEventBuffer?: number | undefined;
              seatsPerTimeSlot?: number | null | undefined;
              onlyShowFirstAvailableSlot?: boolean | undefined;
              seatsShowAttendees?: boolean | null | undefined;
              seatsShowAvailabilityCount?: boolean | null | undefined;
              schedulingType?: "ROUND_ROBIN" | "COLLECTIVE" | "MANAGED" | null | undefined;
              scheduleId?: number | null | undefined;
              price?: number | undefined;
              currency?: string | undefined;
              slotInterval?: number | null | undefined;
              successRedirectUrl?: string | null | undefined;
              forwardParamsSuccessRedirect?: boolean | null | undefined;
              bookingLimits?:
                | {
                    PER_DAY?: number | undefined;
                    PER_WEEK?: number | undefined;
                    PER_MONTH?: number | undefined;
                    PER_YEAR?: number | undefined;
                  }
                | null
                | undefined;
              durationLimits?:
                | {
                    PER_DAY?: number | undefined;
                    PER_WEEK?: number | undefined;
                    PER_MONTH?: number | undefined;
                    PER_YEAR?: number | undefined;
                  }
                | null
                | undefined;
              isInstantEvent?: boolean | undefined;
              instantMeetingExpiryTimeOffsetInSeconds?: number | undefined;
              instantMeetingScheduleId?: number | null | undefined;
              instantMeetingParameters?: string[] | undefined;
              assignAllTeamMembers?: boolean | undefined;
              assignRRMembersUsingSegment?: boolean | undefined;
              rrSegmentQueryValue?:
                | {
                    type: "group";
                    id?: string | undefined;
                    children1?:
                      | Record<
                          string,
                          {
                            type?: string | undefined;
                            properties?:
                              | {
                                  field?: any;
                                  operator?: any;
                                  value?: any;
                                  valueSrc?: any;
                                  valueError?: (string | null)[] | undefined;
                                  valueType?: any;
                                }
                              | undefined;
                          }
                        >
                      | undefined;
                    properties?: any;
                  }
                | {
                    type: "switch_group";
                    id?: string | undefined;
                    children1?:
                      | Record<
                          string,
                          {
                            type?: string | undefined;
                            properties?:
                              | {
                                  field?: any;
                                  operator?: any;
                                  value?: any;
                                  valueSrc?: any;
                                  valueError?: (string | null)[] | undefined;
                                  valueType?: any;
                                }
                              | undefined;
                          }
                        >
                      | undefined;
                    properties?: any;
                  }
                | null
                | undefined;
              useEventTypeDestinationCalendarEmail?: boolean | undefined;
              isRRWeightsEnabled?: boolean | undefined;
              maxLeadThreshold?: number | null | undefined;
              allowReschedulingPastBookings?: boolean | undefined;
              eventTypeColor?:
                | {
                    lightEventTypeColor: string;
                    darkEventTypeColor: string;
                  }
                | null
                | undefined;
              rescheduleWithSameRoundRobinHost?: boolean | undefined;
              secondaryEmailId?: number | null | undefined;
              hosts?:
                | {
                    userId: number;
                    profileId?: number | null | undefined;
                    isFixed?: boolean | undefined;
                    priority?: number | null | undefined;
                    weight?: number | null | undefined;
                    scheduleId?: number | null | undefined;
                  }[]
                | undefined;
              instantMeetingSchedule?: number | null | undefined;
              calAiPhoneScript?: string | undefined;
              multiplePrivateLinks?: string[] | undefined;
              aiPhoneCallConfig?:
                | {
                    enabled: boolean;
                    templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
                    generalPrompt: string;
                    yourPhoneNumber: string;
                    numberToCall: string;
                    beginMessage: string | null;
                    guestName?: string | null | undefined;
                    guestEmail?: string | null | undefined;
                    guestCompany?: string | null | undefined;
                  }
                | undefined;
            };
            output: {
              eventType: {
                children: {
                  userId: number | null;
                }[];
                title: string;
                description: string | null;
                team: {
                  name: string;
                  id: number;
                  slug: string | null;
                  parentId: number | null;
                  parent: {
                    slug: string | null;
                  } | null;
                  members: {
                    user: {
                      name: string | null;
                      id: number;
                      email: string;
                      eventTypes: {
                        slug: string;
                      }[];
                    };
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                  }[];
                } | null;
                isRRWeightsEnabled: boolean;
                hosts: {
                  userId: number;
                  isFixed: boolean;
                  priority: number | null;
                  weight: number | null;
                }[];
                workflows: {
                  workflowId: number;
                }[];
                aiPhoneCallConfig: {
                  enabled: boolean;
                  generalPrompt: string | null;
                  beginMessage: string | null;
                  llmId: string | null;
                } | null;
                fieldTranslations: {
                  field: import(".prisma/client").$Enums.EventTypeAutoTranslatedField;
                }[];
              };
            };
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              eventTypeId?: number | undefined;
              users?: number[] | undefined;
            };
            output: {
              id: number;
            };
          }>;
          duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              eventTypeId?: number | undefined;
              users?: number[] | undefined;
              length: number;
              title: string;
              description: string;
              slug: string;
              teamId?: number | null | undefined;
            };
            output: {
              eventType: {
                id: number;
                length: number;
                title: string;
                metadata: import(".prisma/client").Prisma.JsonValue;
                description: string | null;
                userId: number | null;
                timeZone: string | null;
                slug: string;
                position: number;
                locations: import(".prisma/client").Prisma.JsonValue;
                offsetStart: number;
                hidden: boolean;
                profileId: number | null;
                teamId: number | null;
                useEventLevelSelectedCalendars: boolean;
                eventName: string | null;
                parentId: number | null;
                bookingFields: import(".prisma/client").Prisma.JsonValue;
                periodType: import(".prisma/client").$Enums.PeriodType;
                periodStartDate: Date | null;
                periodEndDate: Date | null;
                periodDays: number | null;
                periodCountCalendarDays: boolean | null;
                lockTimeZoneToggleOnBookingPage: boolean;
                requiresConfirmation: boolean;
                requiresConfirmationWillBlockSlot: boolean;
                requiresConfirmationForFreeEmail: boolean;
                requiresBookerEmailVerification: boolean;
                canSendCalVideoTranscriptionEmails: boolean;
                autoTranslateDescriptionEnabled: boolean;
                recurringEvent: import(".prisma/client").Prisma.JsonValue;
                disableGuests: boolean;
                hideCalendarNotes: boolean;
                hideCalendarEventDetails: boolean;
                minimumBookingNotice: number;
                beforeEventBuffer: number;
                afterEventBuffer: number;
                seatsPerTimeSlot: number | null;
                onlyShowFirstAvailableSlot: boolean;
                seatsShowAttendees: boolean | null;
                seatsShowAvailabilityCount: boolean | null;
                schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                scheduleId: number | null;
                price: number;
                currency: string;
                slotInterval: number | null;
                successRedirectUrl: string | null;
                forwardParamsSuccessRedirect: boolean | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                durationLimits: import(".prisma/client").Prisma.JsonValue;
                isInstantEvent: boolean;
                instantMeetingExpiryTimeOffsetInSeconds: number;
                instantMeetingScheduleId: number | null;
                instantMeetingParameters: string[];
                assignAllTeamMembers: boolean;
                assignRRMembersUsingSegment: boolean;
                rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                useEventTypeDestinationCalendarEmail: boolean;
                isRRWeightsEnabled: boolean;
                maxLeadThreshold: number | null;
                allowReschedulingPastBookings: boolean;
                eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                rescheduleWithSameRoundRobinHost: boolean;
                secondaryEmailId: number | null;
              };
            };
          }>;
          bulkEventFetch: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              eventTypes: {
                logo: string | undefined;
                id: number;
                title: string;
                locations: import(".prisma/client").Prisma.JsonValue;
              }[];
            };
          }>;
          bulkUpdateToDefaultLocation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
        }
      >;
      availability: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              schedules: {
                isDefault: boolean;
                name: string;
                id: number;
                availability: {
                  id: number;
                  date: Date | null;
                  userId: number | null;
                  eventTypeId: number | null;
                  startTime: Date;
                  endTime: Date;
                  scheduleId: number | null;
                  days: number[];
                }[];
                timeZone: string | null;
              }[];
            };
          }>;
          user: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              username: string;
              dateFrom: string;
              dateTo: string;
              eventTypeId?: string | number | undefined;
              withSource?: boolean | undefined;
            };
            output: {
              busy: import("@calcom/types/Calendar").EventBusyDetails[];
              timeZone: string;
              dateRanges: import("@calcom/lib/date-ranges").DateRange[];
              oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
              workingHours: import("@calcom/types/schedule").WorkingHours[];
              dateOverrides: import("@calcom/types/schedule").TimeRange[];
              currentSeats:
                | {
                    uid: string;
                    startTime: Date;
                    _count: {
                      attendees: number;
                    };
                  }[]
                | null;
              datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
            };
          }>;
          listTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              limit: number;
              loggedInUsersTz: string;
              cursor?: number | null | undefined;
              teamId?: number | undefined;
              searchString?: string | undefined;
            };
            output: {
              rows: (
                | {
                    id: number;
                    organizationId: number | null;
                    name: string | null;
                    username: string | null;
                    email: string;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    defaultScheduleId: number;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                    avatarUrl?: undefined;
                    profile?: undefined;
                  }
                | {
                    id: number;
                    username: string | null;
                    email: string;
                    avatarUrl: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                    organizationId: number | null;
                    name: string | null;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    defaultScheduleId: number;
                    dateRanges: import("@calcom/lib/date-ranges").DateRange[];
                  }
              )[];
              nextCursor: number | undefined;
              meta: {
                totalRowCount: number;
                isApartOfAnyTeam: boolean;
              };
            };
          }>;
          schedule: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
            import("@trpc/server/unstable-core-do-not-import").RootConfig<{
              ctx: import("../server/createContext").InnerContext;
              meta: object;
              errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (
                  v: import("superjson/dist/types").Class,
                  options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                ) => void;
                registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                  transformer: Omit<
                    import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                    "name"
                  >,
                  name: string
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>,
            {
              get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  scheduleId?: number | undefined;
                  isManagedEventType?: boolean | undefined;
                };
                output: {
                  id: number;
                  name: string;
                  isManaged: boolean;
                  workingHours: import("@calcom/types/schedule").WorkingHours[];
                  schedule: {
                    id: number;
                    date: Date | null;
                    userId: number | null;
                    eventTypeId: number | null;
                    startTime: Date;
                    endTime: Date;
                    scheduleId: number | null;
                    days: number[];
                  }[];
                  availability: {
                    end: Date;
                    userId?: number | null;
                    start: Date;
                  }[][];
                  timeZone: string;
                  dateOverrides: {
                    ranges: import("@calcom/types/schedule").TimeRange[];
                  }[];
                  isDefault: boolean;
                  isLastSchedule: boolean;
                  readOnly: boolean;
                };
              }>;
              create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  name: string;
                  schedule?:
                    | {
                        end: Date;
                        start: Date;
                      }[][]
                    | undefined;
                  eventTypeId?: number | undefined;
                };
                output: {
                  schedule: {
                    name: string;
                    id: number;
                    userId: number;
                    timeZone: string | null;
                  };
                };
              }>;
              delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  scheduleId: number;
                };
                output: void;
              }>;
              update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  scheduleId: number;
                  timeZone?: string | undefined;
                  name?: string | undefined;
                  isDefault?: boolean | undefined;
                  schedule?:
                    | {
                        end: Date;
                        start: Date;
                      }[][]
                    | undefined;
                  dateOverrides?:
                    | {
                        end: Date;
                        start: Date;
                      }[]
                    | undefined;
                };
                output:
                  | {
                      schedule: {
                        name: string;
                        id: number;
                        userId: number;
                      };
                      isDefault: boolean;
                      availability?: undefined;
                      timeZone?: undefined;
                      prevDefaultId?: undefined;
                      currentDefaultId?: undefined;
                    }
                  | {
                      schedule: {
                        name: string;
                        id: number;
                        eventType: {
                          id: number;
                          eventName: string | null;
                        }[];
                        availability: {
                          id: number;
                          date: Date | null;
                          userId: number | null;
                          eventTypeId: number | null;
                          startTime: Date;
                          endTime: Date;
                          scheduleId: number | null;
                          days: number[];
                        }[];
                        userId: number;
                        timeZone: string | null;
                      };
                      availability: import("@calcom/types/schedule").Schedule;
                      timeZone: string;
                      isDefault: boolean;
                      prevDefaultId: number | null;
                      currentDefaultId: number | null;
                    };
              }>;
              duplicate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  scheduleId: number;
                };
                output: {
                  schedule: {
                    name: string;
                    id: number;
                    userId: number;
                    timeZone: string | null;
                  };
                };
              }>;
              getScheduleByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  userId?: number | undefined;
                };
                output:
                  | {
                      hasDefaultSchedule: boolean;
                      id: number;
                      name: string;
                      isManaged: boolean;
                      workingHours: import("@calcom/types/schedule").WorkingHours[];
                      schedule: {
                        id: number;
                        date: Date | null;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                      }[];
                      availability: {
                        end: Date;
                        userId?: number | null;
                        start: Date;
                      }[][];
                      timeZone: string;
                      dateOverrides: {
                        ranges: import("@calcom/types/schedule").TimeRange[];
                      }[];
                      isDefault: boolean;
                      isLastSchedule: boolean;
                      readOnly: boolean;
                    }
                  | {
                      id: number;
                      name: string;
                      availability: never[][];
                      dateOverrides: never[];
                      timeZone: string;
                      workingHours: never[];
                      isDefault: boolean;
                      hasDefaultSchedule: boolean;
                    };
              }>;
              getAllSchedulesByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  userId: number;
                };
                output: {
                  schedules: {
                    isDefault: boolean;
                    readOnly: boolean;
                    name: string;
                    id: number;
                    userId: number;
                  }[];
                };
              }>;
              getScheduleByEventSlug: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: {
                  eventSlug: string;
                };
                output:
                  | {
                      id: number;
                      name: string;
                      isManaged: boolean;
                      workingHours: import("@calcom/types/schedule").WorkingHours[];
                      schedule: {
                        id: number;
                        date: Date | null;
                        userId: number | null;
                        eventTypeId: number | null;
                        startTime: Date;
                        endTime: Date;
                        scheduleId: number | null;
                        days: number[];
                      }[];
                      availability: {
                        end: Date;
                        userId?: number | null;
                        start: Date;
                      }[][];
                      timeZone: string;
                      dateOverrides: {
                        ranges: import("@calcom/types/schedule").TimeRange[];
                      }[];
                      isDefault: boolean;
                      isLastSchedule: boolean;
                      readOnly: boolean;
                    }
                  | {
                      id: number;
                      name: string;
                      availability: never[][];
                      dateOverrides: never[];
                      timeZone: string;
                      workingHours: never[];
                      isDefault: boolean;
                    };
              }>;
              bulkUpdateToDefaultAvailability: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  eventTypeIds: number[];
                  selectedDefaultScheduleId?: number | null | undefined;
                };
                output: import("@prisma/client/runtime/library").GetBatchResult;
              }>;
            }
          >;
          calendarOverlay: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              dateFrom: string | null;
              dateTo: string | null;
              loggedInUsersTz: string;
              calendarsToLoad: {
                externalId: string;
                credentialId: number;
              }[];
            };
            output: import("@calcom/types/Calendar").EventBusyDate[];
          }>;
        }
      >;
      teams: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              isOrg?: boolean | undefined;
            };
            output: {
              membership: {
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              };
              inviteToken:
                | {
                    identifier: string;
                    token: string;
                    expires: Date;
                    expiresInDays: number | null;
                  }
                | undefined;
              metadata: {
                requestedSlug?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              };
              bookingLimits: Partial<
                Record<"PER_DAY" | "PER_MONTH" | "PER_YEAR" | "PER_WEEK", number | undefined>
              > | null;
              logo?: string | undefined;
              name: string;
              id: number;
              children: {
                name: string;
                slug: string | null;
              }[];
              slug: string | null;
              parentId: number | null;
              parent: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                slug: string | null;
                logoUrl: string | null;
                isPrivate: boolean;
                isOrganization: boolean;
              } | null;
              bio: string | null;
              hideBranding: boolean;
              theme: string | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              logoUrl: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              includeManagedEventsInLimits: boolean;
              isOrganization: boolean;
            };
          }>;
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  includeOrgs?: boolean | undefined;
                }
              | undefined;
            output: {
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              inviteToken:
                | {
                    id: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    secondaryEmailId: number | null;
                    identifier: string;
                    token: string;
                    expires: Date;
                    expiresInDays: number | null;
                  }
                | undefined;
              name: string;
              id: number;
              slug: string | null;
              parentId: number | null;
              parent: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              } | null;
              logoUrl: string | null;
              isOrganization: boolean;
              role: import(".prisma/client").$Enums.MembershipRole;
              accepted: boolean;
            }[];
          }>;
          listOwnedTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              inviteToken:
                | {
                    id: number;
                    createdAt: Date;
                    updatedAt: Date;
                    teamId: number | null;
                    secondaryEmailId: number | null;
                    identifier: string;
                    token: string;
                    expires: Date;
                    expiresInDays: number | null;
                  }
                | undefined;
              name: string;
              id: number;
              slug: string | null;
              parentId: number | null;
              parent: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              } | null;
              logoUrl: string | null;
              isOrganization: boolean;
              role: import(".prisma/client").$Enums.MembershipRole;
              accepted: boolean;
            }[];
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              slug: string;
              logo?: string | null | undefined;
            };
            output:
              | {
                  url: string;
                  message: string;
                  team: null;
                }
              | {
                  url: string;
                  message: string;
                  team: {
                    name: string;
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    createdAt: Date;
                    timeZone: string;
                    slug: string | null;
                    parentId: number | null;
                    bookingLimits: import(".prisma/client").Prisma.JsonValue;
                    bio: string | null;
                    weekStart: string;
                    hideBranding: boolean;
                    theme: string | null;
                    timeFormat: number | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    smsLockState: import(".prisma/client").$Enums.SMSLockState;
                    smsLockReviewedByAdmin: boolean;
                    logoUrl: string | null;
                    calVideoLogo: string | null;
                    appLogo: string | null;
                    appIconLogo: string | null;
                    isPrivate: boolean;
                    hideBookATeamMember: boolean;
                    bannerUrl: string | null;
                    isOrganization: boolean;
                    pendingPayment: boolean;
                    isPlatform: boolean;
                    createdByOAuthClientId: string | null;
                    includeManagedEventsInLimits: boolean;
                  };
                };
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              bio?: string | undefined;
              name?: string | undefined;
              logo?: string | null | undefined;
              slug?: string | undefined;
              hideBranding?: boolean | undefined;
              hideBookATeamMember?: boolean | undefined;
              isPrivate?: boolean | undefined;
              brandColor?: string | undefined;
              darkBrandColor?: string | undefined;
              theme?: string | null | undefined;
              bookingLimits?:
                | {
                    PER_DAY?: number | undefined;
                    PER_WEEK?: number | undefined;
                    PER_MONTH?: number | undefined;
                    PER_YEAR?: number | undefined;
                  }
                | null
                | undefined;
              includeManagedEventsInLimits?: boolean | undefined;
            };
            output:
              | {
                  logoUrl: string | null;
                  name: string;
                  bio: string | null;
                  slug: string | null;
                  theme: string | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  bookingLimits: import("@calcom/types/Calendar").IntervalLimit;
                  includeManagedEventsInLimits: boolean;
                }
              | undefined;
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
            };
            output: {
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
            };
          }>;
          removeMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamIds: number[];
              memberIds: number[];
              isOrg?: boolean | undefined;
            };
            output: void;
          }>;
          inviteMember: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              creationSource: "API_V1" | "API_V2" | "WEBAPP";
              teamId: number;
              language: string;
              usernameOrEmail: (
                | string
                | (
                    | string
                    | {
                        role: "ADMIN" | "MEMBER" | "OWNER";
                        email: string;
                      }
                  )[]
              ) &
                (
                  | string
                  | (
                      | string
                      | {
                          role: "ADMIN" | "MEMBER" | "OWNER";
                          email: string;
                        }
                    )[]
                  | undefined
                );
              role?: "ADMIN" | "MEMBER" | "OWNER" | undefined;
              isPlatform?: boolean | undefined;
            };
            output: {
              usernameOrEmail: string | string[];
              numUsersInvited: number;
            };
          }>;
          acceptOrLeave: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              accept: boolean;
            };
            output: void;
          }>;
          changeMemberRole: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              role: "ADMIN" | "MEMBER" | "OWNER";
              teamId: number;
              memberId: number;
            };
            output: void;
          }>;
          getMemberAvailability: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              dateFrom: string;
              dateTo: string;
              memberId: number;
              timezone: string;
            };
            output: {
              busy: import("@calcom/types/Calendar").EventBusyDetails[];
              timeZone: string;
              dateRanges: import("@calcom/lib/date-ranges").DateRange[];
              oooExcludedDateRanges: import("@calcom/lib/date-ranges").DateRange[];
              workingHours: import("@calcom/types/schedule").WorkingHours[];
              dateOverrides: import("@calcom/types/schedule").TimeRange[];
              currentSeats:
                | {
                    uid: string;
                    startTime: Date;
                    _count: {
                      attendees: number;
                    };
                  }[]
                | null;
              datesOutOfOffice: import("@calcom/lib/getUserAvailability").IOutOfOfficeData;
            };
          }>;
          getMembershipbyUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              memberId: number;
            };
            output: {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            } | null;
          }>;
          updateMembership: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              disableImpersonation: boolean;
              memberId: number;
            };
            output: {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            };
          }>;
          publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
            };
            output:
              | {
                  url: string;
                  status: "REQUIRES_PAYMENT" | "REQUIRES_UPGRADE" | "SUCCESS";
                  message?: undefined;
                }
              | {
                  url: string;
                  status?: undefined;
                  message?: undefined;
                }
              | {
                  url: string;
                  message: string;
                  status?: undefined;
                };
          }>;
          getUpgradeable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
              team: {
                children: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                }[];
              } & {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
          }>;
          listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              limit?: number | undefined;
              searchTerm?: string | undefined;
              cursor?: number | null | undefined;
            };
            output: {
              members: {
                username: string | null;
                role: import(".prisma/client").$Enums.MembershipRole;
                profile: import("@calcom/types/UserProfile").UserProfile;
                organizationId: number | null;
                organization: any;
                accepted: boolean;
                disableImpersonation: boolean;
                bookerUrl: string;
                teamId: number;
                lastActiveAt: string | null;
                name: string | null;
                id: number;
                email: string;
                bio: string | null;
                avatarUrl: string | null;
                nonProfileUsername: string | null;
              }[];
              nextCursor: number | undefined;
              meta: {
                totalRowCount: number;
              };
            };
          }>;
          listSimpleMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              name: string | null;
              id: number;
              email: string;
              username: string | null;
              avatarUrl: string | null;
            }[];
          }>;
          legacyListMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              cursor?: number | null | undefined;
              limit?: number | null | undefined;
              teamIds?: number[] | undefined;
              searchText?: string | undefined;
            };
            output: {
              members: ({
                accepted: boolean;
                membershipId: number;
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
              } & {
                nonProfileUsername: string | null;
                profile: import("@calcom/types/UserProfile").UserProfile;
              })[];
              nextCursor: number | undefined;
            };
          }>;
          getUserConnectedApps: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              userIds: number[];
            };
            output: Record<
              number,
              {
                name: string | null;
                logo: string | null;
                externalId: string | null;
                app: {
                  slug: string;
                  categories: import("@calcom/prisma/enums").AppCategories[];
                } | null;
              }[]
            >;
          }>;
          hasTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              hasTeamPlan: boolean;
            };
          }>;
          listInvites: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            }[];
          }>;
          createInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              token?: string | undefined;
            };
            output: {
              token: string;
              inviteLink: string;
            };
          }>;
          setInviteExpiration: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              token: string;
              expiresInDays?: number | undefined;
            };
            output: void;
          }>;
          deleteInvite: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              token: string;
            };
            output: void;
          }>;
          inviteMemberByToken: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              creationSource: "API_V1" | "API_V2" | "WEBAPP";
              token: string;
            };
            output: string;
          }>;
          hasEditPermissionForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              memberId: number;
            };
            output: boolean;
          }>;
          resendInvitation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              email: string;
              teamId: number;
              language: string;
              isOrg?: boolean | undefined;
            };
            output: {
              email: string;
              teamId: number;
              language: string;
              isOrg: boolean;
            };
          }>;
          roundRobinReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              bookingId: number;
            };
            output: {
              bookingId: number;
              reassignedTo: {
                id: number;
                name: string | null;
                email: string;
              };
            };
          }>;
          roundRobinManualReassign: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingId: number;
              teamMemberId: number;
              reassignReason?: string | undefined;
            };
            output: {
              success: boolean;
            };
          }>;
          getRoundRobinHostsToReassign: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              bookingId: number;
              exclude: "fixedHosts";
              cursor?: number | undefined;
              limit?: number | undefined;
              searchTerm?: string | undefined;
            };
            output: {
              items: {
                id: number;
                name: string | null;
                email: string;
                status: string;
              }[];
              nextCursor: number | null;
              totalCount: number;
            };
          }>;
          checkIfMembershipExists: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              value: string;
              teamId: number;
            };
            output: boolean;
          }>;
          addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              userIds: number[];
              eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
          removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              userIds: number[];
              eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
          getInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
            };
            output: {
              name: string;
              id: number;
              cancellationReason: string | null;
            }[];
          }>;
          updateInternalNotesPresets: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
              presets: {
                name: string;
                id: number;
                cancellationReason?: string | undefined;
              }[];
            };
            output: {
              name: string;
              id: number;
              createdAt: Date;
              cancellationReason: string | null;
              teamId: number;
            }[];
          }>;
          hasActiveTeamPlan: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: boolean;
          }>;
        }
      >;
      timezones: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          cityTimezones: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              CalComVersion: string;
            };
            output: {
              city: string;
              timezone: string;
              pop: number;
            }[];
          }>;
        }
      >;
      organizations: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              creationSource: "API_V1" | "API_V2" | "WEBAPP";
              slug: string;
              orgOwnerEmail: string;
              language?: string | undefined;
              seats?: number | undefined;
              pricePerSeat?: number | undefined;
              isPlatform?: boolean | undefined;
              billingPeriod?:
                | import("../server/routers/viewer/organizations/create.schema").BillingPeriod
                | undefined;
            };
            output: {
              userId: number;
              email: string;
              organizationId: number;
              upId: string;
            };
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name?: string | undefined;
              orgId?: string | number | undefined;
              bio?: string | undefined;
              logoUrl?: string | null | undefined;
              calVideoLogo?: string | null | undefined;
              banner?: string | null | undefined;
              slug?: string | undefined;
              hideBranding?: boolean | undefined;
              hideBookATeamMember?: boolean | undefined;
              brandColor?: string | undefined;
              darkBrandColor?: string | undefined;
              theme?: string | null | undefined;
              timeZone?: string | undefined;
              weekStart?: string | undefined;
              timeFormat?: number | undefined;
              metadata?:
                | {
                    requestedSlug?: string | null | undefined;
                    paymentId?: string | undefined;
                    subscriptionId?: string | null | undefined;
                    subscriptionItemId?: string | null | undefined;
                    orgSeats?: number | null | undefined;
                    orgPricePerSeat?: number | null | undefined;
                    migratedToOrgFrom?:
                      | {
                          teamSlug?: string | null | undefined;
                          lastMigrationTime?: string | undefined;
                          reverted?: boolean | undefined;
                          lastRevertTime?: string | undefined;
                        }
                      | undefined;
                    billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                  }
                | undefined;
              lockEventTypeCreation?: boolean | undefined;
              lockEventTypeCreationOptions?: "DELETE" | "HIDE" | undefined;
              adminGetsNoSlotsNotification?: boolean | undefined;
              allowSEOIndexing?: boolean | undefined;
              orgProfileRedirectsToVerifiedDomain?: boolean | undefined;
            };
            output: {
              update: boolean;
              userId: number;
              data: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            };
          }>;
          verifyCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              code: string;
              email: string;
            };
            output: true;
          }>;
          createTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              creationSource: "API_V1" | "API_V2" | "WEBAPP";
              orgId: number;
              teamNames: string[];
              moveTeams: {
                id: number;
                newSlug: string | null;
                shouldMove: boolean;
              }[];
            };
            output: {
              duplicatedSlugs: string[];
            };
          }>;
          listCurrent: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              features: {
                delegationCredential: boolean;
              };
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              name: string;
              id: number;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
              canAdminImpersonate: boolean;
              organizationSettings: {
                lockEventTypeCreationForUsers: boolean | undefined;
                adminGetsNoSlotsNotification: boolean | undefined;
                allowSEOIndexing: boolean | undefined;
                orgProfileRedirectsToVerifiedDomain: boolean | undefined;
                orgAutoAcceptEmail: string | undefined;
              };
              user: {
                role: import(".prisma/client").$Enums.MembershipRole;
                accepted: boolean;
              };
            };
          }>;
          checkIfOrgNeedsUpgrade: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
              team: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              };
            } & {
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            })[];
          }>;
          publish: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
              url: string;
              message: string;
            };
          }>;
          setPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              newPassword: string;
            };
            output: {
              update: boolean;
            };
          }>;
          getMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamIdToExclude?: number | undefined;
              accepted?: boolean | undefined;
              distinctUser?: boolean | undefined;
            };
            output: {
              user: {
                name: string | null;
                id: number;
                email: string;
                username: string | null;
                avatarUrl: string | null;
                completedOnboarding: boolean;
              };
              id: number;
              role: import(".prisma/client").$Enums.MembershipRole;
              userId: number;
              teamId: number;
              disableImpersonation: boolean;
              accepted: boolean;
            }[];
          }>;
          listMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              limit: number;
              cursor?: number | null | undefined;
              searchTerm?: string | undefined;
              expand?: "attributes"[] | undefined;
              filters?:
                | {
                    id: string;
                    value:
                      | {
                          type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                          data: string | number;
                        }
                      | {
                          type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                          data: (string | number)[];
                        }
                      | {
                          type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                          data: {
                            operator:
                              | "endsWith"
                              | "startsWith"
                              | "equals"
                              | "notEquals"
                              | "contains"
                              | "notContains"
                              | "isEmpty"
                              | "isNotEmpty";
                            operand: string;
                          };
                        }
                      | {
                          type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                          data: {
                            operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                            operand: number;
                          };
                        }
                      | {
                          type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                          data: {
                            startDate: string | null;
                            endDate: string | null;
                            preset: string;
                          };
                        };
                  }[]
                | undefined;
              oAuthClientId?: string | undefined;
            };
            output:
              | {
                  canUserGetMembers: boolean;
                  rows: never[];
                  meta: {
                    totalRowCount: number;
                  };
                  nextCursor?: undefined;
                }
              | {
                  rows: {
                    id: number;
                    username: string | null;
                    email: string;
                    timeZone: string;
                    role: import(".prisma/client").$Enums.MembershipRole;
                    accepted: boolean;
                    disableImpersonation: boolean;
                    completedOnboarding: boolean;
                    lastActiveAt: string | null;
                    avatarUrl: string | null;
                    teams: (
                      | {
                          id: number;
                          name: string;
                          slug: string | null;
                        }
                      | undefined
                    )[];
                    attributes:
                      | {
                          weight: number;
                          id: string;
                          contains: string[];
                          value: string;
                          slug: string;
                          attributeId: string;
                          isGroup: boolean;
                        }[]
                      | undefined;
                  }[];
                  nextCursor: number | undefined;
                  meta: {
                    totalRowCount: number;
                  };
                  canUserGetMembers?: undefined;
                };
          }>;
          getBrand: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              slug: string;
              fullDomain: string;
              domainSuffix: string;
              name: string;
              logoUrl: string | null;
              isPlatform: boolean;
            } | null;
          }>;
          getUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              userId?: number | undefined;
            };
            output: {
              username: string | null;
              teams: {
                accepted: boolean;
                name: string;
                id: number;
              }[];
              role: import(".prisma/client").$Enums.MembershipRole;
              name: string | null;
              id: number;
              email: string;
              timeZone: string;
              bio: string | null;
              avatarUrl: string | null;
              schedules: {
                name: string;
                id: number;
              }[];
              profiles: {
                username: string;
              }[];
            };
          }>;
          updateUser: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              role: "ADMIN" | "MEMBER" | "OWNER";
              userId: number;
              timeZone: string;
              username?: string | undefined;
              bio?: string | undefined;
              name?: string | undefined;
              email?: string | undefined;
              avatar?: string | undefined;
              attributeOptions?:
                | {
                    userId: number;
                    attributes: {
                      id: string;
                      options?:
                        | {
                            value: string;
                            label?: string | undefined;
                            weight?: number | undefined;
                          }[]
                        | undefined;
                      value?: string | undefined;
                    }[];
                  }
                | undefined;
            };
            output: {
              success: boolean;
            };
          }>;
          getTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              name: string;
              id: number;
            }[];
          }>;
          addMembersToTeams: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamIds: number[];
              userIds: number[];
            };
            output: {
              success: boolean;
              invitedTotalUsers: number;
            };
          }>;
          addMembersToEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamIds: number[];
              userIds: number[];
              eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
          removeHostsFromEventTypes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userIds: number[];
              eventTypeIds: number[];
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
          bulkDeleteUsers: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userIds: number[];
            };
            output: {
              success: boolean;
              usersDeleted: number;
            };
          }>;
          listOtherTeamMembers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              limit: number;
              query?: string | undefined;
              offset?: number | undefined;
              cursor?: number | null | undefined;
            };
            output: {
              rows: {
                bookerUrl: string;
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                } & {
                  nonProfileUsername: string | null;
                  profile: import("@calcom/types/UserProfile").UserProfile;
                };
                id: number;
                role: import(".prisma/client").$Enums.MembershipRole;
                disableImpersonation: boolean;
                accepted: boolean;
              }[];
              nextCursor: number | null | undefined;
            };
          }>;
          getOtherTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
            };
            output: {
              safeBio: string;
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              slug: string | null;
              parent: {
                id: number;
                slug: string | null;
              } | null;
              bio: string | null;
              logoUrl: string | null;
              isPrivate: boolean;
            };
          }>;
          listOtherTeams: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
            }[];
          }>;
          deleteTeam: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number;
            };
            output: void;
          }>;
          adminGetAll: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              name: string;
              id: number;
              organizationSettings: {
                id: number;
                allowSEOIndexing: boolean;
                organizationId: number;
                isOrganizationConfigured: boolean;
                isOrganizationVerified: boolean;
                orgAutoAcceptEmail: string;
                lockEventTypeCreationForUsers: boolean;
                adminGetsNoSlotsNotification: boolean;
                isAdminReviewed: boolean;
                isAdminAPIEnabled: boolean;
                orgProfileRedirectsToVerifiedDomain: boolean;
              } | null;
              slug: string | null;
              members: {
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                };
              }[];
            }[];
          }>;
          adminGet: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id: number;
            };
            output: {
              metadata: {
                requestedSlug?: string | null | undefined;
                paymentId?: string | undefined;
                subscriptionId?: string | null | undefined;
                subscriptionItemId?: string | null | undefined;
                orgSeats?: number | null | undefined;
                orgPricePerSeat?: number | null | undefined;
                migratedToOrgFrom?:
                  | {
                      teamSlug?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      lastRevertTime?: string | undefined;
                    }
                  | undefined;
                billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
              } | null;
              name: string;
              id: number;
              organizationSettings: {
                isOrganizationConfigured: boolean;
                isOrganizationVerified: boolean;
                orgAutoAcceptEmail: string;
              } | null;
              slug: string | null;
              isOrganization: boolean;
              members: {
                user: {
                  name: string | null;
                  id: number;
                  email: string;
                };
              }[];
            };
          }>;
          adminUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
              name?: string | undefined;
              slug?: string | null | undefined;
              organizationSettings?:
                | {
                    isOrganizationVerified?: boolean | undefined;
                    isOrganizationConfigured?: boolean | undefined;
                    isAdminReviewed?: boolean | undefined;
                    orgAutoAcceptEmail?: string | undefined;
                    isAdminAPIEnabled?: boolean | undefined;
                  }
                | undefined;
            };
            output: {
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
            };
          }>;
          adminVerify: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              orgId: number;
            };
            output: {
              ok: boolean;
              message: string;
            };
          }>;
          adminDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              orgId: number;
            };
            output: {
              ok: boolean;
              message: string;
            };
          }>;
          createPhoneCall: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id?: number | undefined;
              eventTypeId: number;
              users?: number[] | undefined;
              templateType: "CHECK_IN_APPOINTMENT" | "CUSTOM_TEMPLATE";
              yourPhoneNumber: string;
              numberToCall: string;
              calApiKey: string;
              enabled?: boolean | undefined;
              schedulerName?: string | null | undefined;
              guestName?: string | undefined;
              guestEmail?: string | undefined;
              guestCompany?: string | undefined;
              beginMessage?: string | undefined;
              generalPrompt?: string | undefined;
            };
            output: {
              callId: string;
              agentId: string | undefined;
            };
          }>;
          getFacetedValues: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              teams: {
                name: string;
                id: number;
              }[];
              attributes: {
                name: string;
                id: string;
                options: {
                  value: string;
                }[];
              }[];
              roles: ("ADMIN" | "MEMBER" | "OWNER")[];
            };
          }>;
        }
      >;
      delegationCredential: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: (
              | (Omit<
                  {
                    serviceAccountClientId: string | null;
                    id: string;
                    workspacePlatform: {
                      name: string;
                      id: number;
                      slug: string;
                    };
                    createdAt: Date;
                    updatedAt: Date;
                    organizationId: number;
                    enabled: boolean;
                    domain: string;
                    serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "serviceAccountKey"
                > & {
                  serviceAccountKey: undefined;
                })
              | null
            )[];
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              domain: string;
              workspacePlatformSlug: string;
            };
            output:
              | (Omit<
                  {
                    id: string;
                    workspacePlatform: {
                      name: string;
                      slug: string;
                    };
                    createdAt: Date;
                    updatedAt: Date;
                    organizationId: number;
                    enabled: boolean;
                    domain: string;
                  },
                  "serviceAccountKey"
                > & {
                  serviceAccountKey: undefined;
                })
              | null
              | undefined;
          }>;
          add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              domain: string;
              serviceAccountKey: {
                client_id: string;
                private_key: string;
                client_email?: string | undefined;
                tenant_id?: string | undefined;
              } & {
                [k: string]: unknown;
              };
              workspacePlatformSlug: string;
            };
            output:
              | (Omit<
                  {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    organizationId: number;
                    enabled: boolean;
                    domain: string;
                    workspacePlatformId: number;
                    serviceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "serviceAccountKey"
                > & {
                  serviceAccountKey: undefined;
                })
              | null
              | undefined;
          }>;
          toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              enabled: boolean;
            };
            output:
              | (Omit<
                  {
                    id: string;
                    workspacePlatform: {
                      name: string;
                      slug: string;
                    };
                    createdAt: Date;
                    updatedAt: Date;
                    organizationId: number;
                    enabled: boolean;
                    domain: string;
                  },
                  "serviceAccountKey"
                > & {
                  serviceAccountKey: undefined;
                })
              | null;
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
            };
            output: {
              id: string;
            };
          }>;
          listWorkspacePlatforms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              name: string;
              id: number;
              description: string;
              slug: string;
              enabled: boolean;
            }[];
          }>;
        }
      >;
      webhook: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  id?: string | undefined;
                  eventTypeId?: number | undefined;
                  teamId?: number | undefined;
                  appId?: string | undefined;
                  eventTriggers?:
                    | (
                        | "BOOKING_CREATED"
                        | "BOOKING_PAYMENT_INITIATED"
                        | "BOOKING_PAID"
                        | "BOOKING_RESCHEDULED"
                        | "BOOKING_REQUESTED"
                        | "BOOKING_CANCELLED"
                        | "BOOKING_REJECTED"
                        | "BOOKING_NO_SHOW_UPDATED"
                        | "FORM_SUBMITTED"
                        | "MEETING_ENDED"
                        | "MEETING_STARTED"
                        | "RECORDING_READY"
                        | "INSTANT_MEETING"
                        | "RECORDING_TRANSCRIPTION_GENERATED"
                        | "OOO_CREATED"
                        | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                        | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                        | "FORM_SUBMITTED_NO_EVENT"
                      )[]
                    | undefined;
                }
              | undefined;
            output: {
              id: string;
              time: number | null;
              userId: number | null;
              eventTypeId: number | null;
              createdAt: Date;
              teamId: number | null;
              secret: string | null;
              appId: string | null;
              timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              platformOAuthClientId: string | null;
              subscriberUrl: string;
              payloadTemplate: string | null;
              active: boolean;
              eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
              platform: boolean;
            }[];
          }>;
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id?: string | undefined;
              eventTypeId?: number | undefined;
              teamId?: number | undefined;
              webhookId?: string | undefined;
            };
            output: {
              id: string;
              time: number | null;
              userId: number | null;
              teamId: number | null;
              secret: string | null;
              timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              subscriberUrl: string;
              payloadTemplate: string | null;
              active: boolean;
              eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
              platform: boolean;
            };
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id?: string | undefined;
              eventTypeId?: number | undefined;
              teamId?: number | undefined;
              subscriberUrl: string;
              payloadTemplate: string | null;
              active: boolean;
              eventTriggers: (
                | "BOOKING_CREATED"
                | "BOOKING_PAYMENT_INITIATED"
                | "BOOKING_PAID"
                | "BOOKING_RESCHEDULED"
                | "BOOKING_REQUESTED"
                | "BOOKING_CANCELLED"
                | "BOOKING_REJECTED"
                | "BOOKING_NO_SHOW_UPDATED"
                | "FORM_SUBMITTED"
                | "MEETING_ENDED"
                | "MEETING_STARTED"
                | "RECORDING_READY"
                | "INSTANT_MEETING"
                | "RECORDING_TRANSCRIPTION_GENERATED"
                | "OOO_CREATED"
                | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                | "FORM_SUBMITTED_NO_EVENT"
              )[];
              appId?: string | null | undefined;
              secret?: string | null | undefined;
              platform?: boolean | undefined;
              time?: number | null | undefined;
              timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
            };
            output: {
              id: string;
              userId: number | null;
              teamId: number | null;
              eventTypeId: number | null;
              platformOAuthClientId: string | null;
              subscriberUrl: string;
              payloadTemplate: string | null;
              createdAt: Date;
              active: boolean;
              eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
              appId: string | null;
              secret: string | null;
              platform: boolean;
              time: number | null;
              timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
            };
          }>;
          edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              eventTypeId?: number | undefined;
              teamId?: number | undefined;
              payloadTemplate: string | null;
              subscriberUrl?: string | undefined;
              eventTriggers?:
                | (
                    | "BOOKING_CREATED"
                    | "BOOKING_PAYMENT_INITIATED"
                    | "BOOKING_PAID"
                    | "BOOKING_RESCHEDULED"
                    | "BOOKING_REQUESTED"
                    | "BOOKING_CANCELLED"
                    | "BOOKING_REJECTED"
                    | "BOOKING_NO_SHOW_UPDATED"
                    | "FORM_SUBMITTED"
                    | "MEETING_ENDED"
                    | "MEETING_STARTED"
                    | "RECORDING_READY"
                    | "INSTANT_MEETING"
                    | "RECORDING_TRANSCRIPTION_GENERATED"
                    | "OOO_CREATED"
                    | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                    | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                    | "FORM_SUBMITTED_NO_EVENT"
                  )[]
                | undefined;
              active?: boolean | undefined;
              appId?: string | null | undefined;
              secret?: string | null | undefined;
              time?: number | null | undefined;
              timeUnit?: "DAY" | "HOUR" | "MINUTE" | null | undefined;
            };
            output: {
              id: string;
              time: number | null;
              userId: number | null;
              eventTypeId: number | null;
              createdAt: Date;
              teamId: number | null;
              secret: string | null;
              appId: string | null;
              timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              platformOAuthClientId: string | null;
              subscriberUrl: string;
              payloadTemplate: string | null;
              active: boolean;
              eventTriggers: import(".prisma/client").$Enums.WebhookTriggerEvents[];
              platform: boolean;
            } | null;
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              eventTypeId?: number | undefined;
              teamId?: number | undefined;
            };
            output: {
              id: string;
            };
          }>;
          testTrigger: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id?: string | undefined;
              eventTypeId?: number | undefined;
              teamId?: number | undefined;
              type: string;
              url: string;
              secret?: string | undefined;
              payloadTemplate?: string | null | undefined;
            };
            output: {
              message?: string | undefined;
              ok: boolean;
              status: number;
            };
          }>;
          getByViewer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  id?: string | undefined;
                  eventTypeId?: number | undefined;
                  teamId?: number | undefined;
                }
              | undefined;
            output: {
              webhookGroups: {
                teamId?: number | null;
                profile: {
                  slug: string | null;
                  name: string | null;
                  image?: string;
                };
                metadata?: {
                  readOnly: boolean;
                };
                webhooks: import(".prisma/client").Webhook[];
              }[];
              profiles: {
                readOnly?: boolean | undefined;
                slug: string | null;
                name: string | null;
                image?: string;
                teamId: number | null | undefined;
              }[];
            };
          }>;
        }
      >;
      apiKeys: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: string;
              note: string | null;
              userId: number;
              createdAt: Date;
              teamId: number | null;
              appId: string | null;
              expiresAt: Date | null;
              lastUsedAt: Date | null;
              hashedKey: string;
            }[];
          }>;
          findKeyOfType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              appId?: string | undefined;
              teamId?: number | undefined;
            };
            output: {
              id: string;
              note: string | null;
              userId: number;
              createdAt: Date;
              teamId: number | null;
              appId: string | null;
              expiresAt: Date | null;
              lastUsedAt: Date | null;
              hashedKey: string;
            }[];
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              note?: string | null | undefined;
              expiresAt?: Date | null | undefined;
              neverExpires?: boolean | undefined;
              appId?: string | null | undefined;
              teamId?: number | undefined;
            };
            output: string;
          }>;
          edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              note?: string | null | undefined;
              expiresAt?: Date | undefined;
            };
            output: {
              id: string;
              note: string | null;
              userId: number;
              createdAt: Date;
              teamId: number | null;
              appId: string | null;
              expiresAt: Date | null;
              lastUsedAt: Date | null;
              hashedKey: string;
            };
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
              eventTypeId?: number | undefined;
            };
            output: {
              id: string;
            };
          }>;
        }
      >;
      slots: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          getSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startTime: string;
              endTime: string;
              eventTypeId?: number | undefined;
              eventTypeSlug?: string | undefined;
              timeZone?: string | undefined;
              usernameList?: string[] | undefined;
              debug?: boolean | undefined;
              duration?: string | undefined;
              rescheduleUid?: string | null | undefined;
              isTeamEvent?: boolean | undefined;
              orgSlug?: string | null | undefined;
              teamMemberEmail?: string | null | undefined;
              routedTeamMemberIds?: number[] | null | undefined;
              skipContactOwner?: boolean | null | undefined;
              _enableTroubleshooter?: boolean | undefined;
              _bypassCalendarBusyTimes?: boolean | undefined;
              _shouldServeCache?: boolean | undefined;
              routingFormResponseId?: number | undefined;
              email?: string | null | undefined;
            };
            output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
          }>;
          reserveSlot: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              eventTypeId: number;
              slotUtcStartDate: string;
              slotUtcEndDate: string;
              bookingUid?: string | undefined;
              _isDryRun?: boolean | undefined;
            };
            output: {
              uid: string;
            };
          }>;
          isAvailable: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              eventTypeId: number;
              slots: {
                utcStartIso: string;
                utcEndIso: string;
              }[];
            };
            output: {
              slots: {
                status: "available" | "reserved" | "minBookNoticeViolation" | "slotInPast";
                utcStartIso: string;
                utcEndIso: string;
              }[];
            };
          }>;
          removeSelectedSlotMark: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              uid: string | null;
            };
            output: void;
          }>;
        }
      >;
      workflows: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  teamId?: number | undefined;
                  userId?: number | undefined;
                }
              | undefined;
            output: {
              workflows: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
            };
          }>;
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id: number;
            };
            output: {
              name: string;
              id: number;
              time: number | null;
              team: {
                name: string;
                id: number;
                slug: string | null;
                isOrganization: boolean;
                members: {
                  id: number;
                  role: import(".prisma/client").$Enums.MembershipRole;
                  userId: number;
                  teamId: number;
                  disableImpersonation: boolean;
                  accepted: boolean;
                }[];
              } | null;
              userId: number | null;
              teamId: number | null;
              steps: {
                id: number;
                template: import(".prisma/client").$Enums.WorkflowTemplates;
                action: import(".prisma/client").$Enums.WorkflowActions;
                workflowId: number;
                stepNumber: number;
                sendTo: string | null;
                reminderBody: string | null;
                emailSubject: string | null;
                numberRequired: boolean | null;
                sender: string | null;
                numberVerificationPending: boolean;
                includeCalendarEvent: boolean;
              }[];
              isActiveOnAll: boolean;
              trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
              timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              activeOn: {
                eventType: {
                  id: number;
                  length: number;
                  title: string;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  description: string | null;
                  userId: number | null;
                  timeZone: string | null;
                  slug: string;
                  position: number;
                  locations: import(".prisma/client").Prisma.JsonValue;
                  offsetStart: number;
                  hidden: boolean;
                  profileId: number | null;
                  teamId: number | null;
                  useEventLevelSelectedCalendars: boolean;
                  eventName: string | null;
                  parentId: number | null;
                  bookingFields: import(".prisma/client").Prisma.JsonValue;
                  periodType: import(".prisma/client").$Enums.PeriodType;
                  periodStartDate: Date | null;
                  periodEndDate: Date | null;
                  periodDays: number | null;
                  periodCountCalendarDays: boolean | null;
                  lockTimeZoneToggleOnBookingPage: boolean;
                  requiresConfirmation: boolean;
                  requiresConfirmationWillBlockSlot: boolean;
                  requiresConfirmationForFreeEmail: boolean;
                  requiresBookerEmailVerification: boolean;
                  canSendCalVideoTranscriptionEmails: boolean;
                  autoTranslateDescriptionEnabled: boolean;
                  recurringEvent: import(".prisma/client").Prisma.JsonValue;
                  disableGuests: boolean;
                  hideCalendarNotes: boolean;
                  hideCalendarEventDetails: boolean;
                  minimumBookingNotice: number;
                  beforeEventBuffer: number;
                  afterEventBuffer: number;
                  seatsPerTimeSlot: number | null;
                  onlyShowFirstAvailableSlot: boolean;
                  seatsShowAttendees: boolean | null;
                  seatsShowAvailabilityCount: boolean | null;
                  schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                  scheduleId: number | null;
                  price: number;
                  currency: string;
                  slotInterval: number | null;
                  successRedirectUrl: string | null;
                  forwardParamsSuccessRedirect: boolean | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  durationLimits: import(".prisma/client").Prisma.JsonValue;
                  isInstantEvent: boolean;
                  instantMeetingExpiryTimeOffsetInSeconds: number;
                  instantMeetingScheduleId: number | null;
                  instantMeetingParameters: string[];
                  assignAllTeamMembers: boolean;
                  assignRRMembersUsingSegment: boolean;
                  rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                  useEventTypeDestinationCalendarEmail: boolean;
                  isRRWeightsEnabled: boolean;
                  maxLeadThreshold: number | null;
                  allowReschedulingPastBookings: boolean;
                  eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                  rescheduleWithSameRoundRobinHost: boolean;
                  secondaryEmailId: number | null;
                };
              }[];
              activeOnTeams: {
                team: {
                  name: string;
                  id: number;
                  metadata: import(".prisma/client").Prisma.JsonValue;
                  createdAt: Date;
                  timeZone: string;
                  slug: string | null;
                  parentId: number | null;
                  bookingLimits: import(".prisma/client").Prisma.JsonValue;
                  bio: string | null;
                  weekStart: string;
                  hideBranding: boolean;
                  theme: string | null;
                  timeFormat: number | null;
                  brandColor: string | null;
                  darkBrandColor: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  smsLockReviewedByAdmin: boolean;
                  logoUrl: string | null;
                  calVideoLogo: string | null;
                  appLogo: string | null;
                  appIconLogo: string | null;
                  isPrivate: boolean;
                  hideBookATeamMember: boolean;
                  bannerUrl: string | null;
                  isOrganization: boolean;
                  pendingPayment: boolean;
                  isPlatform: boolean;
                  createdByOAuthClientId: string | null;
                  includeManagedEventsInLimits: boolean;
                };
              }[];
            } | null;
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId?: number | undefined;
            };
            output: {
              workflow: {
                id: number;
                position: number;
                name: string;
                userId: number | null;
                teamId: number | null;
                isActiveOnAll: boolean;
                trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                time: number | null;
                timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
              };
            };
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: number;
            };
            output: {
              id: number;
            };
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              id: number;
              time: number | null;
              steps: {
                id: number;
                template: "CANCELLED" | "REMINDER" | "CUSTOM" | "RESCHEDULED" | "COMPLETED" | "RATING";
                action:
                  | "EMAIL_HOST"
                  | "EMAIL_ATTENDEE"
                  | "SMS_ATTENDEE"
                  | "SMS_NUMBER"
                  | "EMAIL_ADDRESS"
                  | "WHATSAPP_ATTENDEE"
                  | "WHATSAPP_NUMBER";
                workflowId: number;
                stepNumber: number;
                sendTo: string | null;
                reminderBody: string | null;
                emailSubject: string | null;
                numberRequired: boolean | null;
                sender: string | null;
                includeCalendarEvent: boolean;
                senderName: string | null;
              }[];
              trigger:
                | "AFTER_HOSTS_CAL_VIDEO_NO_SHOW"
                | "AFTER_GUESTS_CAL_VIDEO_NO_SHOW"
                | "BEFORE_EVENT"
                | "EVENT_CANCELLED"
                | "NEW_EVENT"
                | "AFTER_EVENT"
                | "RESCHEDULE_EVENT";
              timeUnit: "DAY" | "HOUR" | "MINUTE" | null;
              activeOn: number[];
              isActiveOnAll?: boolean | undefined;
            };
            output: {
              workflow:
                | ({
                    team: {
                      name: string;
                      id: number;
                      slug: string | null;
                      isOrganization: boolean;
                      members: {
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                      }[];
                    } | null;
                    steps: {
                      id: number;
                      template: import(".prisma/client").$Enums.WorkflowTemplates;
                      action: import(".prisma/client").$Enums.WorkflowActions;
                      workflowId: number;
                      stepNumber: number;
                      sendTo: string | null;
                      reminderBody: string | null;
                      emailSubject: string | null;
                      numberRequired: boolean | null;
                      sender: string | null;
                      numberVerificationPending: boolean;
                      includeCalendarEvent: boolean;
                    }[];
                    activeOn: {
                      eventType: {
                        id: number;
                        length: number;
                        title: string;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        description: string | null;
                        userId: number | null;
                        timeZone: string | null;
                        slug: string;
                        position: number;
                        locations: import(".prisma/client").Prisma.JsonValue;
                        offsetStart: number;
                        hidden: boolean;
                        profileId: number | null;
                        teamId: number | null;
                        useEventLevelSelectedCalendars: boolean;
                        eventName: string | null;
                        parentId: number | null;
                        bookingFields: import(".prisma/client").Prisma.JsonValue;
                        periodType: import(".prisma/client").$Enums.PeriodType;
                        periodStartDate: Date | null;
                        periodEndDate: Date | null;
                        periodDays: number | null;
                        periodCountCalendarDays: boolean | null;
                        lockTimeZoneToggleOnBookingPage: boolean;
                        requiresConfirmation: boolean;
                        requiresConfirmationWillBlockSlot: boolean;
                        requiresConfirmationForFreeEmail: boolean;
                        requiresBookerEmailVerification: boolean;
                        canSendCalVideoTranscriptionEmails: boolean;
                        autoTranslateDescriptionEnabled: boolean;
                        recurringEvent: import(".prisma/client").Prisma.JsonValue;
                        disableGuests: boolean;
                        hideCalendarNotes: boolean;
                        hideCalendarEventDetails: boolean;
                        minimumBookingNotice: number;
                        beforeEventBuffer: number;
                        afterEventBuffer: number;
                        seatsPerTimeSlot: number | null;
                        onlyShowFirstAvailableSlot: boolean;
                        seatsShowAttendees: boolean | null;
                        seatsShowAvailabilityCount: boolean | null;
                        schedulingType: import(".prisma/client").$Enums.SchedulingType | null;
                        scheduleId: number | null;
                        price: number;
                        currency: string;
                        slotInterval: number | null;
                        successRedirectUrl: string | null;
                        forwardParamsSuccessRedirect: boolean | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        durationLimits: import(".prisma/client").Prisma.JsonValue;
                        isInstantEvent: boolean;
                        instantMeetingExpiryTimeOffsetInSeconds: number;
                        instantMeetingScheduleId: number | null;
                        instantMeetingParameters: string[];
                        assignAllTeamMembers: boolean;
                        assignRRMembersUsingSegment: boolean;
                        rrSegmentQueryValue: import(".prisma/client").Prisma.JsonValue;
                        useEventTypeDestinationCalendarEmail: boolean;
                        isRRWeightsEnabled: boolean;
                        maxLeadThreshold: number | null;
                        allowReschedulingPastBookings: boolean;
                        eventTypeColor: import(".prisma/client").Prisma.JsonValue;
                        rescheduleWithSameRoundRobinHost: boolean;
                        secondaryEmailId: number | null;
                      };
                    }[];
                    activeOnTeams: {
                      team: {
                        name: string;
                        id: number;
                        metadata: import(".prisma/client").Prisma.JsonValue;
                        createdAt: Date;
                        timeZone: string;
                        slug: string | null;
                        parentId: number | null;
                        bookingLimits: import(".prisma/client").Prisma.JsonValue;
                        bio: string | null;
                        weekStart: string;
                        hideBranding: boolean;
                        theme: string | null;
                        timeFormat: number | null;
                        brandColor: string | null;
                        darkBrandColor: string | null;
                        smsLockState: import(".prisma/client").$Enums.SMSLockState;
                        smsLockReviewedByAdmin: boolean;
                        logoUrl: string | null;
                        calVideoLogo: string | null;
                        appLogo: string | null;
                        appIconLogo: string | null;
                        isPrivate: boolean;
                        hideBookATeamMember: boolean;
                        bannerUrl: string | null;
                        isOrganization: boolean;
                        pendingPayment: boolean;
                        isPlatform: boolean;
                        createdByOAuthClientId: string | null;
                        includeManagedEventsInLimits: boolean;
                      };
                    }[];
                  } & {
                    name: string;
                    id: number;
                    time: number | null;
                    userId: number | null;
                    position: number;
                    teamId: number | null;
                    isActiveOnAll: boolean;
                    trigger: import(".prisma/client").$Enums.WorkflowTriggerEvents;
                    timeUnit: import(".prisma/client").$Enums.TimeUnit | null;
                  })
                | null;
            };
          }>;
          activateEventType: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              eventTypeId: number;
              workflowId: number;
            };
            output: void;
          }>;
          sendVerificationCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              phoneNumber: string;
            };
            output: void;
          }>;
          verifyPhoneNumber: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              code: string;
              phoneNumber: string;
              teamId?: number | undefined;
            };
            output: boolean;
          }>;
          getVerifiedNumbers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId?: number | undefined;
            };
            output: {
              id: number;
              userId: number | null;
              phoneNumber: string;
              teamId: number | null;
            }[];
          }>;
          getVerifiedEmails: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId?: number | undefined;
            };
            output: string[];
          }>;
          verifyEmailCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              code: string;
              email: string;
              teamId?: number | undefined;
            };
            output: true;
          }>;
          getWorkflowActionOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              label: string;
              value:
                | "EMAIL_HOST"
                | "EMAIL_ATTENDEE"
                | "SMS_ATTENDEE"
                | "SMS_NUMBER"
                | "EMAIL_ADDRESS"
                | "WHATSAPP_ATTENDEE"
                | "WHATSAPP_NUMBER";
              needsTeamsUpgrade: boolean;
            }[];
          }>;
          filteredList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  filters?:
                    | {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            output:
              | {
                  filtered: import("@calcom/ee/workflows/components/WorkflowListPage").WorkflowType[];
                  totalCount: number;
                }
              | undefined;
          }>;
          getAllActiveWorkflows: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              eventType: {
                id: number;
                metadata: {
                  config?:
                    | {
                        useHostSchedulesForTeamEvent?: boolean | undefined;
                      }
                    | undefined;
                  smartContractAddress?: string | undefined;
                  blockchainId?: number | undefined;
                  multipleDuration?: number[] | undefined;
                  giphyThankYouPage?: string | undefined;
                  additionalNotesRequired?: boolean | undefined;
                  disableSuccessPage?: boolean | undefined;
                  disableStandardEmails?:
                    | {
                        all?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                        confirmation?:
                          | {
                              host?: boolean | undefined;
                              attendee?: boolean | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  managedEventConfig?:
                    | {
                        unlockedFields?:
                          | {
                              users?: true | undefined;
                              children?: true | undefined;
                              length?: true | undefined;
                              title?: true | undefined;
                              metadata?: true | undefined;
                              description?: true | undefined;
                              destinationCalendar?: true | undefined;
                              profile?: true | undefined;
                              team?: true | undefined;
                              schedule?: true | undefined;
                              availability?: true | undefined;
                              hashedLink?: true | undefined;
                              secondaryEmail?: true | undefined;
                              userId?: true | undefined;
                              customInputs?: true | undefined;
                              timeZone?: true | undefined;
                              slug?: true | undefined;
                              position?: true | undefined;
                              locations?: true | undefined;
                              offsetStart?: true | undefined;
                              hidden?: true | undefined;
                              profileId?: true | undefined;
                              teamId?: true | undefined;
                              useEventLevelSelectedCalendars?: true | undefined;
                              eventName?: true | undefined;
                              parentId?: true | undefined;
                              bookingFields?: true | undefined;
                              periodType?: true | undefined;
                              periodStartDate?: true | undefined;
                              periodEndDate?: true | undefined;
                              periodDays?: true | undefined;
                              periodCountCalendarDays?: true | undefined;
                              lockTimeZoneToggleOnBookingPage?: true | undefined;
                              requiresConfirmation?: true | undefined;
                              requiresConfirmationWillBlockSlot?: true | undefined;
                              requiresConfirmationForFreeEmail?: true | undefined;
                              requiresBookerEmailVerification?: true | undefined;
                              canSendCalVideoTranscriptionEmails?: true | undefined;
                              autoTranslateDescriptionEnabled?: true | undefined;
                              recurringEvent?: true | undefined;
                              disableGuests?: true | undefined;
                              hideCalendarNotes?: true | undefined;
                              hideCalendarEventDetails?: true | undefined;
                              minimumBookingNotice?: true | undefined;
                              beforeEventBuffer?: true | undefined;
                              afterEventBuffer?: true | undefined;
                              seatsPerTimeSlot?: true | undefined;
                              onlyShowFirstAvailableSlot?: true | undefined;
                              seatsShowAttendees?: true | undefined;
                              seatsShowAvailabilityCount?: true | undefined;
                              schedulingType?: true | undefined;
                              scheduleId?: true | undefined;
                              price?: true | undefined;
                              currency?: true | undefined;
                              slotInterval?: true | undefined;
                              successRedirectUrl?: true | undefined;
                              forwardParamsSuccessRedirect?: true | undefined;
                              bookingLimits?: true | undefined;
                              durationLimits?: true | undefined;
                              isInstantEvent?: true | undefined;
                              instantMeetingExpiryTimeOffsetInSeconds?: true | undefined;
                              instantMeetingScheduleId?: true | undefined;
                              instantMeetingParameters?: true | undefined;
                              assignAllTeamMembers?: true | undefined;
                              assignRRMembersUsingSegment?: true | undefined;
                              rrSegmentQueryValue?: true | undefined;
                              useEventTypeDestinationCalendarEmail?: true | undefined;
                              isRRWeightsEnabled?: true | undefined;
                              maxLeadThreshold?: true | undefined;
                              allowReschedulingPastBookings?: true | undefined;
                              eventTypeColor?: true | undefined;
                              rescheduleWithSameRoundRobinHost?: true | undefined;
                              secondaryEmailId?: true | undefined;
                              hosts?: true | undefined;
                              owner?: true | undefined;
                              bookings?: true | undefined;
                              webhooks?: true | undefined;
                              parent?: true | undefined;
                              workflows?: true | undefined;
                              instantMeetingSchedule?: true | undefined;
                              aiPhoneCallConfig?: true | undefined;
                              fieldTranslations?: true | undefined;
                              selectedCalendars?: true | undefined;
                              _count?: true | undefined;
                            }
                          | undefined;
                      }
                    | undefined;
                  requiresConfirmationThreshold?:
                    | {
                        time: number;
                        unit:
                          | "milliseconds"
                          | "seconds"
                          | "minutes"
                          | "hours"
                          | "days"
                          | "months"
                          | "years"
                          | "dates";
                      }
                    | undefined;
                  bookerLayouts?:
                    | {
                        enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                        defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                      }
                    | null
                    | undefined;
                  apps?: unknown;
                } | null;
                teamId?: number | null | undefined;
                parent?:
                  | {
                      id: number | null;
                      teamId: number | null;
                    }
                  | null
                  | undefined;
                userId?: number | null | undefined;
              };
            };
            output: import("@calcom/ee/workflows/lib/types").Workflow[];
          }>;
        }
      >;
      saml: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number | null;
            };
            output: import("@calcom/ee/sso/lib/saml").SSOConnection | null;
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number | null;
              encodedRawMetadata: string;
            };
            output: import("@boxyhq/saml-jackson").SAMLSSORecord;
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number | null;
            };
            output: void;
          }>;
          updateOIDC: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              teamId: number | null;
              clientId: string;
              clientSecret: string;
              wellKnownUrl: string;
            };
            output: import("@boxyhq/saml-jackson").OIDCSSORecord;
          }>;
        }
      >;
      dsync: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              organizationId: number | null;
              provider: string;
            };
            output: import("@boxyhq/saml-jackson").Directory;
          }>;
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              organizationId: number | null;
            };
            output: import("@boxyhq/saml-jackson").Directory | null;
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              organizationId: number | null;
              directoryId: string;
            };
            output: null;
          }>;
          teamGroupMapping: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
            import("@trpc/server/unstable-core-do-not-import").RootConfig<{
              ctx: import("../server/createContext").InnerContext;
              meta: object;
              errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (
                  v: import("superjson/dist/types").Class,
                  options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                ) => void;
                registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                  transformer: Omit<
                    import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                    "name"
                  >,
                  name: string
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>,
            {
              get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: {
                  teamGroupMapping: {
                    id: number;
                    name: string;
                    slug: string | null;
                    directoryId: string;
                    groupNames: string[];
                  }[];
                };
              }>;
              create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  name: string;
                  teamId: number;
                  directoryId: string;
                };
                output: {
                  newGroupName: string;
                };
              }>;
              delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  teamId: number;
                  groupName: string;
                };
                output: {
                  deletedGroupName: string;
                };
              }>;
            }
          >;
        }
      >;
      insights: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          eventsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              empty: boolean;
              created: {
                count: number;
                deltaPrevious: number;
              };
              completed: {
                count: number;
                deltaPrevious: number;
              };
              rescheduled: {
                count: number;
                deltaPrevious: number;
              };
              cancelled: {
                count: number;
                deltaPrevious: number;
              };
              rating: {
                count: number;
                deltaPrevious: number;
              };
              no_show: {
                count: number;
                deltaPrevious: number;
              };
              no_show_guest: {
                count: number;
                deltaPrevious: number;
              };
              csat: {
                count: number;
                deltaPrevious: number;
              };
              previousRange: {
                startDate: string;
                endDate: string;
              };
            };
          }>;
          eventsTimeline: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              timeView: "day" | "month" | "year" | "week";
              userId?: number | null | undefined;
              eventTypeId?: number | null | undefined;
              teamId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
            };
            output: {
              Month: string;
              Created: number;
              Completed: number;
              Rescheduled: number;
              Cancelled: number;
              "No-Show (Host)": number;
              "No-Show (Guest)": number;
            }[];
          }>;
          popularEventTypes: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: (
              | {
                  eventTypeId?: undefined;
                  eventTypeName?: undefined;
                  count?: undefined;
                }
              | {
                  eventTypeId: number | null;
                  eventTypeName: string;
                  count: number;
                }
            )[];
          }>;
          averageEventDuration: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              Date: string;
              Average: number;
            }[];
          }>;
          membersWithMostBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              count: number;
            }[];
          }>;
          membersWithLeastBookings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              count: number;
            }[];
          }>;
          teamListForUser: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: import("@calcom/features/insights/server/trpc-router").IResultTeamList[];
          }>;
          userList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              isAll: boolean | null;
              teamId?: number | undefined;
            };
            output: {
              name: string | null;
              id: number;
              email: string;
              username: string | null;
              avatarUrl: string | null;
            }[];
          }>;
          eventTypeList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              isAll?: boolean | undefined;
            };
            output: {
              id: number;
              title: string;
              team: {
                name: string;
              } | null;
              slug: string;
              teamId: number | null;
            }[];
          }>;
          recentRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              rating: number | null;
              feedback: string | null;
            }[];
          }>;
          membersWithMostNoShow: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              count: number;
            }[];
          }>;
          membersWithHighestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              averageRating: number | null;
            }[];
          }>;
          membersWithLowestRatings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              userId: number | null;
              user: Omit<
                {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                },
                "avatarUrl"
              > & {
                avatarUrl: string;
              };
              emailMd5: string;
              averageRating: number | null;
            }[];
          }>;
          rawData: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              teamId?: number | null | undefined;
              userId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              eventTypeId?: number | null | undefined;
            };
            output: {
              data: string;
              filename: string;
            };
          }>;
          getRoutingFormsForFilters: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              isAll: boolean;
              userId?: number | undefined;
              teamId?: number | undefined;
            };
            output: {
              name: string;
              id: string;
              _count: {
                responses: number;
              };
            }[];
          }>;
          routingFormsByStatus: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              isAll: boolean;
              columnFilters: {
                id: string;
                value:
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                      data: string | number;
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                      data: (string | number)[];
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                      data: {
                        operator:
                          | "endsWith"
                          | "startsWith"
                          | "equals"
                          | "notEquals"
                          | "contains"
                          | "notContains"
                          | "isEmpty"
                          | "isNotEmpty";
                        operand: string;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                      data: {
                        operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                        operand: number;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                      data: {
                        startDate: string | null;
                        endDate: string | null;
                        preset: string;
                      };
                    };
              }[];
              teamId?: number | undefined;
              userId?: number | undefined;
              memberUserIds?: number[] | undefined;
              routingFormId?: string | undefined;
              cursor?: number | undefined;
              limit?: number | undefined;
              sorting?:
                | {
                    id: string;
                    desc: boolean;
                  }[]
                | undefined;
            };
            output: {
              total: number;
              totalWithoutBooking: number;
              totalWithBooking: number;
            };
          }>;
          routingFormResponses: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              isAll: boolean;
              columnFilters: {
                id: string;
                value:
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                      data: string | number;
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                      data: (string | number)[];
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                      data: {
                        operator:
                          | "endsWith"
                          | "startsWith"
                          | "equals"
                          | "notEquals"
                          | "contains"
                          | "notContains"
                          | "isEmpty"
                          | "isNotEmpty";
                        operand: string;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                      data: {
                        operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                        operand: number;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                      data: {
                        startDate: string | null;
                        endDate: string | null;
                        preset: string;
                      };
                    };
              }[];
              teamId?: number | undefined;
              userId?: number | undefined;
              memberUserIds?: number[] | undefined;
              routingFormId?: string | undefined;
              cursor?: number | undefined;
              limit?: number | undefined;
              sorting?:
                | {
                    id: string;
                    desc: boolean;
                  }[]
                | undefined;
            };
            output: {
              total: number;
              data: (Omit<
                {
                  id: number;
                  createdAt: Date;
                  bookingUid: string | null;
                  formId: string;
                  response: import(".prisma/client").Prisma.JsonValue;
                  formName: string;
                  bookingStatus: import(".prisma/client").$Enums.BookingStatus | null;
                  bookingStatusOrder: number | null;
                  bookingCreatedAt: Date | null;
                  bookingAttendees: import(".prisma/client").Prisma.JsonValue;
                  bookingUserId: number | null;
                  bookingUserName: string | null;
                  bookingUserEmail: string | null;
                  bookingUserAvatarUrl: string | null;
                  bookingAssignmentReason: string | null;
                  bookingStartTime: Date | null;
                  bookingEndTime: Date | null;
                },
                "response" | "bookingAttendees" | "responseLowercase"
              > & {
                response: Record<string, import("@calcom/features/insights/lib/types").ResponseValue>;
                responseLowercase: Record<
                  string,
                  import("@calcom/features/insights/lib/types").ResponseValue
                >;
                bookingAttendees?: {
                  name: string;
                  email: string;
                  timeZone: string;
                }[];
              })[];
              nextCursor: number | undefined;
            };
          }>;
          routingFormResponsesForDownload: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              isAll: boolean;
              columnFilters: {
                id: string;
                value:
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.SINGLE_SELECT;
                      data: string | number;
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.MULTI_SELECT;
                      data: (string | number)[];
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.TEXT;
                      data: {
                        operator:
                          | "endsWith"
                          | "startsWith"
                          | "equals"
                          | "notEquals"
                          | "contains"
                          | "notContains"
                          | "isEmpty"
                          | "isNotEmpty";
                        operand: string;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.NUMBER;
                      data: {
                        operator: "eq" | "neq" | "gt" | "gte" | "lt" | "lte";
                        operand: number;
                      };
                    }
                  | {
                      type: import("@calcom/features/data-table").ColumnFilterType.DATE_RANGE;
                      data: {
                        startDate: string | null;
                        endDate: string | null;
                        preset: string;
                      };
                    };
              }[];
              teamId?: number | undefined;
              userId?: number | undefined;
              memberUserIds?: number[] | undefined;
              routingFormId?: string | undefined;
              cursor?: number | undefined;
              limit?: number | undefined;
              sorting?:
                | {
                    id: string;
                    desc: boolean;
                  }[]
                | undefined;
            };
            output: {
              data: {
                "Response ID": number;
                "Form Name": string;
                "Submitted At": string;
                "Has Booking": boolean;
                "Booking Status": string;
                "Booking Created At": string;
                "Booking Start Time": string;
                "Booking End Time": string;
                "Attendee Name": any;
                "Attendee Email": any;
                "Attendee Timezone": any;
                "Assignment Reason": string;
                "Routed To Name": string;
                "Routed To Email": string;
              }[];
              nextCursor: number | undefined;
            };
          }>;
          getRoutingFormFieldOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              isAll: boolean;
              userId?: number | undefined;
              teamId?: number | undefined;
              routingFormId?: string | undefined;
            };
            output:
              | (
                  | {
                      id: string;
                      type: string;
                      label: string;
                      identifier?: string | undefined;
                      placeholder?: string | undefined;
                      selectText?: string | undefined;
                      required?: boolean | undefined;
                      deleted?: boolean | undefined;
                      options?:
                        | {
                            id: string | null;
                            label: string;
                          }[]
                        | undefined;
                    }
                  | {
                      id: string;
                      type: string;
                      label: string;
                      routerId: string;
                      options?:
                        | {
                            id: string | null;
                            label: string;
                          }[]
                        | undefined;
                      deleted?: boolean | undefined;
                      required?: boolean | undefined;
                      identifier?: string | undefined;
                      placeholder?: string | undefined;
                      selectText?: string | undefined;
                    }
                )[]
              | undefined;
          }>;
          failedBookingsByField: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              isAll: boolean;
              userId?: number | undefined;
              teamId?: number | undefined;
              routingFormId?: string | undefined;
            };
            output: Record<
              string,
              Record<
                string,
                {
                  optionId: string;
                  count: number;
                  optionLabel: string;
                }[]
              >
            >;
          }>;
          routingFormResponsesHeaders: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              isAll: boolean;
              userId?: number | undefined;
              teamId?: number | undefined;
              routingFormId?: string | undefined;
            };
            output: {
              id: string;
              label: string;
              type: string;
              options:
                | {
                    id: string | null;
                    label: string;
                  }[]
                | undefined;
            }[];
          }>;
          routedToPerPeriod: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              period: "perDay" | "perWeek" | "perMonth";
              userId?: number | null | undefined;
              eventTypeId?: number | null | undefined;
              teamId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              cursor?:
                | {
                    userCursor?: number | undefined;
                    periodCursor?: string | undefined;
                  }
                | undefined;
              routingFormId?: string | undefined;
              limit?: number | undefined;
              searchQuery?: string | undefined;
            };
            output: {
              users: {
                data: {
                  performance: "above_average" | "at_average" | "below_average" | "median";
                  totalBookings: number;
                  id: number;
                  name: string | null;
                  email: string;
                  avatarUrl: string | null;
                }[];
                nextCursor: number | undefined;
              };
              periodStats: {
                data: {
                  userId: number;
                  period_start: Date;
                  total: number;
                }[];
                nextCursor: string | undefined;
              };
            };
          }>;
          routedToPerPeriodCsv: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startDate: string;
              endDate: string;
              period: "perDay" | "perWeek" | "perMonth";
              userId?: number | null | undefined;
              eventTypeId?: number | null | undefined;
              teamId?: number | null | undefined;
              memberUserId?: number | null | undefined;
              isAll?: boolean | undefined;
              searchQuery?: string | undefined;
              routingFormId?: string | undefined;
            };
            output: {
              data: string;
              filename: string;
            };
          }>;
          getUserRelevantTeamRoutingForms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: (Omit<
              {
                id: string;
                description: string | null;
                position: number;
                routes: {
                  [key: string]: any;
                } | null;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                fields: {
                  [key: string]: any;
                } | null;
                userId: number;
                teamId: number | null;
                disabled: boolean;
                settings: {
                  [key: string]: any;
                } | null;
                updatedById: number | null;
              },
              "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
            > & {
              routes: import("@calcom/routing-forms/types/types").Routes;
              fields: import("@calcom/routing-forms/types/types").Fields;
              settings: import("zod").TypeOf<typeof import("@calcom/prisma/zod-utils").RoutingFormSettings>;
              createdAt: string;
              updatedAt: string;
              connectedForms: {
                name: string;
                description: string | null;
                id: string;
              }[];
              routers: {
                name: string;
                description: string | null;
                id: string;
              }[];
              teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
            })[];
          }>;
        }
      >;
      payments: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          chargeCard: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              bookingId: number;
            };
            output: {
              id: number;
              uid: string;
              appId: string | null;
              bookingId: number;
              amount: number;
              fee: number;
              currency: string;
              success: boolean;
              refunded: boolean;
              data: import(".prisma/client").Prisma.JsonValue;
              externalId: string;
              paymentOption: import(".prisma/client").$Enums.PaymentOption | null;
            };
          }>;
        }
      >;
      appRoutingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          forms: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input:
              | {
                  filters?:
                    | {
                        teamIds?: number[] | undefined;
                        userIds?: number[] | undefined;
                        upIds?: string[] | undefined;
                      }
                    | undefined;
                }
              | null
              | undefined;
            output: {
              filtered: (
                | {
                    hasError: boolean;
                    form: Omit<
                      {
                        team: {
                          name: string;
                          id: number;
                        } | null;
                        _count: {
                          responses: number;
                        };
                      } & {
                        settings: import(".prisma/client").Prisma.JsonValue;
                        name: string;
                        id: string;
                        description: string | null;
                        userId: number;
                        createdAt: Date;
                        updatedAt: Date;
                        position: number;
                        teamId: number | null;
                        fields: import(".prisma/client").Prisma.JsonValue;
                        routes: import(".prisma/client").Prisma.JsonValue;
                        disabled: boolean;
                        updatedById: number | null;
                      },
                      "settings" | "createdAt" | "updatedAt" | "fields" | "routes"
                    > & {
                      routes: import("@calcom/routing-forms/types/types").Routes;
                      fields: import("@calcom/routing-forms/types/types").Fields;
                      settings: import("zod").TypeOf<
                        typeof import("@calcom/prisma/zod-utils").RoutingFormSettings
                      >;
                      createdAt: string;
                      updatedAt: string;
                      connectedForms: {
                        name: string;
                        description: string | null;
                        id: string;
                      }[];
                      routers: {
                        name: string;
                        description: string | null;
                        id: string;
                      }[];
                      teamMembers: import("@calcom/routing-forms/types/types").SerializableFormTeamMembers[];
                    };
                    readOnly: boolean;
                  }
                | {
                    form: {
                      routes: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodRoutes>;
                      fields: import("zod").TypeOf<typeof import("@calcom/routing-forms/zod").zodFields>;
                      team: {
                        name: string;
                        id: number;
                      } | null;
                      _count: {
                        responses: number;
                      };
                      settings: import(".prisma/client").Prisma.JsonValue;
                      name: string;
                      id: string;
                      description: string | null;
                      userId: number;
                      createdAt: Date;
                      updatedAt: Date;
                      position: number;
                      teamId: number | null;
                      disabled: boolean;
                      updatedById: number | null;
                    };
                    readOnly: boolean;
                    hasError: boolean;
                  }
              )[];
              totalCount: number;
            };
          }>;
          formQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id: string;
            };
            output:
              | import("@calcom/routing-forms/types/types").SerializableForm<
                  {
                    team: {
                      name: string;
                      slug: string | null;
                    } | null;
                    _count: {
                      responses: number;
                    };
                  } & {
                    settings: import(".prisma/client").Prisma.JsonValue;
                    name: string;
                    id: string;
                    description: string | null;
                    userId: number;
                    createdAt: Date;
                    updatedAt: Date;
                    position: number;
                    teamId: number | null;
                    fields: import(".prisma/client").Prisma.JsonValue;
                    routes: import(".prisma/client").Prisma.JsonValue;
                    disabled: boolean;
                    updatedById: number | null;
                  }
                >
              | null;
          }>;
          getResponseWithFormFields: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              formResponseId: number;
            };
            output: {
              response: import("@calcom/routing-forms/types/types").FormResponse;
              form: import("@calcom/routing-forms/types/types").SerializableForm<
                {
                  user: {
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    username: string | null;
                    theme: string | null;
                    brandColor: string | null;
                    darkBrandColor: string | null;
                    movedToProfileId: number | null;
                    organization: {
                      slug: string | null;
                    } | null;
                  } & {
                    nonProfileUsername: string | null;
                    profile: import("@calcom/types/UserProfile").UserProfile;
                  };
                  team: {
                    id: number;
                    metadata: import(".prisma/client").Prisma.JsonValue;
                    slug: string | null;
                    parentId: number | null;
                    parent: {
                      slug: string | null;
                    } | null;
                    members: {
                      id: number;
                      role: import(".prisma/client").$Enums.MembershipRole;
                      userId: number;
                      teamId: number;
                      disableImpersonation: boolean;
                      accepted: boolean;
                    }[];
                  } | null;
                  settings: import(".prisma/client").Prisma.JsonValue;
                  name: string;
                  id: string;
                  description: string | null;
                  userId: number;
                  createdAt: Date;
                  updatedAt: Date;
                  position: number;
                  teamId: number | null;
                  fields: import(".prisma/client").Prisma.JsonValue;
                  routes: import(".prisma/client").Prisma.JsonValue;
                  disabled: boolean;
                  updatedById: number | null;
                } & {
                  user: {
                    metadata: {
                      proPaidForByTeamId?: number | undefined;
                      stripeCustomerId?: string | undefined;
                      vitalSettings?:
                        | {
                            connected?: boolean | undefined;
                            selectedParam?: string | undefined;
                            sleepValue?: number | undefined;
                          }
                        | undefined;
                      isPremium?: boolean | undefined;
                      sessionTimeout?: number | undefined;
                      defaultConferencingApp?:
                        | {
                            appSlug?: string | undefined;
                            appLink?: string | undefined;
                          }
                        | undefined;
                      defaultBookerLayouts?:
                        | {
                            enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                            defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                          }
                        | null
                        | undefined;
                      emailChangeWaitingForVerification?: string | undefined;
                      migratedToOrgFrom?:
                        | {
                            username?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            revertTime?: string | undefined;
                          }
                        | undefined;
                    } | null;
                    movedToProfileId: number | null;
                    username: string | null;
                    nonProfileUsername: string | null;
                    profile: {
                      organization: {
                        slug: string | null;
                      } | null;
                    };
                  };
                  team: {
                    metadata: {
                      requestedSlug?: string | null | undefined;
                      paymentId?: string | undefined;
                      subscriptionId?: string | null | undefined;
                      subscriptionItemId?: string | null | undefined;
                      orgSeats?: number | null | undefined;
                      orgPricePerSeat?: number | null | undefined;
                      migratedToOrgFrom?:
                        | {
                            teamSlug?: string | null | undefined;
                            lastMigrationTime?: string | undefined;
                            reverted?: boolean | undefined;
                            lastRevertTime?: string | undefined;
                          }
                        | undefined;
                      billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                    } | null;
                    parent?:
                      | {
                          slug: string | null;
                        }
                      | null
                      | undefined;
                  };
                  userOrigin: string;
                  teamOrigin: string;
                  nonOrgUsername: string | null;
                  nonOrgTeamslug: string | null;
                }
              >;
            };
          }>;
          formMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              id: string;
              description?: string | null | undefined;
              disabled?: boolean | undefined;
              fields?:
                | (
                    | {
                        id: string;
                        type: string;
                        label: string;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                        required?: boolean | undefined;
                        deleted?: boolean | undefined;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                      }
                    | {
                        id: string;
                        type: string;
                        label: string;
                        routerId: string;
                        options?:
                          | {
                              id: string | null;
                              label: string;
                            }[]
                          | undefined;
                        deleted?: boolean | undefined;
                        required?: boolean | undefined;
                        identifier?: string | undefined;
                        placeholder?: string | undefined;
                        selectText?: string | undefined;
                      }
                  )[]
                | undefined;
              routes?:
                | (
                    | {
                        id: string;
                        queryValue:
                          | {
                              type: "group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            }
                          | {
                              type: "switch_group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            };
                        action: {
                          type: import("@calcom/routing-forms/zod").RouteActionType;
                          value: string;
                          eventTypeId?: number | undefined;
                        };
                        name?: string | undefined;
                        attributeIdForWeights?: string | undefined;
                        attributeRoutingConfig?:
                          | {
                              skipContactOwner?: boolean | undefined;
                              salesforce?:
                                | {
                                    rrSkipToAccountLookupField?: boolean | undefined;
                                    rrSKipToAccountLookupFieldName?: string | undefined;
                                  }
                                | undefined;
                            }
                          | null
                          | undefined;
                        attributesQueryValue?:
                          | {
                              type: "group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            }
                          | {
                              type: "switch_group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            }
                          | undefined;
                        fallbackAttributesQueryValue?:
                          | {
                              type: "group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            }
                          | {
                              type: "switch_group";
                              id?: string | undefined;
                              children1?:
                                | Record<
                                    string,
                                    {
                                      type?: string | undefined;
                                      properties?:
                                        | {
                                            field?: any;
                                            operator?: any;
                                            value?: any;
                                            valueSrc?: any;
                                            valueError?: (string | null)[] | undefined;
                                            valueType?: any;
                                          }
                                        | undefined;
                                    }
                                  >
                                | undefined;
                              properties?: any;
                            }
                          | undefined;
                        isFallback?: boolean | undefined;
                      }
                    | {
                        id: string;
                        isRouter: true;
                        name?: string | undefined;
                      }
                  )[]
                | null
                | undefined;
              addFallback?: boolean | undefined;
              duplicateFrom?: string | null | undefined;
              teamId?: number | null | undefined;
              shouldConnect?: boolean | undefined;
              settings?:
                | {
                    emailOwnerOnSubmission: boolean;
                    sendUpdatesTo?: number[] | undefined;
                    sendToAll?: boolean | undefined;
                  }
                | null
                | undefined;
            };
            output: {
              settings: import(".prisma/client").Prisma.JsonValue;
              name: string;
              id: string;
              description: string | null;
              userId: number;
              createdAt: Date;
              updatedAt: Date;
              position: number;
              teamId: number | null;
              fields: import(".prisma/client").Prisma.JsonValue;
              routes: import(".prisma/client").Prisma.JsonValue;
              disabled: boolean;
              updatedById: number | null;
            };
          }>;
          deleteForm: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
            };
            output: import("@prisma/client/runtime/library").GetBatchResult;
          }>;
          report: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              formId: string;
              jsonLogicQuery: {
                logic: Record<string, any> | null;
              };
              limit?: number | undefined;
              cursor?: number | null | undefined;
            };
            output: {
              nextCursor: number | null;
              headers: string[];
              responses: string[][];
            };
          }>;
          getAttributesForTeam: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
            };
            output: {
              name: string;
              id: string;
              type: import(".prisma/client").$Enums.AttributeType;
              options: {
                id: string;
                contains: string[];
                value: string;
                slug: string;
                isGroup: boolean;
              }[];
              slug: string;
              isWeightsEnabled: boolean;
            }[];
          }>;
          getIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              formId: string;
            };
            output:
              | {
                  incompleteBookingActions: {
                    id: number;
                    data: import(".prisma/client").Prisma.JsonValue;
                    credentialId: number | null;
                    enabled: boolean;
                    formId: string;
                    actionType: "SALESFORCE";
                  }[];
                  credentials: ({
                    team: {
                      name: string;
                    } | null;
                  } & {
                    key: import(".prisma/client").Prisma.JsonValue;
                    id: number;
                    type: string;
                    userId: number | null;
                    teamId: number | null;
                    subscriptionId: string | null;
                    billingCycleStart: number | null;
                    appId: string | null;
                    paymentStatus: string | null;
                    invalid: boolean | null;
                  })[];
                }
              | undefined;
          }>;
          saveIncompleteBookingSettings: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              enabled: boolean;
              formId: string;
              actionType: "SALESFORCE";
              data?: Record<string, any> | undefined;
              credentialId?: number | undefined;
            };
            output: void;
          }>;
        }
      >;
      appBasecamp3: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          projects: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: any;
          }>;
          projectMutation: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              projectId: string;
            };
            output: any;
          }>;
        }
      >;
      features: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              type: import(".prisma/client").$Enums.FeatureType | null;
              description: string | null;
              createdAt: Date | null;
              updatedAt: Date | null;
              slug: string;
              enabled: boolean;
              updatedBy: number | null;
              lastUsedAt: Date | null;
              stale: boolean | null;
            }[];
          }>;
          map: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: import("@calcom/features/flags/config").AppFlags;
          }>;
        }
      >;
      appsRouter: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          listLocal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              category: string;
            };
            output: (
              | {
                  name: string;
                  slug: string;
                  logo: string;
                  title: string | undefined;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  description: string;
                  keys: import(".prisma/client").Prisma.JsonObject | null;
                  dirName: string;
                  enabled: boolean;
                  isTemplate: boolean | undefined;
                }
              | {
                  name: string;
                  slug: string;
                  logo: string;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  title: string | undefined;
                  description: string;
                  enabled: boolean;
                  dirName: string;
                  keys: Record<string, string> | null;
                  isTemplate?: undefined;
                }
            )[];
          }>;
          toggle: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              slug: string;
              enabled: boolean;
            };
            output: boolean;
          }>;
          saveKeys: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              type: string;
              slug: string;
              dirName: string;
              keys?: unknown;
              fromEnabled?: boolean | undefined;
            };
            output: void;
          }>;
          checkForGCal: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: boolean;
          }>;
          setDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              slug: string;
            };
            output: void;
          }>;
          updateAppCredentials: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              key: {} & {
                [k: string]: unknown;
              };
              credentialId: number;
            };
            output: boolean;
          }>;
          queryForDependencies: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: string[] | undefined;
            output:
              | {
                  name: string;
                  slug: string;
                  installed: boolean;
                }[]
              | undefined;
          }>;
          checkGlobalKeys: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              slug: string;
            };
            output: boolean;
          }>;
        }
      >;
      users: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              userId: number;
            };
            output: {
              user: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              };
            };
          }>;
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              name: string | null;
              id: number;
              role: import(".prisma/client").$Enums.UserPermissionRole;
              metadata: import(".prisma/client").Prisma.JsonValue;
              locale: string | null;
              startTime: number;
              endTime: number;
              creationSource: import(".prisma/client").$Enums.CreationSource | null;
              email: string;
              timeZone: string;
              username: string | null;
              emailVerified: Date | null;
              bio: string | null;
              avatarUrl: string | null;
              weekStart: string;
              bufferTime: number;
              hideBranding: boolean;
              theme: string | null;
              appTheme: string | null;
              createdDate: Date;
              trialEndsAt: Date | null;
              lastActiveAt: Date | null;
              defaultScheduleId: number | null;
              completedOnboarding: boolean;
              timeFormat: number | null;
              twoFactorSecret: string | null;
              twoFactorEnabled: boolean;
              backupCodes: string | null;
              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
              identityProviderId: string | null;
              invitedTo: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              allowDynamicBooking: boolean | null;
              allowSEOIndexing: boolean | null;
              receiveMonthlyDigestEmail: boolean | null;
              verified: boolean | null;
              disableImpersonation: boolean;
              locked: boolean;
              isPlatformManaged: boolean;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              referralLinkId: string | null;
              organizationId: number | null;
              movedToProfileId: number | null;
            }[];
          }>;
          add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              role: "USER" | "ADMIN";
              email: string;
              timeZone: string;
              weekStart: string;
              identityProvider: "CAL" | "GOOGLE" | "SAML";
              name?: string | null | undefined;
              locale?: string | null | undefined;
              username?: string | null | undefined;
              bio?: string | null | undefined;
              avatarUrl?: string | null | undefined;
              theme?: string | null | undefined;
              defaultScheduleId?: number | null | undefined;
              timeFormat?: number | null | undefined;
              allowDynamicBooking?: boolean | null | undefined;
            };
            output: {
              user: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              };
              message: string;
            };
          }>;
          update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name?: string | null | undefined;
              role?: "USER" | "ADMIN" | undefined;
              locale?: string | null | undefined;
              email?: string | undefined;
              timeZone?: string | undefined;
              username?: string | null | undefined;
              bio?: string | null | undefined;
              avatarUrl?: string | null | undefined;
              weekStart?: string | undefined;
              theme?: string | null | undefined;
              defaultScheduleId?: number | null | undefined;
              timeFormat?: number | null | undefined;
              identityProvider?: "CAL" | "GOOGLE" | "SAML" | undefined;
              allowDynamicBooking?: boolean | null | undefined;
            };
            output: {
              user: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                metadata: import(".prisma/client").Prisma.JsonValue;
                locale: string | null;
                startTime: number;
                endTime: number;
                creationSource: import(".prisma/client").$Enums.CreationSource | null;
                email: string;
                timeZone: string;
                username: string | null;
                emailVerified: Date | null;
                bio: string | null;
                avatarUrl: string | null;
                weekStart: string;
                bufferTime: number;
                hideBranding: boolean;
                theme: string | null;
                appTheme: string | null;
                createdDate: Date;
                trialEndsAt: Date | null;
                lastActiveAt: Date | null;
                defaultScheduleId: number | null;
                completedOnboarding: boolean;
                timeFormat: number | null;
                twoFactorSecret: string | null;
                twoFactorEnabled: boolean;
                backupCodes: string | null;
                identityProvider: import(".prisma/client").$Enums.IdentityProvider;
                identityProviderId: string | null;
                invitedTo: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                allowDynamicBooking: boolean | null;
                allowSEOIndexing: boolean | null;
                receiveMonthlyDigestEmail: boolean | null;
                verified: boolean | null;
                disableImpersonation: boolean;
                locked: boolean;
                isPlatformManaged: boolean;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                referralLinkId: string | null;
                organizationId: number | null;
                movedToProfileId: number | null;
              };
              message: string;
            };
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId: number;
            };
            output: {
              message: string;
            };
          }>;
        }
      >;
      oAuth: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          getClient: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              clientId: string;
            };
            output: {
              name: string;
              logo: string | null;
              clientId: string;
              redirectUri: string;
            } | null;
          }>;
          addClient: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              logo: string;
              redirectUri: string;
            };
            output: {
              clientSecret: string;
              name: string;
              logo: string | null;
              clientId: string;
              redirectUri: string;
            };
          }>;
          generateAuthCode: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              clientId: string;
              scopes: string[];
              teamSlug?: string | undefined;
            };
            output: {
              client: {
                name: string;
                clientId: string;
                redirectUri: string;
              };
              authorizationCode: string;
            };
          }>;
        }
      >;
      googleWorkspace: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          checkForGWorkspace: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              id: number | undefined;
            };
          }>;
          getUsersFromGWorkspace: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: string[];
          }>;
          removeCurrentGoogleWorkspaceConnection: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: void;
            output: {
              deleted: number;
            };
          }>;
        }
      >;
      admin: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          listPaginated: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              limit: number;
              cursor?: number | null | undefined;
              searchTerm?: string | null | undefined;
            };
            output: {
              rows: {
                name: string | null;
                id: number;
                role: import(".prisma/client").$Enums.UserPermissionRole;
                email: string;
                timeZone: string;
                username: string | null;
                locked: boolean;
              }[];
              nextCursor: number | undefined;
              meta: {
                totalRowCount: number;
              };
            };
          }>;
          sendPasswordReset: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId: number;
            };
            output: {
              success: boolean;
            };
          }>;
          lockUserAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId: number;
              locked: boolean;
            };
            output: {
              success: boolean;
              userId: number;
              locked: boolean;
            };
          }>;
          toggleFeatureFlag: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              slug: string;
              enabled: boolean;
            };
            output: {
              type: import(".prisma/client").$Enums.FeatureType | null;
              description: string | null;
              createdAt: Date | null;
              updatedAt: Date | null;
              slug: string;
              enabled: boolean;
              updatedBy: number | null;
              lastUsedAt: Date | null;
              stale: boolean | null;
            };
          }>;
          removeTwoFactor: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId: number;
            };
            output: {
              success: boolean;
              userId: number;
            };
          }>;
          getSMSLockStateTeamsUsers: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: {
              users: {
                locked: {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                }[];
                reviewNeeded: {
                  name: string | null;
                  id: number;
                  email: string;
                  username: string | null;
                  avatarUrl: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                }[];
              };
              teams: {
                locked: {
                  name: string;
                  id: number;
                  slug: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  logoUrl: string | null;
                }[];
                reviewNeeded: {
                  name: string;
                  id: number;
                  slug: string | null;
                  smsLockState: import(".prisma/client").$Enums.SMSLockState;
                  logoUrl: string | null;
                }[];
              };
            };
          }>;
          setSMSLockState: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId?: number | undefined;
              username?: string | undefined;
              teamId?: number | undefined;
              teamSlug?: string | undefined;
              lock?: boolean | undefined;
            };
            output: {
              name: string | null;
              locked: boolean | undefined;
            };
          }>;
          createSelfHostedLicense: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              billingPeriod: "MONTHLY" | "ANNUALLY";
              billingType: "PER_BOOKING" | "PER_USER";
              entityCount: number;
              entityPrice: number;
              overages: number;
              billingEmail: string;
            };
            output: {
              stripeCheckoutUrl: string;
            };
          }>;
          workspacePlatform: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
            import("@trpc/server/unstable-core-do-not-import").RootConfig<{
              ctx: import("../server/createContext").InnerContext;
              meta: object;
              errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (
                  v: import("superjson/dist/types").Class,
                  options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                ) => void;
                registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                  transformer: Omit<
                    import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                    "name"
                  >,
                  name: string
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>,
            {
              list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
                input: void;
                output: (Omit<
                  {
                    name: string;
                    id: number;
                    description: string;
                    slug: string;
                    enabled: boolean;
                  },
                  "defaultServiceAccountKey"
                > & {
                  defaultServiceAccountKey: undefined;
                })[];
              }>;
              add: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  name: string;
                  description: string;
                  slug: string;
                  defaultServiceAccountKey?:
                    | import("zod").objectInputType<
                        {
                          private_key: import("zod").ZodString;
                          client_email: import("zod").ZodOptional<import("zod").ZodString>;
                          client_id: import("zod").ZodString;
                          tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                        },
                        import("zod").ZodTypeAny,
                        "passthrough"
                      >
                    | undefined;
                  enabled?: boolean | undefined;
                };
                output: Omit<
                  {
                    name: string;
                    id: number;
                    description: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    enabled: boolean;
                    defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "defaultServiceAccountKey"
                > & {
                  defaultServiceAccountKey: undefined;
                };
              }>;
              update: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  name: string;
                  id: number;
                  description: string;
                };
                output: Omit<
                  {
                    name: string;
                    id: number;
                    description: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    enabled: boolean;
                    defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "defaultServiceAccountKey"
                > & {
                  defaultServiceAccountKey: undefined;
                };
              }>;
              updateServiceAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  id: number;
                  defaultServiceAccountKey: {
                    client_id: string;
                    private_key: string;
                    client_email?: string | undefined;
                    tenant_id?: string | undefined;
                  } & {
                    [k: string]: unknown;
                  };
                };
                output: Omit<
                  {
                    name: string;
                    id: number;
                    description: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    enabled: boolean;
                    defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "defaultServiceAccountKey"
                > & {
                  defaultServiceAccountKey: undefined;
                };
              }>;
              toggleEnabled: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  id: number;
                  enabled: boolean;
                };
                output: Omit<
                  {
                    name: string;
                    id: number;
                    description: string;
                    createdAt: Date;
                    updatedAt: Date;
                    slug: string;
                    enabled: boolean;
                    defaultServiceAccountKey: import(".prisma/client").Prisma.JsonValue;
                  },
                  "defaultServiceAccountKey"
                > & {
                  defaultServiceAccountKey: undefined;
                };
              }>;
            }
          >;
        }
      >;
      attributes: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          list: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: void;
            output: ({
              options: {
                id: string;
                contains: string[];
                value: string;
                slug: string;
                attributeId: string;
                isGroup: boolean;
              }[];
            } & {
              name: string;
              id: string;
              type: import(".prisma/client").$Enums.AttributeType;
              createdAt: Date;
              updatedAt: Date;
              slug: string;
              teamId: number;
              enabled: boolean;
              isWeightsEnabled: boolean;
              usersCanEditRelation: boolean;
              isLocked: boolean;
            })[];
          }>;
          get: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              id: string;
            };
            output: {
              name: string;
              id: string;
              type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
              options: {
                value: string;
                id?: string | undefined;
                isGroup?: boolean | undefined;
                assignedUsers?: number | undefined;
                contains?: string[] | undefined;
              }[];
              isLocked?: boolean | undefined;
              isWeightsEnabled?: boolean | undefined;
            };
          }>;
          getByUserId: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              userId: number;
            };
            output: {
              id: string;
              name: string;
              type: import("@calcom/prisma/enums").AttributeType;
              options: {
                id: string;
                slug: string;
                value: string;
                weight: number | null;
                createdByDSyncId: string | null;
              }[];
            }[];
          }>;
          create: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
              options: {
                value: string;
                isGroup?: boolean | undefined;
              }[];
              isLocked?: boolean | undefined;
            };
            output: {
              id: string;
              teamId: number;
              type: import(".prisma/client").$Enums.AttributeType;
              name: string;
              slug: string;
              enabled: boolean;
              usersCanEditRelation: boolean;
              createdAt: Date;
              updatedAt: Date;
              isWeightsEnabled: boolean;
              isLocked: boolean;
            };
          }>;
          edit: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              name: string;
              type: "TEXT" | "NUMBER" | "SINGLE_SELECT" | "MULTI_SELECT";
              options: {
                value: string;
                id?: string | undefined;
                isGroup?: boolean | undefined;
                contains?: string[] | undefined;
              }[];
              attributeId: string;
              isLocked?: boolean | undefined;
              isWeightsEnabled?: boolean | undefined;
            };
            output: {
              id: string;
            };
          }>;
          delete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              id: string;
            };
            output: {
              name: string;
              id: string;
              type: import(".prisma/client").$Enums.AttributeType;
              createdAt: Date;
              updatedAt: Date;
              slug: string;
              teamId: number;
              enabled: boolean;
              isWeightsEnabled: boolean;
              usersCanEditRelation: boolean;
              isLocked: boolean;
            };
          }>;
          toggleActive: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              attributeId: string;
            };
            output: {
              enabled: boolean;
              id: string;
            };
          }>;
          assignUserToAttribute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              userId: number;
              attributes: {
                id: string;
                options?:
                  | {
                      value: string;
                      label?: string | undefined;
                      weight?: number | undefined;
                    }[]
                  | undefined;
                value?: string | undefined;
              }[];
            };
            output: {
              success: boolean;
              message: string;
            };
          }>;
          bulkAssignAttributes: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              attributes: {
                id: string;
                options?:
                  | {
                      value: string;
                      label?: string | undefined;
                    }[]
                  | undefined;
                value?: string | undefined;
              }[];
              userIds: number[];
            };
            output: {
              success: boolean;
              message: string;
              results: {
                userId: number;
                success: boolean;
                message?: string;
              }[];
            };
          }>;
          findTeamMembersMatchingAttributeLogic: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              teamId: number;
              attributesQueryValue:
                | {
                    type: "group";
                    id?: string | undefined;
                    children1?:
                      | Record<
                          string,
                          {
                            type?: string | undefined;
                            properties?:
                              | {
                                  field?: any;
                                  operator?: any;
                                  value?: any;
                                  valueSrc?: any;
                                  valueError?: (string | null)[] | undefined;
                                  valueType?: any;
                                }
                              | undefined;
                          }
                        >
                      | undefined;
                    properties?: any;
                  }
                | {
                    type: "switch_group";
                    id?: string | undefined;
                    children1?:
                      | Record<
                          string,
                          {
                            type?: string | undefined;
                            properties?:
                              | {
                                  field?: any;
                                  operator?: any;
                                  value?: any;
                                  valueSrc?: any;
                                  valueError?: (string | null)[] | undefined;
                                  valueType?: any;
                                }
                              | undefined;
                          }
                        >
                      | undefined;
                    properties?: any;
                  }
                | null;
              isPreview?: boolean | undefined;
              _enablePerf?: boolean | undefined;
              _concurrency?: number | undefined;
            };
            output:
              | {
                  troubleshooter:
                    | {
                        type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                        data: Record<string, any>;
                      }
                    | undefined;
                  mainWarnings: string[] | null;
                  fallbackWarnings: string[] | null;
                  result: null;
                }
              | {
                  mainWarnings: string[] | null;
                  fallbackWarnings: string[] | null;
                  troubleshooter:
                    | {
                        type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                        data: Record<string, any>;
                      }
                    | undefined;
                  result: {
                    id: number;
                    name: string | null;
                    email: string;
                  }[];
                };
          }>;
        }
      >;
      highPerf: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          getTeamSchedule: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
            input: {
              startTime: string;
              endTime: string;
              eventTypeId?: number | undefined;
              eventTypeSlug?: string | undefined;
              timeZone?: string | undefined;
              usernameList?: string[] | undefined;
              debug?: boolean | undefined;
              duration?: string | undefined;
              rescheduleUid?: string | null | undefined;
              isTeamEvent?: boolean | undefined;
              orgSlug?: string | null | undefined;
              teamMemberEmail?: string | null | undefined;
              routedTeamMemberIds?: number[] | null | undefined;
              skipContactOwner?: boolean | null | undefined;
              _enableTroubleshooter?: boolean | undefined;
              _bypassCalendarBusyTimes?: boolean | undefined;
              _shouldServeCache?: boolean | undefined;
              routingFormResponseId?: number | undefined;
              email?: string | null | undefined;
            };
            output: import("../server/routers/viewer/slots/util").IGetAvailableSlots;
          }>;
        }
      >;
      routingForms: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
        import("@trpc/server/unstable-core-do-not-import").RootConfig<{
          ctx: import("../server/createContext").InnerContext;
          meta: object;
          errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
          transformer: {
            stringify: (object: any) => string;
            parse: <T = unknown>(string: string) => T;
            serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
            deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
            registerClass: (
              v: import("superjson/dist/types").Class,
              options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
            ) => void;
            registerSymbol: (v: symbol, identifier?: string | undefined) => void;
            registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
              transformer: Omit<
                import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                "name"
              >,
              name: string
            ) => void;
            allowErrorProps: (...props: string[]) => void;
          };
        }>,
        {
          findTeamMembersMatchingAttributeLogicOfRoute: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
            input: {
              formId: string;
              response: Record<
                string,
                {
                  label: string;
                  value: (string | number | string[]) & (string | number | string[] | undefined);
                }
              >;
              route: {
                id: string;
                queryValue:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    };
                action: {
                  type: import("@calcom/routing-forms/zod").RouteActionType;
                  value: string;
                  eventTypeId?: number | undefined;
                };
                name?: string | undefined;
                attributeIdForWeights?: string | undefined;
                attributeRoutingConfig?:
                  | {
                      skipContactOwner?: boolean | undefined;
                      salesforce?:
                        | {
                            rrSkipToAccountLookupField?: boolean | undefined;
                            rrSKipToAccountLookupFieldName?: string | undefined;
                          }
                        | undefined;
                    }
                  | null
                  | undefined;
                attributesQueryValue?:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | undefined;
                fallbackAttributesQueryValue?:
                  | {
                      type: "group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | {
                      type: "switch_group";
                      id?: string | undefined;
                      children1?:
                        | Record<
                            string,
                            {
                              type?: string | undefined;
                              properties?:
                                | {
                                    field?: any;
                                    operator?: any;
                                    value?: any;
                                    valueSrc?: any;
                                    valueError?: (string | null)[] | undefined;
                                    valueType?: any;
                                  }
                                | undefined;
                            }
                          >
                        | undefined;
                      properties?: any;
                    }
                  | undefined;
                isFallback?: boolean | undefined;
              };
              isPreview?: boolean | undefined;
              _enablePerf?: boolean | undefined;
              _concurrency?: number | undefined;
            };
            output:
              | {
                  troubleshooter: null;
                  result: null;
                  contactOwnerEmail: null;
                  checkedFallback: boolean;
                  mainWarnings: never[];
                  fallbackWarnings: never[];
                  eventTypeRedirectUrl: null;
                  isUsingAttributeWeights: boolean;
                }
              | {
                  contactOwnerEmail: string | null;
                  troubleshooter:
                    | {
                        type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                        data: Record<string, any>;
                      }
                    | undefined;
                  checkedFallback: boolean;
                  mainWarnings: string[] | null;
                  fallbackWarnings: string[] | null;
                  eventTypeRedirectUrl: string;
                  isUsingAttributeWeights: boolean;
                  result: null;
                }
              | {
                  troubleshooter:
                    | {
                        type: import("@calcom/lib/raqb/findTeamMembersMatchingAttributeLogic").TroubleshooterCase;
                        data: Record<string, any>;
                      }
                    | undefined;
                  contactOwnerEmail: string | null;
                  checkedFallback: boolean;
                  mainWarnings: string[] | null;
                  fallbackWarnings: string[] | null;
                  result: {
                    users: {
                      id: number;
                      name: string | null;
                      email: string;
                    }[];
                    perUserData: {
                      bookingsCount: Record<number, number>;
                      bookingShortfalls: Record<number, number> | null;
                      calibrations: Record<number, number> | null;
                      weights: Record<number, number> | null;
                    } | null;
                  };
                  isUsingAttributeWeights: boolean;
                  eventTypeRedirectUrl: string;
                };
          }>;
          public: import("@trpc/server/unstable-core-do-not-import").CreateRouterInner<
            import("@trpc/server/unstable-core-do-not-import").RootConfig<{
              ctx: import("../server/createContext").InnerContext;
              meta: object;
              errorShape: import("@trpc/server/unstable-core-do-not-import").DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (object: any) => import("superjson/dist/types").SuperJSONResult;
                deserialize: <T_1 = unknown>(payload: import("superjson/dist/types").SuperJSONResult) => T_1;
                registerClass: (
                  v: import("superjson/dist/types").Class,
                  options?: string | import("superjson/dist/class-registry").RegisterOptions | undefined
                ) => void;
                registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                registerCustom: <I, O extends import("superjson/dist/types").JSONValue>(
                  transformer: Omit<
                    import("superjson/dist/custom-transformer-registry").CustomTransfomer<I, O>,
                    "name"
                  >,
                  name: string
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>,
            {
              response: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
                input: {
                  formFillerId: string;
                  formId: string;
                  response: Record<
                    string,
                    {
                      label: string;
                      value: (string | number | string[]) & (string | number | string[] | undefined);
                      identifier?: string | undefined;
                    }
                  >;
                  chosenRouteId?: string | undefined;
                  isPreview?: boolean | undefined;
                };
                output: {
                  isPreview: boolean;
                  formResponse:
                    | {
                        id: number;
                        createdAt: Date;
                        formFillerId: string;
                        formId: string;
                        response: import(".prisma/client").Prisma.JsonValue;
                        routedToBookingUid: string | null;
                        chosenRouteId: string | null;
                      }
                    | {
                        id: number;
                        formId: string;
                        response: Record<
                          string,
                          {
                            label: string;
                            value: (string | number | string[]) & (string | number | string[] | undefined);
                            identifier?: string | undefined;
                          }
                        >;
                        chosenRouteId: string | null;
                        createdAt: Date;
                        updatedAt: Date;
                      };
                  teamMembersMatchingAttributeLogic: number[] | null;
                  attributeRoutingConfig:
                    | {
                        skipContactOwner?: boolean | undefined;
                        salesforce?:
                          | {
                              rrSkipToAccountLookupField?: boolean | undefined;
                              rrSKipToAccountLookupFieldName?: string | undefined;
                            }
                          | undefined;
                      }
                    | null
                    | undefined;
                  timeTaken: Record<string, number | null>;
                };
              }>;
            }
          >;
        }
      >;
    } & {
      me: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input:
          | {
              includePasswordAdded?: boolean | undefined;
            }
          | undefined;
        output:
          | {
              isTeamAdminOrOwner: boolean;
              passwordAdded?: boolean | undefined;
              secondaryEmails: {
                id: number;
                email: string;
                emailVerified: Date | null;
              }[];
              isPremium: boolean | undefined;
              organizationId: null;
              organization: {
                id: number;
                isPlatform: boolean;
                slug: string;
                isOrgAdmin: boolean;
              };
              username: string | null;
              profile: import("@calcom/types/UserProfile").UserAsPersonalProfile;
              profiles: never[];
              organizationSettings?: undefined;
              id: number;
              name: string | null;
              email: string;
              emailMd5: string;
              emailVerified: Date | null;
              startTime: number;
              endTime: number;
              bufferTime: number;
              locale: string;
              timeFormat: number | null;
              timeZone: string;
              avatar: string;
              avatarUrl: string | null;
              createdDate: Date;
              trialEndsAt: Date | null;
              defaultScheduleId: number | null;
              completedOnboarding: boolean;
              twoFactorEnabled: boolean;
              disableImpersonation: boolean;
              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
              identityProviderEmail: string;
              brandColor: string | null;
              darkBrandColor: string | null;
              bio: string | null;
              weekStart: string;
              theme: string | null;
              appTheme: string | null;
              hideBranding: boolean;
              metadata: import(".prisma/client").Prisma.JsonValue;
              defaultBookerLayouts: {
                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
              } | null;
              allowDynamicBooking: boolean | null;
              allowSEOIndexing: boolean | null;
              receiveMonthlyDigestEmail: boolean | null;
            }
          | {
              isTeamAdminOrOwner: boolean;
              passwordAdded?: boolean | undefined;
              secondaryEmails: {
                id: number;
                email: string;
                emailVerified: Date | null;
              }[];
              isPremium: boolean | undefined;
              organizationId: number | null;
              organization: {
                id: number | null;
                isOrgAdmin: boolean;
                metadata: {
                  requestedSlug?: string | null | undefined;
                  paymentId?: string | undefined;
                  subscriptionId?: string | null | undefined;
                  subscriptionItemId?: string | null | undefined;
                  orgSeats?: number | null | undefined;
                  orgPricePerSeat?: number | null | undefined;
                  migratedToOrgFrom?:
                    | {
                        teamSlug?: string | null | undefined;
                        lastMigrationTime?: string | undefined;
                        reverted?: boolean | undefined;
                        lastRevertTime?: string | undefined;
                      }
                    | undefined;
                  billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                } | null;
                requestedSlug: string | null;
                name?: string | undefined;
                organizationSettings?:
                  | {
                      allowSEOIndexing: boolean;
                      lockEventTypeCreationForUsers: boolean;
                    }
                  | null
                  | undefined;
                slug?: string | null | undefined;
                logoUrl?: string | null | undefined;
                isPrivate?: boolean | undefined;
                bannerUrl?: string | null | undefined;
                isPlatform?: boolean | undefined;
              };
              username: string | null;
              profile:
                | import("@calcom/types/UserProfile").UserAsPersonalProfile
                | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                  }
                | {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    user: {
                      name: string | null;
                      id: number;
                      locale: string | null;
                      startTime: number;
                      endTime: number;
                      email: string;
                      username: string | null;
                      avatarUrl: string | null;
                      bufferTime: number;
                      defaultScheduleId: number | null;
                      isPlatformManaged: boolean;
                    };
                    organization: {
                      name: string;
                      id: number;
                      metadata: import(".prisma/client").Prisma.JsonValue;
                      organizationSettings: {
                        allowSEOIndexing: boolean;
                        lockEventTypeCreationForUsers: boolean;
                      } | null;
                      slug: string | null;
                      logoUrl: string | null;
                      isPrivate: boolean;
                      bannerUrl: string | null;
                      isPlatform: boolean;
                      members: {
                        id: number;
                        role: import(".prisma/client").$Enums.MembershipRole;
                        userId: number;
                        teamId: number;
                        disableImpersonation: boolean;
                        accepted: boolean;
                      }[];
                    } & Omit<
                      Pick<
                        {
                          id: number;
                          name: string;
                          slug: string | null;
                          logoUrl: string | null;
                          calVideoLogo: string | null;
                          appLogo: string | null;
                          appIconLogo: string | null;
                          bio: string | null;
                          hideBranding: boolean;
                          isPrivate: boolean;
                          hideBookATeamMember: boolean;
                          createdAt: Date;
                          metadata: import(".prisma/client").Prisma.JsonValue | null;
                          theme: string | null;
                          brandColor: string | null;
                          darkBrandColor: string | null;
                          bannerUrl: string | null;
                          parentId: number | null;
                          timeFormat: number | null;
                          timeZone: string;
                          weekStart: string;
                          isOrganization: boolean;
                          pendingPayment: boolean;
                          isPlatform: boolean;
                          createdByOAuthClientId: string | null;
                          smsLockState: import(".prisma/client").$Enums.SMSLockState;
                          smsLockReviewedByAdmin: boolean;
                          bookingLimits: import(".prisma/client").Prisma.JsonValue | null;
                          includeManagedEventsInLimits: boolean;
                        },
                        "name" | "id" | "metadata" | "slug" | "logoUrl" | "bannerUrl" | "isPlatform"
                      >,
                      "metadata"
                    > & {
                        requestedSlug: string | null;
                        metadata: {
                          requestedSlug: string | null;
                          paymentId?: string | undefined;
                          subscriptionId?: string | null | undefined;
                          subscriptionItemId?: string | null | undefined;
                          orgSeats?: number | null | undefined;
                          orgPricePerSeat?: number | null | undefined;
                          migratedToOrgFrom?:
                            | {
                                teamSlug?: string | null | undefined;
                                lastMigrationTime?: string | undefined;
                                reverted?: boolean | undefined;
                                lastRevertTime?: string | undefined;
                              }
                            | undefined;
                          billingPeriod?: import("@calcom/prisma/zod-utils").BillingPeriod | undefined;
                        };
                      };
                    movedFromUser: {
                      id: number;
                    } | null;
                    id: number;
                    uid: string;
                    userId: number;
                    createdAt: Date & string;
                    updatedAt: Date & string;
                    username: string;
                    organizationId: number;
                    upId: string;
                  }
                | ({
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                  } & import("@calcom/types/UserProfile").UserAsPersonalProfile)
                | (import("@calcom/types/UserProfile").UserAsPersonalProfile & {
                    name: string | null;
                    avatarUrl: string | null;
                    startTime: number;
                    endTime: number;
                    bufferTime: number;
                    username: string | null;
                    upId: string;
                    id: null;
                    organizationId: null;
                    organization: null;
                  });
              profiles: import("@calcom/types/UserProfile").UserProfile[];
              organizationSettings:
                | {
                    allowSEOIndexing: boolean;
                    lockEventTypeCreationForUsers: boolean;
                  }
                | null
                | undefined;
              id: number;
              name: string | null;
              email: string;
              emailMd5: string;
              emailVerified: Date | null;
              startTime: number;
              endTime: number;
              bufferTime: number;
              locale: string;
              timeFormat: number | null;
              timeZone: string;
              avatar: string;
              avatarUrl: string | null;
              createdDate: Date;
              trialEndsAt: Date | null;
              defaultScheduleId: number | null;
              completedOnboarding: boolean;
              twoFactorEnabled: boolean;
              disableImpersonation: boolean;
              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
              identityProviderEmail: string;
              brandColor: string | null;
              darkBrandColor: string | null;
              bio: string | null;
              weekStart: string;
              theme: string | null;
              appTheme: string | null;
              hideBranding: boolean;
              metadata: import(".prisma/client").Prisma.JsonValue;
              defaultBookerLayouts: {
                enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
              } | null;
              allowDynamicBooking: boolean | null;
              allowSEOIndexing: boolean | null;
              receiveMonthlyDigestEmail: boolean | null;
            };
      }>;
      myStats: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          id: number;
          sumOfBookings: number | undefined;
          sumOfCalendars: number | undefined;
          sumOfTeams: number | undefined;
          sumOfEventTypes: number | undefined;
          sumOfTeamEventTypes: number | undefined;
        };
      }>;
      platformMe: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          id: number;
          username: string | null;
          email: string;
          timeFormat: number | null;
          timeZone: string;
          defaultScheduleId: number | null;
          weekStart: string;
          organizationId: number | null;
          organization: {
            isPlatform: any;
            id: number | null;
          };
        };
      }>;
      deleteMe: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          password: string;
          totpCode?: string | undefined;
        };
        output: void;
      }>;
      deleteMeWithoutPassword: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: void;
        output: void;
      }>;
      connectedCalendars: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input:
          | {
              eventTypeId: number | null;
              onboarding?: boolean | undefined;
            }
          | undefined;
        output: {
          connectedCalendars: (
            | {
                integration: import("@calcom/types/App").App & {
                  credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                  credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                };
                credentialId: number;
                delegationCredentialId: string | null;
                error?: undefined;
                primary?: undefined;
                calendars?: undefined;
              }
            | {
                integration: import("@calcom/types/App").App & {
                  credential: import("@calcom/app-store/utils").CredentialDataWithTeamName;
                  credentials: import("@calcom/app-store/utils").CredentialDataWithTeamName[];
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                };
                credentialId: number;
                error: {
                  message: string;
                };
                delegationCredentialId?: undefined;
                primary?: undefined;
                calendars?: undefined;
              }
            | {
                integration: {
                  installed?: boolean;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  title?: string;
                  name: string;
                  description: string;
                  variant:
                    | "calendar"
                    | "payment"
                    | "conferencing"
                    | "video"
                    | "other"
                    | "other_calendar"
                    | "automation"
                    | "crm";
                  slug: string;
                  category?: string;
                  categories: import(".prisma/client").AppCategories[];
                  extendsFeature?: "EventType" | "User";
                  logo: string;
                  publisher: string;
                  url: string;
                  docsUrl?: string;
                  verified?: boolean;
                  trending?: boolean;
                  rating?: number;
                  reviews?: number;
                  isGlobal?: boolean;
                  simplePath?: string;
                  email: string;
                  key?: import(".prisma/client").Prisma.JsonValue;
                  feeType?: "monthly" | "usage-based" | "one-time" | "free";
                  price?: number;
                  commission?: number;
                  licenseRequired?: boolean;
                  teamsPlanRequired?: {
                    upgradeUrl: string;
                  };
                  appData?: import("@calcom/types/App").AppData;
                  paid?: import("@calcom/types/App").PaidAppData;
                  dirName?: string;
                  isTemplate?: boolean;
                  __template?: string;
                  dependencies?: string[];
                  concurrentMeetings?: boolean;
                  createdAt?: string;
                  isOAuth?: boolean;
                  delegationCredential?: {
                    workspacePlatformSlug: string;
                  };
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                };
                credentialId: number;
                delegationCredentialId: string | null;
                primary: {
                  readOnly: boolean;
                  primary: true | null;
                  isSelected: boolean;
                  credentialId: number;
                  delegationCredentialId: string | null;
                  name?: string;
                  email?: string;
                  primaryEmail?: string;
                  integrationTitle?: string;
                  id?: string | undefined;
                  error?: string | null | undefined;
                  userId?: number | undefined;
                  eventTypeId?: number | null | undefined;
                  integration?: string | undefined;
                  domainWideDelegationCredentialId?: string | null | undefined;
                  googleChannelId?: string | null | undefined;
                  googleChannelKind?: string | null | undefined;
                  googleChannelResourceId?: string | null | undefined;
                  googleChannelResourceUri?: string | null | undefined;
                  googleChannelExpiration?: string | null | undefined;
                  externalId: string;
                };
                calendars: {
                  readOnly: boolean;
                  primary: true | null;
                  isSelected: boolean;
                  credentialId: number;
                  delegationCredentialId: string | null;
                  name?: string;
                  email?: string;
                  primaryEmail?: string;
                  integrationTitle?: string;
                  id?: string | undefined;
                  error?: string | null | undefined;
                  userId?: number | undefined;
                  eventTypeId?: number | null | undefined;
                  integration?: string | undefined;
                  domainWideDelegationCredentialId?: string | null | undefined;
                  googleChannelId?: string | null | undefined;
                  googleChannelKind?: string | null | undefined;
                  googleChannelResourceId?: string | null | undefined;
                  googleChannelResourceUri?: string | null | undefined;
                  googleChannelExpiration?: string | null | undefined;
                  externalId: string;
                }[];
                error?: undefined;
              }
            | {
                integration: {
                  installed?: boolean;
                  type:
                    | `${string}_calendar`
                    | `${string}_messaging`
                    | `${string}_payment`
                    | `${string}_video`
                    | `${string}_other`
                    | `${string}_automation`
                    | `${string}_analytics`
                    | `${string}_crm`
                    | `${string}_other_calendar`;
                  title?: string;
                  name: string;
                  description: string;
                  variant:
                    | "calendar"
                    | "payment"
                    | "conferencing"
                    | "video"
                    | "other"
                    | "other_calendar"
                    | "automation"
                    | "crm";
                  slug: string;
                  category?: string;
                  categories: import(".prisma/client").AppCategories[];
                  extendsFeature?: "EventType" | "User";
                  logo: string;
                  publisher: string;
                  url: string;
                  docsUrl?: string;
                  verified?: boolean;
                  trending?: boolean;
                  rating?: number;
                  reviews?: number;
                  isGlobal?: boolean;
                  simplePath?: string;
                  email: string;
                  key?: import(".prisma/client").Prisma.JsonValue;
                  feeType?: "monthly" | "usage-based" | "one-time" | "free";
                  price?: number;
                  commission?: number;
                  licenseRequired?: boolean;
                  teamsPlanRequired?: {
                    upgradeUrl: string;
                  };
                  appData?: import("@calcom/types/App").AppData;
                  paid?: import("@calcom/types/App").PaidAppData;
                  dirName?: string;
                  isTemplate?: boolean;
                  __template?: string;
                  dependencies?: string[];
                  concurrentMeetings?: boolean;
                  createdAt?: string;
                  isOAuth?: boolean;
                  delegationCredential?: {
                    workspacePlatformSlug: string;
                  };
                  locationOption: import("@calcom/app-store/utils").LocationOption | null;
                };
                credentialId: number;
                delegationCredentialId: string | null | undefined;
                error: {
                  message: string;
                };
                primary?: undefined;
                calendars?: undefined;
              }
          )[];
          destinationCalendar: {
            primary?: boolean;
            name?: string;
            readOnly?: boolean;
            email?: string;
            primaryEmail: string | null;
            credentialId: number | null;
            integrationTitle?: string;
            id: string | number;
            error?: string | null | undefined;
            userId: number | null;
            eventTypeId: number | null;
            integration: string;
            delegationCredentialId: string | null;
            domainWideDelegationCredentialId: string | null;
            googleChannelId?: string | null | undefined;
            googleChannelKind?: string | null | undefined;
            googleChannelResourceId?: string | null | undefined;
            googleChannelResourceUri?: string | null | undefined;
            googleChannelExpiration?: string | null | undefined;
            externalId: string;
          };
        };
      }>;
      setDestinationCalendar: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          integration: string;
          externalId: string;
          eventTypeId?: number | null | undefined;
          bookingId?: number | null | undefined;
        };
        output: void;
      }>;
      integrations: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          variant?: string | undefined;
          exclude?: string[] | undefined;
          onlyInstalled?: boolean | undefined;
          includeTeamInstalledApps?: boolean | undefined;
          extendsFeature?: "EventType" | undefined;
          teamId?: number | null | undefined;
          sortByMostPopular?: boolean | undefined;
          sortByInstalledFirst?: boolean | undefined;
          categories?:
            | (
                | "calendar"
                | "messaging"
                | "other"
                | "payment"
                | "video"
                | "web3"
                | "automation"
                | "analytics"
                | "conferencing"
                | "crm"
              )[]
            | undefined;
          appId?: string | undefined;
        };
        output: {
          items: {
            dependencyData?: import("@calcom/app-store/_appRegistry").TDependencyData | undefined;
            userCredentialIds: number[];
            invalidCredentialIds: number[];
            teams: ({
              teamId: number;
              name: string;
              logoUrl: string | null;
              credentialId: number;
              isAdmin: boolean;
            } | null)[];
            isInstalled: boolean | undefined;
            isSetupAlready: boolean | undefined;
            credentialOwner?: import("@calcom/app-store/types").CredentialOwner | undefined;
            installed?: boolean;
            type:
              | `${string}_calendar`
              | `${string}_messaging`
              | `${string}_payment`
              | `${string}_video`
              | `${string}_other`
              | `${string}_automation`
              | `${string}_analytics`
              | `${string}_crm`
              | `${string}_other_calendar`;
            title?: string;
            name: string;
            description: string;
            variant:
              | "calendar"
              | "payment"
              | "conferencing"
              | "video"
              | "other"
              | "other_calendar"
              | "automation"
              | "crm";
            slug: string;
            category?: string;
            categories: import(".prisma/client").AppCategories[];
            extendsFeature?: "EventType" | "User";
            logo: string;
            publisher: string;
            url: string;
            docsUrl?: string;
            verified?: boolean;
            trending?: boolean;
            rating?: number;
            reviews?: number;
            isGlobal?: boolean;
            simplePath?: string;
            email: string;
            feeType?: "monthly" | "usage-based" | "one-time" | "free";
            price?: number;
            commission?: number;
            licenseRequired?: boolean;
            teamsPlanRequired?: {
              upgradeUrl: string;
            };
            appData?: import("@calcom/types/App").AppData;
            paid?: import("@calcom/types/App").PaidAppData;
            dirName?: string;
            isTemplate?: boolean;
            __template?: string;
            dependencies?: string[];
            concurrentMeetings?: boolean;
            createdAt?: string;
            isOAuth?: boolean;
            delegationCredential?: {
              workspacePlatformSlug: string;
            };
            locationOption: import("@calcom/app-store/utils").LocationOption | null;
            enabled: boolean;
          }[];
        };
      }>;
      appById: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          appId: string;
        };
        output: {
          installed?: boolean;
          type:
            | `${string}_calendar`
            | `${string}_messaging`
            | `${string}_payment`
            | `${string}_video`
            | `${string}_other`
            | `${string}_automation`
            | `${string}_analytics`
            | `${string}_crm`
            | `${string}_other_calendar`;
          title?: string;
          name: string;
          description: string;
          variant:
            | "calendar"
            | "payment"
            | "conferencing"
            | "video"
            | "other"
            | "other_calendar"
            | "automation"
            | "crm";
          slug: string;
          category?: string;
          categories: import(".prisma/client").AppCategories[];
          extendsFeature?: "EventType" | "User";
          logo: string;
          publisher: string;
          url: string;
          docsUrl?: string;
          verified?: boolean;
          trending?: boolean;
          rating?: number;
          reviews?: number;
          isGlobal?: boolean;
          simplePath?: string;
          email: string;
          key?: import(".prisma/client").Prisma.JsonValue;
          feeType?: "monthly" | "usage-based" | "one-time" | "free";
          price?: number;
          commission?: number;
          licenseRequired?: boolean;
          teamsPlanRequired?: {
            upgradeUrl: string;
          };
          appData?: import("@calcom/types/App").AppData;
          paid?: import("@calcom/types/App").PaidAppData;
          dirName?: string;
          isTemplate?: boolean;
          __template?: string;
          dependencies?: string[];
          concurrentMeetings?: boolean;
          createdAt?: string;
          isOAuth?: boolean;
          delegationCredential?: {
            workspacePlatformSlug: string;
          };
          locationOption: import("@calcom/app-store/utils").LocationOption | null;
          isInstalled: number;
        };
      }>;
      appCredentialsByType: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          appType: string;
        };
        output: {
          credentials: (
            | {
                id: number;
                delegatedToId: string;
                userId: number;
                user: {
                  email: string;
                };
                key: {
                  access_token: string;
                };
                invalid: boolean;
                teamId: null;
                team: null;
                delegatedTo: {
                  serviceAccountKey: import("zod").objectOutputType<
                    {
                      private_key: import("zod").ZodString;
                      client_email: import("zod").ZodOptional<import("zod").ZodString>;
                      client_id: import("zod").ZodString;
                      tenant_id: import("zod").ZodOptional<import("zod").ZodString>;
                    },
                    import("zod").ZodTypeAny,
                    "passthrough"
                  >;
                } | null;
                type:
                  | `${string}_calendar`
                  | `${string}_messaging`
                  | `${string}_payment`
                  | `${string}_video`
                  | `${string}_other`
                  | `${string}_automation`
                  | `${string}_analytics`
                  | `${string}_crm`
                  | `${string}_other_calendar`;
                appId: string;
              }
            | ({
                user: {
                  name: string | null;
                } | null;
                team: {
                  name: string;
                } | null;
              } & {
                key: import(".prisma/client").Prisma.JsonValue;
                id: number;
                type: string;
                userId: number | null;
                teamId: number | null;
                subscriptionId: string | null;
                billingCycleStart: number | null;
                appId: string | null;
                paymentStatus: string | null;
                invalid: boolean | null;
              })
          )[];
          userAdminTeams: number[];
        };
      }>;
      stripeCustomer: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          isPremium: boolean;
          username: string | null;
        };
      }>;
      updateProfile: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          username?: string | undefined;
          name?: string | undefined;
          email?: string | undefined;
          bio?: string | undefined;
          avatarUrl?: string | null | undefined;
          timeZone?: string | undefined;
          weekStart?: string | undefined;
          hideBranding?: boolean | undefined;
          allowDynamicBooking?: boolean | undefined;
          allowSEOIndexing?: boolean | undefined;
          receiveMonthlyDigestEmail?: boolean | undefined;
          brandColor?: string | undefined;
          darkBrandColor?: string | undefined;
          theme?: string | null | undefined;
          appTheme?: string | null | undefined;
          completedOnboarding?: boolean | undefined;
          locale?: string | undefined;
          timeFormat?: number | undefined;
          disableImpersonation?: boolean | undefined;
          metadata?:
            | {
                proPaidForByTeamId?: number | undefined;
                stripeCustomerId?: string | undefined;
                vitalSettings?:
                  | {
                      connected?: boolean | undefined;
                      selectedParam?: string | undefined;
                      sleepValue?: number | undefined;
                    }
                  | undefined;
                isPremium?: boolean | undefined;
                sessionTimeout?: number | undefined;
                defaultConferencingApp?:
                  | {
                      appSlug?: string | undefined;
                      appLink?: string | undefined;
                    }
                  | undefined;
                defaultBookerLayouts?:
                  | {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    }
                  | null
                  | undefined;
                emailChangeWaitingForVerification?: string | undefined;
                migratedToOrgFrom?:
                  | {
                      username?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      revertTime?: string | undefined;
                    }
                  | undefined;
              }
            | null
            | undefined;
          travelSchedules?:
            | {
                startDate: Date;
                timeZone: string;
                id?: number | undefined;
                endDate?: Date | undefined;
              }[]
            | undefined;
          secondaryEmails?:
            | {
                id: number;
                email: string;
                isDeleted?: boolean | undefined;
              }[]
            | undefined;
        };
        output: {
          email: string | undefined;
          avatarUrl: string | null;
          hasEmailBeenChanged: boolean | "" | undefined;
          sendEmailVerification: boolean;
          username?: string | undefined;
          name?: string | undefined;
          bio?: string | undefined;
          timeZone?: string | undefined;
          weekStart?: string | undefined;
          hideBranding?: boolean | undefined;
          allowDynamicBooking?: boolean | undefined;
          allowSEOIndexing?: boolean | undefined;
          receiveMonthlyDigestEmail?: boolean | undefined;
          brandColor?: string | undefined;
          darkBrandColor?: string | undefined;
          theme?: string | null | undefined;
          appTheme?: string | null | undefined;
          completedOnboarding?: boolean | undefined;
          locale?: string | undefined;
          timeFormat?: number | undefined;
          disableImpersonation?: boolean | undefined;
          metadata?:
            | {
                proPaidForByTeamId?: number | undefined;
                stripeCustomerId?: string | undefined;
                vitalSettings?:
                  | {
                      connected?: boolean | undefined;
                      selectedParam?: string | undefined;
                      sleepValue?: number | undefined;
                    }
                  | undefined;
                isPremium?: boolean | undefined;
                sessionTimeout?: number | undefined;
                defaultConferencingApp?:
                  | {
                      appSlug?: string | undefined;
                      appLink?: string | undefined;
                    }
                  | undefined;
                defaultBookerLayouts?:
                  | {
                      enabledLayouts: import("@calcom/prisma/zod-utils").BookerLayouts[];
                      defaultLayout: import("@calcom/prisma/zod-utils").BookerLayouts;
                    }
                  | null
                  | undefined;
                emailChangeWaitingForVerification?: string | undefined;
                migratedToOrgFrom?:
                  | {
                      username?: string | null | undefined;
                      lastMigrationTime?: string | undefined;
                      reverted?: boolean | undefined;
                      revertTime?: string | undefined;
                    }
                  | undefined;
              }
            | null
            | undefined;
          travelSchedules?:
            | {
                startDate: Date;
                timeZone: string;
                id?: number | undefined;
                endDate?: Date | undefined;
              }[]
            | undefined;
          secondaryEmails?:
            | {
                id: number;
                email: string;
                isDeleted: boolean;
              }[]
            | undefined;
        };
      }>;
      unlinkConnectedAccount: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: void;
        output: {
          message: string;
        };
      }>;
      eventTypeOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          ids: number[];
        };
        output: void;
      }>;
      routingFormOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          ids: string[];
        };
        output: void;
      }>;
      workflowOrder: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          ids: number[];
        };
        output: void;
      }>;
      submitFeedback: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          rating: string;
          comment: string;
        };
        output: void;
      }>;
      locationOptions: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          teamId?: number | undefined;
        };
        output: {
          label: string;
          options: {
            label: string;
            value: string;
            disabled?: boolean;
            icon?: string;
            slug?: string;
            credentialId?: number;
          }[];
        }[];
      }>;
      deleteCredential: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          id: number;
          externalId?: string | undefined;
          teamId?: number | undefined;
        };
        output: void;
      }>;
      bookingUnconfirmedCount: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: number;
      }>;
      getCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          roomName: string;
        };
        output:
          | {
              data: import("zod").objectOutputType<
                {
                  id: import("zod").ZodString;
                  room_name: import("zod").ZodString;
                  start_ts: import("zod").ZodNumber;
                  status: import("zod").ZodString;
                  max_participants: import("zod").ZodOptional<import("zod").ZodNumber>;
                  duration: import("zod").ZodNumber;
                  share_token: import("zod").ZodString;
                },
                import("zod").ZodTypeAny,
                "passthrough"
              >[];
              total_count: number;
            }
          | {}
          | undefined;
      }>;
      getUserTopBanners: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          teamUpgradeBanner: ({
            team: {
              children: {
                name: string;
                id: number;
                metadata: import(".prisma/client").Prisma.JsonValue;
                createdAt: Date;
                timeZone: string;
                slug: string | null;
                parentId: number | null;
                bookingLimits: import(".prisma/client").Prisma.JsonValue;
                bio: string | null;
                weekStart: string;
                hideBranding: boolean;
                theme: string | null;
                timeFormat: number | null;
                brandColor: string | null;
                darkBrandColor: string | null;
                smsLockState: import(".prisma/client").$Enums.SMSLockState;
                smsLockReviewedByAdmin: boolean;
                logoUrl: string | null;
                calVideoLogo: string | null;
                appLogo: string | null;
                appIconLogo: string | null;
                isPrivate: boolean;
                hideBookATeamMember: boolean;
                bannerUrl: string | null;
                isOrganization: boolean;
                pendingPayment: boolean;
                isPlatform: boolean;
                createdByOAuthClientId: string | null;
                includeManagedEventsInLimits: boolean;
              }[];
            } & {
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
            };
          } & {
            id: number;
            role: import(".prisma/client").$Enums.MembershipRole;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
          })[];
          orgUpgradeBanner: ({
            team: {
              name: string;
              id: number;
              metadata: import(".prisma/client").Prisma.JsonValue;
              createdAt: Date;
              timeZone: string;
              slug: string | null;
              parentId: number | null;
              bookingLimits: import(".prisma/client").Prisma.JsonValue;
              bio: string | null;
              weekStart: string;
              hideBranding: boolean;
              theme: string | null;
              timeFormat: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              logoUrl: string | null;
              calVideoLogo: string | null;
              appLogo: string | null;
              appIconLogo: string | null;
              isPrivate: boolean;
              hideBookATeamMember: boolean;
              bannerUrl: string | null;
              isOrganization: boolean;
              pendingPayment: boolean;
              isPlatform: boolean;
              createdByOAuthClientId: string | null;
              includeManagedEventsInLimits: boolean;
            };
          } & {
            id: number;
            role: import(".prisma/client").$Enums.MembershipRole;
            userId: number;
            teamId: number;
            disableImpersonation: boolean;
            accepted: boolean;
          })[];
          verifyEmailBanner: boolean;
          calendarCredentialBanner: boolean;
          invalidAppCredentialBanners: import("@calcom/features/users/components/InvalidAppCredentialsBanner").InvalidAppCredentialBannerProps[];
        };
      }>;
      getDownloadLinkOfCalVideoRecordings: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          recordingId: string;
        };
        output:
          | {
              download_link: string;
            }
          | undefined;
      }>;
      getUsersDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output:
          | {
              appSlug?: string | undefined;
              appLink?: string | undefined;
            }
          | undefined;
      }>;
      updateUserDefaultConferencingApp: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          appSlug?: string | undefined;
          appLink?: string | undefined;
        };
        output: {
          appSlug?: string | undefined;
          appLink?: string | undefined;
        };
      }>;
      shouldVerifyEmail: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          id: number;
          email: string;
          isVerified: boolean;
        };
      }>;
      teamsAndUserProfilesQuery: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input:
          | {
              includeOrg?: boolean | undefined;
            }
          | undefined;
        output: (
          | {
              teamId: number;
              name: string;
              slug: string | null;
              image: string;
              role: import(".prisma/client").$Enums.MembershipRole;
              readOnly: boolean;
            }
          | {
              teamId: null;
              name: string | null;
              slug: string | null;
              image: string;
              readOnly: boolean;
            }
        )[];
      }>;
      connectAndJoin: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          token: string;
        };
        output: {
          isBookingAlreadyAcceptedBySomeoneElse: boolean;
          meetingUrl: string;
        };
      }>;
      outOfOfficeCreateOrUpdate: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          offset: number;
          dateRange: {
            startDate: Date;
            endDate: Date;
          };
          toTeamUserId: number | null;
          reasonId: number;
          uuid?: string | null | undefined;
          forUserId?: number | null | undefined;
          notes?: string | null | undefined;
        };
        output: {} | undefined;
      }>;
      outOfOfficeEntriesList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: {
          limit: number;
          cursor?: number | null | undefined;
          fetchTeamMembersEntries?: boolean | undefined;
          searchTerm?: string | undefined;
        };
        output: {
          rows: {
            user: {
              name: string | null;
              id: number;
              role: import(".prisma/client").$Enums.UserPermissionRole;
              metadata: import(".prisma/client").Prisma.JsonValue;
              locale: string | null;
              startTime: number;
              endTime: number;
              creationSource: import(".prisma/client").$Enums.CreationSource | null;
              email: string;
              timeZone: string;
              username: string | null;
              emailVerified: Date | null;
              bio: string | null;
              avatarUrl: string | null;
              weekStart: string;
              bufferTime: number;
              hideBranding: boolean;
              theme: string | null;
              appTheme: string | null;
              createdDate: Date;
              trialEndsAt: Date | null;
              lastActiveAt: Date | null;
              defaultScheduleId: number | null;
              completedOnboarding: boolean;
              timeFormat: number | null;
              twoFactorSecret: string | null;
              twoFactorEnabled: boolean;
              backupCodes: string | null;
              identityProvider: import(".prisma/client").$Enums.IdentityProvider;
              identityProviderId: string | null;
              invitedTo: number | null;
              brandColor: string | null;
              darkBrandColor: string | null;
              allowDynamicBooking: boolean | null;
              allowSEOIndexing: boolean | null;
              receiveMonthlyDigestEmail: boolean | null;
              verified: boolean | null;
              disableImpersonation: boolean;
              locked: boolean;
              isPlatformManaged: boolean;
              smsLockState: import(".prisma/client").$Enums.SMSLockState;
              smsLockReviewedByAdmin: boolean;
              referralLinkId: string | null;
              organizationId: number | null;
              movedToProfileId: number | null;
            };
            id: number;
            end: Date;
            start: Date;
            uuid: string;
            notes: string | null;
            toUser: {
              name: string | null;
              email: string;
              username: string | null;
            } | null;
            reason: {
              id: number;
              userId: number | null;
              reason: string;
              emoji: string;
            } | null;
            toUserId: number | null;
          }[];
          nextCursor: number | undefined;
          meta: {
            totalRowCount: number;
          };
        };
      }>;
      outOfOfficeEntryDelete: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          outOfOfficeUid: string;
          userId?: number | null | undefined;
        };
        output: {};
      }>;
      addSecondaryEmail: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          email: string;
        };
        output: {
          data: {
            id: number;
            userId: number;
            email: string;
            emailVerified: Date | null;
          };
          message: string;
        };
      }>;
      getTravelSchedules: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          id: number;
          startDate: Date;
          endDate: Date | null;
          timeZone: string;
        }[];
      }>;
      outOfOfficeReasonList: import("@trpc/server/unstable-core-do-not-import").QueryProcedure<{
        input: void;
        output: {
          id: number;
          userId: number | null;
          enabled: boolean;
          reason: string;
          emoji: string;
        }[];
      }>;
      addNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          subscription: string;
        };
        output: {
          message: string;
        };
      }>;
      removeNotificationsSubscription: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          subscription: string;
        };
        output: {
          message: string;
        };
      }>;
      markNoShow: import("@trpc/server/unstable-core-do-not-import").MutationProcedure<{
        input: {
          bookingUid: string;
          attendees?:
            | {
                email: string;
                noShow: boolean;
              }[]
            | undefined;
          noShowHost?: boolean | undefined;
        };
        output: {
          attendees: import("@calcom/features/handleMarkNoShow").NoShowAttendees;
          noShowHost: boolean;
          message: string;
        };
      }>;
    };
  }
>;
export type AppRouter = typeof appRouter;
